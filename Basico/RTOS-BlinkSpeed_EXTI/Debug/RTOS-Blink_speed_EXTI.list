
RTOS-Blink_speed_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004704  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004814  08004814  00005814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080048e0  080048e0  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080048e0  080048e0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e4  080048e4  000058e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080048e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019d0  20000010  080048f8  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019e0  080048f8  000069e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b93  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6b  00000000  00000000  00017bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0001a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d60  00000000  00000000  0001b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002923  00000000  00000000  0001c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112b8  00000000  00000000  0001f01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091dbc  00000000  00000000  000302d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c208f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  000c20d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c6948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080047fc 	.word	0x080047fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080047fc 	.word	0x080047fc

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa64 	bl	8000620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f830 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f86a 	bl	8000234 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fbec 	bl	800193c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew (8, sizeof(uint16_t), &Queue01_attributes);
 8000164:	4a0d      	ldr	r2, [pc, #52]	@ (800019c <main+0x4c>)
 8000166:	2102      	movs	r1, #2
 8000168:	2008      	movs	r0, #8
 800016a:	f001 fcf1 	bl	8001b50 <osMessageQueueNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0b      	ldr	r2, [pc, #44]	@ (80001a0 <main+0x50>)
 8000172:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ledBlink */
  ledBlinkHandle = osThreadNew(StartLedBlink, NULL, &ledBlink_attributes);
 8000174:	4a0b      	ldr	r2, [pc, #44]	@ (80001a4 <main+0x54>)
 8000176:	2100      	movs	r1, #0
 8000178:	480b      	ldr	r0, [pc, #44]	@ (80001a8 <main+0x58>)
 800017a:	f001 fc3c 	bl	80019f6 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0a      	ldr	r2, [pc, #40]	@ (80001ac <main+0x5c>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of readButton */
  readButtonHandle = osThreadNew(StartReadButton, NULL, &readButton_attributes);
 8000184:	4a0a      	ldr	r2, [pc, #40]	@ (80001b0 <main+0x60>)
 8000186:	2100      	movs	r1, #0
 8000188:	480a      	ldr	r0, [pc, #40]	@ (80001b4 <main+0x64>)
 800018a:	f001 fc34 	bl	80019f6 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a09      	ldr	r2, [pc, #36]	@ (80001b8 <main+0x68>)
 8000192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000194:	f001 fbf4 	bl	8001980 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000198:	bf00      	nop
 800019a:	e7fd      	b.n	8000198 <main+0x48>
 800019c:	0800489c 	.word	0x0800489c
 80001a0:	20000034 	.word	0x20000034
 80001a4:	08004854 	.word	0x08004854
 80001a8:	08000315 	.word	0x08000315
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	08004878 	.word	0x08004878
 80001b4:	08000365 	.word	0x08000365
 80001b8:	20000030 	.word	0x20000030

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	@ 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	@ 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f004 fadc 	bl	8004788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001de:	2302      	movs	r3, #2
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e6:	2310      	movs	r3, #16
 80001e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ea:	2300      	movs	r3, #0
 80001ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fcf4 	bl	8000be0 <HAL_RCC_OscConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001fe:	f000 f8fb 	bl	80003f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000202:	230f      	movs	r3, #15
 8000204:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f000 ff62 	bl	80010e4 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000226:	f000 f8e7 	bl	80003f8 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	@ 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	f107 0308 	add.w	r3, r7, #8
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000248:	4b1c      	ldr	r3, [pc, #112]	@ (80002bc <MX_GPIO_Init+0x88>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a1b      	ldr	r2, [pc, #108]	@ (80002bc <MX_GPIO_Init+0x88>)
 800024e:	f043 0308 	orr.w	r3, r3, #8
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b19      	ldr	r3, [pc, #100]	@ (80002bc <MX_GPIO_Init+0x88>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0308 	and.w	r3, r3, #8
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000266:	4816      	ldr	r0, [pc, #88]	@ (80002c0 <MX_GPIO_Init+0x8c>)
 8000268:	f000 fc70 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800026c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000270:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000272:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <MX_GPIO_Init+0x90>)
 8000274:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	4619      	mov	r1, r3
 8000280:	480f      	ldr	r0, [pc, #60]	@ (80002c0 <MX_GPIO_Init+0x8c>)
 8000282:	f000 fadf 	bl	8000844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800028a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	2301      	movs	r3, #1
 800028e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	2302      	movs	r3, #2
 8000296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000298:	f107 0308 	add.w	r3, r7, #8
 800029c:	4619      	mov	r1, r3
 800029e:	4808      	ldr	r0, [pc, #32]	@ (80002c0 <MX_GPIO_Init+0x8c>)
 80002a0:	f000 fad0 	bl	8000844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2105      	movs	r1, #5
 80002a8:	2028      	movs	r0, #40	@ 0x28
 80002aa:	f000 faa0 	bl	80007ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002ae:	2028      	movs	r0, #40	@ 0x28
 80002b0:	f000 fab9 	bl	8000826 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002b4:	bf00      	nop
 80002b6:	3718      	adds	r7, #24
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40021000 	.word	0x40021000
 80002c0:	40010c00 	.word	0x40010c00
 80002c4:	10110000 	.word	0x10110000

080002c8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
volatile uint8_t button_flag = 0;
volatile uint32_t now = 0;
volatile uint32_t previous = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == Button_Pin){
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80002d8:	d112      	bne.n	8000300 <HAL_GPIO_EXTI_Callback+0x38>
	  now = osKernelGetTickCount();
 80002da:	f001 fb77 	bl	80019cc <osKernelGetTickCount>
 80002de:	4603      	mov	r3, r0
 80002e0:	4a09      	ldr	r2, [pc, #36]	@ (8000308 <HAL_GPIO_EXTI_Callback+0x40>)
 80002e2:	6013      	str	r3, [r2, #0]
	  if(now - previous > 100){
 80002e4:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <HAL_GPIO_EXTI_Callback+0x40>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <HAL_GPIO_EXTI_Callback+0x44>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	1ad3      	subs	r3, r2, r3
 80002ee:	2b64      	cmp	r3, #100	@ 0x64
 80002f0:	d906      	bls.n	8000300 <HAL_GPIO_EXTI_Callback+0x38>
		  button_flag = 1;
 80002f2:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <HAL_GPIO_EXTI_Callback+0x48>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
		  previous = now;
 80002f8:	4b03      	ldr	r3, [pc, #12]	@ (8000308 <HAL_GPIO_EXTI_Callback+0x40>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a03      	ldr	r2, [pc, #12]	@ (800030c <HAL_GPIO_EXTI_Callback+0x44>)
 80002fe:	6013      	str	r3, [r2, #0]
	  }
  }
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000003c 	.word	0x2000003c
 800030c:	20000040 	.word	0x20000040
 8000310:	20000038 	.word	0x20000038

08000314 <StartLedBlink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedBlink */
void StartLedBlink(void *argument)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t delay = 500;
 800031c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000320:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(Queue01Handle, &delay, NULL, delay);
 8000322:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <StartLedBlink+0x48>)
 8000324:	6818      	ldr	r0, [r3, #0]
 8000326:	89fb      	ldrh	r3, [r7, #14]
 8000328:	f107 010e 	add.w	r1, r7, #14
 800032c:	2200      	movs	r2, #0
 800032e:	f001 fce3 	bl	8001cf8 <osMessageQueueGet>
	   HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 8000332:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000336:	480a      	ldr	r0, [pc, #40]	@ (8000360 <StartLedBlink+0x4c>)
 8000338:	f000 fc20 	bl	8000b7c <HAL_GPIO_TogglePin>
	   osDelay(delay);
 800033c:	89fb      	ldrh	r3, [r7, #14]
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fbeb 	bl	8001b1a <osDelay>
	   HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 8000344:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000348:	4805      	ldr	r0, [pc, #20]	@ (8000360 <StartLedBlink+0x4c>)
 800034a:	f000 fc17 	bl	8000b7c <HAL_GPIO_TogglePin>
	   osDelay(delay);
 800034e:	89fb      	ldrh	r3, [r7, #14]
 8000350:	4618      	mov	r0, r3
 8000352:	f001 fbe2 	bl	8001b1a <osDelay>
	  osMessageQueueGet(Queue01Handle, &delay, NULL, delay);
 8000356:	bf00      	nop
 8000358:	e7e3      	b.n	8000322 <StartLedBlink+0xe>
 800035a:	bf00      	nop
 800035c:	20000034 	.word	0x20000034
 8000360:	40010c00 	.word	0x40010c00

08000364 <StartReadButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadButton */
void StartReadButton(void *argument)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadButton */
	uint8_t index = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	75fb      	strb	r3, [r7, #23]
	uint16_t delays[] = {200,750,1500};
 8000370:	4a15      	ldr	r2, [pc, #84]	@ (80003c8 <StartReadButton+0x64>)
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800037a:	6018      	str	r0, [r3, #0]
 800037c:	3304      	adds	r3, #4
 800037e:	8019      	strh	r1, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  if(button_flag){
 8000380:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <StartReadButton+0x68>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	b2db      	uxtb	r3, r3
 8000386:	2b00      	cmp	r3, #0
 8000388:	d019      	beq.n	80003be <StartReadButton+0x5a>
		  button_flag = 0;
 800038a:	4b10      	ldr	r3, [pc, #64]	@ (80003cc <StartReadButton+0x68>)
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]

		  index++;
 8000390:	7dfb      	ldrb	r3, [r7, #23]
 8000392:	3301      	adds	r3, #1
 8000394:	75fb      	strb	r3, [r7, #23]

		  if(index >= 3){
 8000396:	7dfb      	ldrb	r3, [r7, #23]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d901      	bls.n	80003a0 <StartReadButton+0x3c>
			  index = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	75fb      	strb	r3, [r7, #23]
		  }
		  uint16_t delay = delays[index];
 80003a0:	7dfb      	ldrb	r3, [r7, #23]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	3318      	adds	r3, #24
 80003a6:	443b      	add	r3, r7
 80003a8:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80003ac:	81fb      	strh	r3, [r7, #14]
		  osMessageQueuePut(Queue01Handle, &delay, 0, 0);
 80003ae:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <StartReadButton+0x6c>)
 80003b0:	6818      	ldr	r0, [r3, #0]
 80003b2:	f107 010e 	add.w	r1, r7, #14
 80003b6:	2300      	movs	r3, #0
 80003b8:	2200      	movs	r2, #0
 80003ba:	f001 fc3d 	bl	8001c38 <osMessageQueuePut>
	  }
    osDelay(10);
 80003be:	200a      	movs	r0, #10
 80003c0:	f001 fbab 	bl	8001b1a <osDelay>
	  if(button_flag){
 80003c4:	e7dc      	b.n	8000380 <StartReadButton+0x1c>
 80003c6:	bf00      	nop
 80003c8:	08004834 	.word	0x08004834
 80003cc:	20000038 	.word	0x20000038
 80003d0:	20000034 	.word	0x20000034

080003d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d101      	bne.n	80003ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80003e6:	f000 f931 	bl	800064c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40000800 	.word	0x40000800

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <Error_Handler+0x8>

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	4b18      	ldr	r3, [pc, #96]	@ (800046c <HAL_MspInit+0x68>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a17      	ldr	r2, [pc, #92]	@ (800046c <HAL_MspInit+0x68>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b15      	ldr	r3, [pc, #84]	@ (800046c <HAL_MspInit+0x68>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b12      	ldr	r3, [pc, #72]	@ (800046c <HAL_MspInit+0x68>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	4a11      	ldr	r2, [pc, #68]	@ (800046c <HAL_MspInit+0x68>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800042c:	61d3      	str	r3, [r2, #28]
 800042e:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <HAL_MspInit+0x68>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	210f      	movs	r1, #15
 800043e:	f06f 0001 	mvn.w	r0, #1
 8000442:	f000 f9d4 	bl	80007ee <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000446:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <HAL_MspInit+0x6c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <HAL_MspInit+0x6c>)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000
 8000470:	40010000 	.word	0x40010000

08000474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08e      	sub	sp, #56	@ 0x38
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800047c:	2300      	movs	r3, #0
 800047e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000480:	2300      	movs	r3, #0
 8000482:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000484:	2300      	movs	r3, #0
 8000486:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800048a:	4b34      	ldr	r3, [pc, #208]	@ (800055c <HAL_InitTick+0xe8>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a33      	ldr	r2, [pc, #204]	@ (800055c <HAL_InitTick+0xe8>)
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b31      	ldr	r3, [pc, #196]	@ (800055c <HAL_InitTick+0xe8>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004a2:	f107 0210 	add.w	r2, r7, #16
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	4611      	mov	r1, r2
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 ff75 	bl	800139c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004b2:	6a3b      	ldr	r3, [r7, #32]
 80004b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d103      	bne.n	80004c4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004bc:	f000 ff5a 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 80004c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80004c2:	e004      	b.n	80004ce <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004c4:	f000 ff56 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 80004c8:	4603      	mov	r3, r0
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004d0:	4a23      	ldr	r2, [pc, #140]	@ (8000560 <HAL_InitTick+0xec>)
 80004d2:	fba2 2303 	umull	r2, r3, r2, r3
 80004d6:	0c9b      	lsrs	r3, r3, #18
 80004d8:	3b01      	subs	r3, #1
 80004da:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80004dc:	4b21      	ldr	r3, [pc, #132]	@ (8000564 <HAL_InitTick+0xf0>)
 80004de:	4a22      	ldr	r2, [pc, #136]	@ (8000568 <HAL_InitTick+0xf4>)
 80004e0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80004e2:	4b20      	ldr	r3, [pc, #128]	@ (8000564 <HAL_InitTick+0xf0>)
 80004e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004e8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80004ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000564 <HAL_InitTick+0xf0>)
 80004ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004ee:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80004f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <HAL_InitTick+0xf0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <HAL_InitTick+0xf0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fc:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <HAL_InitTick+0xf0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000502:	4818      	ldr	r0, [pc, #96]	@ (8000564 <HAL_InitTick+0xf0>)
 8000504:	f000 ff98 	bl	8001438 <HAL_TIM_Base_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800050e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000512:	2b00      	cmp	r3, #0
 8000514:	d11b      	bne.n	800054e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000516:	4813      	ldr	r0, [pc, #76]	@ (8000564 <HAL_InitTick+0xf0>)
 8000518:	f000 ffe6 	bl	80014e8 <HAL_TIM_Base_Start_IT>
 800051c:	4603      	mov	r3, r0
 800051e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000522:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000526:	2b00      	cmp	r3, #0
 8000528:	d111      	bne.n	800054e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800052a:	201e      	movs	r0, #30
 800052c:	f000 f97b 	bl	8000826 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b0f      	cmp	r3, #15
 8000534:	d808      	bhi.n	8000548 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000536:	2200      	movs	r2, #0
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	201e      	movs	r0, #30
 800053c:	f000 f957 	bl	80007ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000540:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <HAL_InitTick+0xf8>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e002      	b.n	800054e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000548:	2301      	movs	r3, #1
 800054a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800054e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000552:	4618      	mov	r0, r3
 8000554:	3738      	adds	r7, #56	@ 0x38
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	431bde83 	.word	0x431bde83
 8000564:	20000044 	.word	0x20000044
 8000568:	40000800 	.word	0x40000800
 800056c:	20000004 	.word	0x20000004

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <NMI_Handler+0x4>

08000578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <HardFault_Handler+0x4>

08000580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <MemManage_Handler+0x4>

08000588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <UsageFault_Handler+0x4>

08000598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <TIM4_IRQHandler+0x10>)
 80005aa:	f000 ffef 	bl	800158c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000044 	.word	0x20000044

080005b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80005bc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80005c0:	f000 faf6 	bl	8000bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d4:	f7ff fff8 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480b      	ldr	r0, [pc, #44]	@ (8000608 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005da:	490c      	ldr	r1, [pc, #48]	@ (800060c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a09      	ldr	r2, [pc, #36]	@ (8000614 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f0:	4c09      	ldr	r4, [pc, #36]	@ (8000618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fe:	f004 f8cb 	bl	8004798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fda5 	bl	8000150 <main>
  bx lr
 8000606:	4770      	bx	lr
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000610:	080048e8 	.word	0x080048e8
  ldr r2, =_sbss
 8000614:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000618:	200019e0 	.word	0x200019e0

0800061c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_2_IRQHandler>
	...

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <HAL_Init+0x28>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a07      	ldr	r2, [pc, #28]	@ (8000648 <HAL_Init+0x28>)
 800062a:	f043 0310 	orr.w	r3, r3, #16
 800062e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000630:	2003      	movs	r0, #3
 8000632:	f000 f8d1 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000636:	200f      	movs	r0, #15
 8000638:	f7ff ff1c 	bl	8000474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800063c:	f7ff fee2 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40022000 	.word	0x40022000

0800064c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <HAL_IncTick+0x1c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <HAL_IncTick+0x20>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a03      	ldr	r2, [pc, #12]	@ (800066c <HAL_IncTick+0x20>)
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	20000008 	.word	0x20000008
 800066c:	2000008c 	.word	0x2000008c

08000670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return uwTick;
 8000674:	4b02      	ldr	r3, [pc, #8]	@ (8000680 <HAL_GetTick+0x10>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	2000008c 	.word	0x2000008c

08000684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b6:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_GetPriorityGrouping+0x18>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	f003 0307 	and.w	r3, r3, #7
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	db0b      	blt.n	8000712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	f003 021f 	and.w	r2, r3, #31
 8000700:	4906      	ldr	r1, [pc, #24]	@ (800071c <__NVIC_EnableIRQ+0x34>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	095b      	lsrs	r3, r3, #5
 8000708:	2001      	movs	r0, #1
 800070a:	fa00 f202 	lsl.w	r2, r0, r2
 800070e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100

08000720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	db0a      	blt.n	800074a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	490c      	ldr	r1, [pc, #48]	@ (800076c <__NVIC_SetPriority+0x4c>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	0112      	lsls	r2, r2, #4
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	440b      	add	r3, r1
 8000744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000748:	e00a      	b.n	8000760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4908      	ldr	r1, [pc, #32]	@ (8000770 <__NVIC_SetPriority+0x50>)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	3b04      	subs	r3, #4
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	440b      	add	r3, r1
 800075e:	761a      	strb	r2, [r3, #24]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e100 	.word	0xe000e100
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	@ 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	f1c3 0307 	rsb	r3, r3, #7
 800078e:	2b04      	cmp	r3, #4
 8000790:	bf28      	it	cs
 8000792:	2304      	movcs	r3, #4
 8000794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3304      	adds	r3, #4
 800079a:	2b06      	cmp	r3, #6
 800079c:	d902      	bls.n	80007a4 <NVIC_EncodePriority+0x30>
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3b03      	subs	r3, #3
 80007a2:	e000      	b.n	80007a6 <NVIC_EncodePriority+0x32>
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43da      	mvns	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	401a      	ands	r2, r3
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43d9      	mvns	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	4313      	orrs	r3, r2
         );
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3724      	adds	r7, #36	@ 0x24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff4f 	bl	8000684 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff64 	bl	80006cc <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ffb2 	bl	8000774 <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff81 	bl	8000720 <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff57 	bl	80006e8 <__NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000844:	b480      	push	{r7}
 8000846:	b08b      	sub	sp, #44	@ 0x2c
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000856:	e169      	b.n	8000b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000858:	2201      	movs	r2, #1
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	69fa      	ldr	r2, [r7, #28]
 8000868:	4013      	ands	r3, r2
 800086a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	429a      	cmp	r2, r3
 8000872:	f040 8158 	bne.w	8000b26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	4a9a      	ldr	r2, [pc, #616]	@ (8000ae4 <HAL_GPIO_Init+0x2a0>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d05e      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 8000880:	4a98      	ldr	r2, [pc, #608]	@ (8000ae4 <HAL_GPIO_Init+0x2a0>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d875      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 8000886:	4a98      	ldr	r2, [pc, #608]	@ (8000ae8 <HAL_GPIO_Init+0x2a4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d058      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 800088c:	4a96      	ldr	r2, [pc, #600]	@ (8000ae8 <HAL_GPIO_Init+0x2a4>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d86f      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 8000892:	4a96      	ldr	r2, [pc, #600]	@ (8000aec <HAL_GPIO_Init+0x2a8>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d052      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 8000898:	4a94      	ldr	r2, [pc, #592]	@ (8000aec <HAL_GPIO_Init+0x2a8>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d869      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 800089e:	4a94      	ldr	r2, [pc, #592]	@ (8000af0 <HAL_GPIO_Init+0x2ac>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d04c      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 80008a4:	4a92      	ldr	r2, [pc, #584]	@ (8000af0 <HAL_GPIO_Init+0x2ac>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d863      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 80008aa:	4a92      	ldr	r2, [pc, #584]	@ (8000af4 <HAL_GPIO_Init+0x2b0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d046      	beq.n	800093e <HAL_GPIO_Init+0xfa>
 80008b0:	4a90      	ldr	r2, [pc, #576]	@ (8000af4 <HAL_GPIO_Init+0x2b0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d85d      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d82a      	bhi.n	8000910 <HAL_GPIO_Init+0xcc>
 80008ba:	2b12      	cmp	r3, #18
 80008bc:	d859      	bhi.n	8000972 <HAL_GPIO_Init+0x12e>
 80008be:	a201      	add	r2, pc, #4	@ (adr r2, 80008c4 <HAL_GPIO_Init+0x80>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	0800093f 	.word	0x0800093f
 80008c8:	08000919 	.word	0x08000919
 80008cc:	0800092b 	.word	0x0800092b
 80008d0:	0800096d 	.word	0x0800096d
 80008d4:	08000973 	.word	0x08000973
 80008d8:	08000973 	.word	0x08000973
 80008dc:	08000973 	.word	0x08000973
 80008e0:	08000973 	.word	0x08000973
 80008e4:	08000973 	.word	0x08000973
 80008e8:	08000973 	.word	0x08000973
 80008ec:	08000973 	.word	0x08000973
 80008f0:	08000973 	.word	0x08000973
 80008f4:	08000973 	.word	0x08000973
 80008f8:	08000973 	.word	0x08000973
 80008fc:	08000973 	.word	0x08000973
 8000900:	08000973 	.word	0x08000973
 8000904:	08000973 	.word	0x08000973
 8000908:	08000921 	.word	0x08000921
 800090c:	08000935 	.word	0x08000935
 8000910:	4a79      	ldr	r2, [pc, #484]	@ (8000af8 <HAL_GPIO_Init+0x2b4>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d013      	beq.n	800093e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000916:	e02c      	b.n	8000972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	623b      	str	r3, [r7, #32]
          break;
 800091e:	e029      	b.n	8000974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	3304      	adds	r3, #4
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e024      	b.n	8000974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	3308      	adds	r3, #8
 8000930:	623b      	str	r3, [r7, #32]
          break;
 8000932:	e01f      	b.n	8000974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	330c      	adds	r3, #12
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e01a      	b.n	8000974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d102      	bne.n	800094c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000946:	2304      	movs	r3, #4
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e013      	b.n	8000974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d105      	bne.n	8000960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000954:	2308      	movs	r3, #8
 8000956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	611a      	str	r2, [r3, #16]
          break;
 800095e:	e009      	b.n	8000974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000960:	2308      	movs	r3, #8
 8000962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69fa      	ldr	r2, [r7, #28]
 8000968:	615a      	str	r2, [r3, #20]
          break;
 800096a:	e003      	b.n	8000974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
          break;
 8000970:	e000      	b.n	8000974 <HAL_GPIO_Init+0x130>
          break;
 8000972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2bff      	cmp	r3, #255	@ 0xff
 8000978:	d801      	bhi.n	800097e <HAL_GPIO_Init+0x13a>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	e001      	b.n	8000982 <HAL_GPIO_Init+0x13e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3304      	adds	r3, #4
 8000982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2bff      	cmp	r3, #255	@ 0xff
 8000988:	d802      	bhi.n	8000990 <HAL_GPIO_Init+0x14c>
 800098a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	e002      	b.n	8000996 <HAL_GPIO_Init+0x152>
 8000990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000992:	3b08      	subs	r3, #8
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	210f      	movs	r1, #15
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	401a      	ands	r2, r3
 80009a8:	6a39      	ldr	r1, [r7, #32]
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	fa01 f303 	lsl.w	r3, r1, r3
 80009b0:	431a      	orrs	r2, r3
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 80b1 	beq.w	8000b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c4:	4b4d      	ldr	r3, [pc, #308]	@ (8000afc <HAL_GPIO_Init+0x2b8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a4c      	ldr	r2, [pc, #304]	@ (8000afc <HAL_GPIO_Init+0x2b8>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b4a      	ldr	r3, [pc, #296]	@ (8000afc <HAL_GPIO_Init+0x2b8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009dc:	4a48      	ldr	r2, [pc, #288]	@ (8000b00 <HAL_GPIO_Init+0x2bc>)
 80009de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	3302      	adds	r3, #2
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	220f      	movs	r2, #15
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a40      	ldr	r2, [pc, #256]	@ (8000b04 <HAL_GPIO_Init+0x2c0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d013      	beq.n	8000a30 <HAL_GPIO_Init+0x1ec>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b08 <HAL_GPIO_Init+0x2c4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d00d      	beq.n	8000a2c <HAL_GPIO_Init+0x1e8>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a3e      	ldr	r2, [pc, #248]	@ (8000b0c <HAL_GPIO_Init+0x2c8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d007      	beq.n	8000a28 <HAL_GPIO_Init+0x1e4>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b10 <HAL_GPIO_Init+0x2cc>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d101      	bne.n	8000a24 <HAL_GPIO_Init+0x1e0>
 8000a20:	2303      	movs	r3, #3
 8000a22:	e006      	b.n	8000a32 <HAL_GPIO_Init+0x1ee>
 8000a24:	2304      	movs	r3, #4
 8000a26:	e004      	b.n	8000a32 <HAL_GPIO_Init+0x1ee>
 8000a28:	2302      	movs	r3, #2
 8000a2a:	e002      	b.n	8000a32 <HAL_GPIO_Init+0x1ee>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e000      	b.n	8000a32 <HAL_GPIO_Init+0x1ee>
 8000a30:	2300      	movs	r3, #0
 8000a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a34:	f002 0203 	and.w	r2, r2, #3
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	4093      	lsls	r3, r2
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a42:	492f      	ldr	r1, [pc, #188]	@ (8000b00 <HAL_GPIO_Init+0x2bc>)
 8000a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3302      	adds	r3, #2
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	492c      	ldr	r1, [pc, #176]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	608b      	str	r3, [r1, #8]
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	4928      	ldr	r1, [pc, #160]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d006      	beq.n	8000a92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a84:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	4922      	ldr	r1, [pc, #136]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	60cb      	str	r3, [r1, #12]
 8000a90:	e006      	b.n	8000aa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a92:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a94:	68da      	ldr	r2, [r3, #12]
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	491e      	ldr	r1, [pc, #120]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	4918      	ldr	r1, [pc, #96]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	604b      	str	r3, [r1, #4]
 8000ab8:	e006      	b.n	8000ac8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4914      	ldr	r1, [pc, #80]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d021      	beq.n	8000b18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	490e      	ldr	r1, [pc, #56]	@ (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	600b      	str	r3, [r1, #0]
 8000ae0:	e021      	b.n	8000b26 <HAL_GPIO_Init+0x2e2>
 8000ae2:	bf00      	nop
 8000ae4:	10320000 	.word	0x10320000
 8000ae8:	10310000 	.word	0x10310000
 8000aec:	10220000 	.word	0x10220000
 8000af0:	10210000 	.word	0x10210000
 8000af4:	10120000 	.word	0x10120000
 8000af8:	10110000 	.word	0x10110000
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010000 	.word	0x40010000
 8000b04:	40010800 	.word	0x40010800
 8000b08:	40010c00 	.word	0x40010c00
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	40011400 	.word	0x40011400
 8000b14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_GPIO_Init+0x304>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	4909      	ldr	r1, [pc, #36]	@ (8000b48 <HAL_GPIO_Init+0x304>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b28:	3301      	adds	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b32:	fa22 f303 	lsr.w	r3, r2, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f47f ae8e 	bne.w	8000858 <HAL_GPIO_Init+0x14>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	372c      	adds	r7, #44	@ 0x2c
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	40010400 	.word	0x40010400

08000b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b5c:	787b      	ldrb	r3, [r7, #1]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b62:	887a      	ldrh	r2, [r7, #2]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b68:	e003      	b.n	8000b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	041a      	lsls	r2, r3, #16
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	611a      	str	r2, [r3, #16]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4013      	ands	r3, r2
 8000b94:	041a      	lsls	r2, r3, #16
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	43d9      	mvns	r1, r3
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	611a      	str	r2, [r3, #16]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
	...

08000bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fb7a 	bl	80002c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010400 	.word	0x40010400

08000be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e272      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 8087 	beq.w	8000d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c00:	4b92      	ldr	r3, [pc, #584]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d00c      	beq.n	8000c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c0c:	4b8f      	ldr	r3, [pc, #572]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 030c 	and.w	r3, r3, #12
 8000c14:	2b08      	cmp	r3, #8
 8000c16:	d112      	bne.n	8000c3e <HAL_RCC_OscConfig+0x5e>
 8000c18:	4b8c      	ldr	r3, [pc, #560]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c24:	d10b      	bne.n	8000c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c26:	4b89      	ldr	r3, [pc, #548]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d06c      	beq.n	8000d0c <HAL_RCC_OscConfig+0x12c>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d168      	bne.n	8000d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e24c      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c46:	d106      	bne.n	8000c56 <HAL_RCC_OscConfig+0x76>
 8000c48:	4b80      	ldr	r3, [pc, #512]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a7f      	ldr	r2, [pc, #508]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	e02e      	b.n	8000cb4 <HAL_RCC_OscConfig+0xd4>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d10c      	bne.n	8000c78 <HAL_RCC_OscConfig+0x98>
 8000c5e:	4b7b      	ldr	r3, [pc, #492]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a7a      	ldr	r2, [pc, #488]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b78      	ldr	r3, [pc, #480]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a77      	ldr	r2, [pc, #476]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e01d      	b.n	8000cb4 <HAL_RCC_OscConfig+0xd4>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c80:	d10c      	bne.n	8000c9c <HAL_RCC_OscConfig+0xbc>
 8000c82:	4b72      	ldr	r3, [pc, #456]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a71      	ldr	r2, [pc, #452]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b6f      	ldr	r3, [pc, #444]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a6e      	ldr	r2, [pc, #440]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e00b      	b.n	8000cb4 <HAL_RCC_OscConfig+0xd4>
 8000c9c:	4b6b      	ldr	r3, [pc, #428]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b68      	ldr	r3, [pc, #416]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a67      	ldr	r2, [pc, #412]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d013      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fcd8 	bl	8000670 <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fcd4 	bl	8000670 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	@ 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e200      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f0      	beq.n	8000cc4 <HAL_RCC_OscConfig+0xe4>
 8000ce2:	e014      	b.n	8000d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fcc4 	bl	8000670 <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cec:	f7ff fcc0 	bl	8000670 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b64      	cmp	r3, #100	@ 0x64
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e1ec      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfe:	4b53      	ldr	r3, [pc, #332]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f0      	bne.n	8000cec <HAL_RCC_OscConfig+0x10c>
 8000d0a:	e000      	b.n	8000d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d063      	beq.n	8000de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00b      	beq.n	8000d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d26:	4b49      	ldr	r3, [pc, #292]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 030c 	and.w	r3, r3, #12
 8000d2e:	2b08      	cmp	r3, #8
 8000d30:	d11c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x18c>
 8000d32:	4b46      	ldr	r3, [pc, #280]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d116      	bne.n	8000d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3e:	4b43      	ldr	r3, [pc, #268]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d005      	beq.n	8000d56 <HAL_RCC_OscConfig+0x176>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d001      	beq.n	8000d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e1c0      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d56:	4b3d      	ldr	r3, [pc, #244]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4939      	ldr	r1, [pc, #228]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d66:	4313      	orrs	r3, r2
 8000d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6a:	e03a      	b.n	8000de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d020      	beq.n	8000db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d74:	4b36      	ldr	r3, [pc, #216]	@ (8000e50 <HAL_RCC_OscConfig+0x270>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fc79 	bl	8000670 <HAL_GetTick>
 8000d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d82:	f7ff fc75 	bl	8000670 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e1a1      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d94:	4b2d      	ldr	r3, [pc, #180]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0f0      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4927      	ldr	r1, [pc, #156]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000db0:	4313      	orrs	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	e015      	b.n	8000de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000db6:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <HAL_RCC_OscConfig+0x270>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fc58 	bl	8000670 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fc54 	bl	8000670 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e180      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d03a      	beq.n	8000e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d019      	beq.n	8000e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000df6:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <HAL_RCC_OscConfig+0x274>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fc38 	bl	8000670 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e04:	f7ff fc34 	bl	8000670 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e160      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f0      	beq.n	8000e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 faea 	bl	80013fc <RCC_Delay>
 8000e28:	e01c      	b.n	8000e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <HAL_RCC_OscConfig+0x274>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e30:	f7ff fc1e 	bl	8000670 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e36:	e00f      	b.n	8000e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e38:	f7ff fc1a 	bl	8000670 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d908      	bls.n	8000e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e146      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	42420000 	.word	0x42420000
 8000e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e58:	4b92      	ldr	r3, [pc, #584]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e9      	bne.n	8000e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80a6 	beq.w	8000fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e76:	4b8b      	ldr	r3, [pc, #556]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10d      	bne.n	8000e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b88      	ldr	r3, [pc, #544]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a87      	ldr	r2, [pc, #540]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b85      	ldr	r3, [pc, #532]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4b82      	ldr	r3, [pc, #520]	@ (80010a8 <HAL_RCC_OscConfig+0x4c8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d118      	bne.n	8000edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80010a8 <HAL_RCC_OscConfig+0x4c8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a7e      	ldr	r2, [pc, #504]	@ (80010a8 <HAL_RCC_OscConfig+0x4c8>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fbdb 	bl	8000670 <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ebe:	f7ff fbd7 	bl	8000670 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b64      	cmp	r3, #100	@ 0x64
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e103      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed0:	4b75      	ldr	r3, [pc, #468]	@ (80010a8 <HAL_RCC_OscConfig+0x4c8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f0      	beq.n	8000ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x312>
 8000ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6213      	str	r3, [r2, #32]
 8000ef0:	e02d      	b.n	8000f4e <HAL_RCC_OscConfig+0x36e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x334>
 8000efa:	4b6a      	ldr	r3, [pc, #424]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4a69      	ldr	r2, [pc, #420]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	6213      	str	r3, [r2, #32]
 8000f06:	4b67      	ldr	r3, [pc, #412]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4a66      	ldr	r2, [pc, #408]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	f023 0304 	bic.w	r3, r3, #4
 8000f10:	6213      	str	r3, [r2, #32]
 8000f12:	e01c      	b.n	8000f4e <HAL_RCC_OscConfig+0x36e>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d10c      	bne.n	8000f36 <HAL_RCC_OscConfig+0x356>
 8000f1c:	4b61      	ldr	r3, [pc, #388]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a60      	ldr	r2, [pc, #384]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6213      	str	r3, [r2, #32]
 8000f28:	4b5e      	ldr	r3, [pc, #376]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4a5d      	ldr	r2, [pc, #372]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6213      	str	r3, [r2, #32]
 8000f34:	e00b      	b.n	8000f4e <HAL_RCC_OscConfig+0x36e>
 8000f36:	4b5b      	ldr	r3, [pc, #364]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4a5a      	ldr	r2, [pc, #360]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	6213      	str	r3, [r2, #32]
 8000f42:	4b58      	ldr	r3, [pc, #352]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	4a57      	ldr	r2, [pc, #348]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	f023 0304 	bic.w	r3, r3, #4
 8000f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d015      	beq.n	8000f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fb8b 	bl	8000670 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5c:	e00a      	b.n	8000f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fb87 	bl	8000670 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e0b1      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f74:	4b4b      	ldr	r3, [pc, #300]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0ee      	beq.n	8000f5e <HAL_RCC_OscConfig+0x37e>
 8000f80:	e014      	b.n	8000fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fb75 	bl	8000670 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	e00a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fb71 	bl	8000670 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e09b      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa0:	4b40      	ldr	r3, [pc, #256]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ee      	bne.n	8000f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d105      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 8087 	beq.w	80010d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc8:	4b36      	ldr	r3, [pc, #216]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d061      	beq.n	8001098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d146      	bne.n	800106a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fdc:	4b33      	ldr	r3, [pc, #204]	@ (80010ac <HAL_RCC_OscConfig+0x4cc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fb45 	bl	8000670 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff fb41 	bl	8000670 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e06d      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffc:	4b29      	ldr	r3, [pc, #164]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f0      	bne.n	8000fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001010:	d108      	bne.n	8001024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	4921      	ldr	r1, [pc, #132]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a19      	ldr	r1, [r3, #32]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001034:	430b      	orrs	r3, r1
 8001036:	491b      	ldr	r1, [pc, #108]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_RCC_OscConfig+0x4cc>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fb15 	bl	8000670 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff fb11 	bl	8000670 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e03d      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0x46a>
 8001068:	e035      	b.n	80010d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <HAL_RCC_OscConfig+0x4cc>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fafe 	bl	8000670 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001078:	f7ff fafa 	bl	8000670 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e026      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x498>
 8001096:	e01e      	b.n	80010d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d107      	bne.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e019      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40007000 	.word	0x40007000
 80010ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <HAL_RCC_OscConfig+0x500>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0d0      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f8:	4b6a      	ldr	r3, [pc, #424]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d910      	bls.n	8001128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001106:	4b67      	ldr	r3, [pc, #412]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 0207 	bic.w	r2, r3, #7
 800110e:	4965      	ldr	r1, [pc, #404]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001116:	4b63      	ldr	r3, [pc, #396]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d001      	beq.n	8001128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0b8      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001140:	4b59      	ldr	r3, [pc, #356]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a58      	ldr	r2, [pc, #352]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800114a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001158:	4b53      	ldr	r3, [pc, #332]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a52      	ldr	r2, [pc, #328]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001164:	4b50      	ldr	r3, [pc, #320]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	494d      	ldr	r1, [pc, #308]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d040      	beq.n	8001204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d115      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e07f      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a2:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e073      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b2:	4b3d      	ldr	r3, [pc, #244]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e06b      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c2:	4b39      	ldr	r3, [pc, #228]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f023 0203 	bic.w	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4936      	ldr	r1, [pc, #216]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d4:	f7ff fa4c 	bl	8000670 <HAL_GetTick>
 80011d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011da:	e00a      	b.n	80011f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011dc:	f7ff fa48 	bl	8000670 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e053      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f2:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 020c 	and.w	r2, r3, #12
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	429a      	cmp	r2, r3
 8001202:	d1eb      	bne.n	80011dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001204:	4b27      	ldr	r3, [pc, #156]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d210      	bcs.n	8001234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001212:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 0207 	bic.w	r2, r3, #7
 800121a:	4922      	ldr	r1, [pc, #136]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001222:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d001      	beq.n	8001234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e032      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d008      	beq.n	8001252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4916      	ldr	r1, [pc, #88]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	490e      	ldr	r1, [pc, #56]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001272:	f000 f821 	bl	80012b8 <HAL_RCC_GetSysClockFreq>
 8001276:	4602      	mov	r2, r0
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	490a      	ldr	r1, [pc, #40]	@ (80012ac <HAL_RCC_ClockConfig+0x1c8>)
 8001284:	5ccb      	ldrb	r3, [r1, r3]
 8001286:	fa22 f303 	lsr.w	r3, r2, r3
 800128a:	4a09      	ldr	r2, [pc, #36]	@ (80012b0 <HAL_RCC_ClockConfig+0x1cc>)
 800128c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f8ee 	bl	8000474 <HAL_InitTick>

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40022000 	.word	0x40022000
 80012a8:	40021000 	.word	0x40021000
 80012ac:	080048b4 	.word	0x080048b4
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004

080012b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <HAL_RCC_GetSysClockFreq+0x94>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d002      	beq.n	80012e8 <HAL_RCC_GetSysClockFreq+0x30>
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d003      	beq.n	80012ee <HAL_RCC_GetSysClockFreq+0x36>
 80012e6:	e027      	b.n	8001338 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ea:	613b      	str	r3, [r7, #16]
      break;
 80012ec:	e027      	b.n	800133e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	0c9b      	lsrs	r3, r3, #18
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012f8:	5cd3      	ldrb	r3, [r2, r3]
 80012fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d010      	beq.n	8001328 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_RCC_GetSysClockFreq+0x94>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	0c5b      	lsrs	r3, r3, #17
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	4a11      	ldr	r2, [pc, #68]	@ (8001358 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x98>)
 800131a:	fb03 f202 	mul.w	r2, r3, r2
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	fbb2 f3f3 	udiv	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e004      	b.n	8001332 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <HAL_RCC_GetSysClockFreq+0xa4>)
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	613b      	str	r3, [r7, #16]
      break;
 8001336:	e002      	b.n	800133e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x98>)
 800133a:	613b      	str	r3, [r7, #16]
      break;
 800133c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800133e:	693b      	ldr	r3, [r7, #16]
}
 8001340:	4618      	mov	r0, r3
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	007a1200 	.word	0x007a1200
 8001354:	080048cc 	.word	0x080048cc
 8001358:	080048dc 	.word	0x080048dc
 800135c:	003d0900 	.word	0x003d0900

08001360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001364:	4b02      	ldr	r3, [pc, #8]	@ (8001370 <HAL_RCC_GetHCLKFreq+0x10>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000000 	.word	0x20000000

08001374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001378:	f7ff fff2 	bl	8001360 <HAL_RCC_GetHCLKFreq>
 800137c:	4602      	mov	r2, r0
 800137e:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	4903      	ldr	r1, [pc, #12]	@ (8001398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800138a:	5ccb      	ldrb	r3, [r1, r3]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	080048c4 	.word	0x080048c4

0800139c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	220f      	movs	r2, #15
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_RCC_GetClockConfig+0x58>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_RCC_GetClockConfig+0x58>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <HAL_RCC_GetClockConfig+0x58>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_RCC_GetClockConfig+0x58>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_RCC_GetClockConfig+0x5c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0207 	and.w	r2, r3, #7
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40022000 	.word	0x40022000

080013fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <RCC_Delay+0x34>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <RCC_Delay+0x38>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0a5b      	lsrs	r3, r3, #9
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001418:	bf00      	nop
  }
  while (Delay --);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	60fa      	str	r2, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <RCC_Delay+0x1c>
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000
 8001434:	10624dd3 	.word	0x10624dd3

08001438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e041      	b.n	80014ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f839 	bl	80014d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3304      	adds	r3, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f000 f99c 	bl	80017b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d001      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e03a      	b.n	8001576 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a18      	ldr	r2, [pc, #96]	@ (8001580 <HAL_TIM_Base_Start_IT+0x98>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00e      	beq.n	8001540 <HAL_TIM_Base_Start_IT+0x58>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800152a:	d009      	beq.n	8001540 <HAL_TIM_Base_Start_IT+0x58>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <HAL_TIM_Base_Start_IT+0x9c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d004      	beq.n	8001540 <HAL_TIM_Base_Start_IT+0x58>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a13      	ldr	r2, [pc, #76]	@ (8001588 <HAL_TIM_Base_Start_IT+0xa0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d111      	bne.n	8001564 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b06      	cmp	r3, #6
 8001550:	d010      	beq.n	8001574 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001562:	e007      	b.n	8001574 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40012c00 	.word	0x40012c00
 8001584:	40000400 	.word	0x40000400
 8001588:	40000800 	.word	0x40000800

0800158c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d020      	beq.n	80015f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01b      	beq.n	80015f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0202 	mvn.w	r2, #2
 80015c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8d1 	bl	800177e <HAL_TIM_IC_CaptureCallback>
 80015dc:	e005      	b.n	80015ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f8c4 	bl	800176c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f8d3 	bl	8001790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d020      	beq.n	800163c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01b      	beq.n	800163c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f06f 0204 	mvn.w	r2, #4
 800160c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2202      	movs	r2, #2
 8001612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f8ab 	bl	800177e <HAL_TIM_IC_CaptureCallback>
 8001628:	e005      	b.n	8001636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f89e 	bl	800176c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f8ad 	bl	8001790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d020      	beq.n	8001688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01b      	beq.n	8001688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0208 	mvn.w	r2, #8
 8001658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f885 	bl	800177e <HAL_TIM_IC_CaptureCallback>
 8001674:	e005      	b.n	8001682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f878 	bl	800176c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f887 	bl	8001790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d020      	beq.n	80016d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01b      	beq.n	80016d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 0210 	mvn.w	r2, #16
 80016a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2208      	movs	r2, #8
 80016aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f85f 	bl	800177e <HAL_TIM_IC_CaptureCallback>
 80016c0:	e005      	b.n	80016ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f852 	bl	800176c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f861 	bl	8001790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00c      	beq.n	80016f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0201 	mvn.w	r2, #1
 80016f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe fe6e 	bl	80003d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f8c3 	bl	80018a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00c      	beq.n	8001740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f831 	bl	80017a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00c      	beq.n	8001764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d007      	beq.n	8001764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0220 	mvn.w	r2, #32
 800175c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f896 	bl	8001890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001884 <TIM_Base_SetConfig+0xd0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00b      	beq.n	80017e4 <TIM_Base_SetConfig+0x30>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017d2:	d007      	beq.n	80017e4 <TIM_Base_SetConfig+0x30>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001888 <TIM_Base_SetConfig+0xd4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d003      	beq.n	80017e4 <TIM_Base_SetConfig+0x30>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a2b      	ldr	r2, [pc, #172]	@ (800188c <TIM_Base_SetConfig+0xd8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d108      	bne.n	80017f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a22      	ldr	r2, [pc, #136]	@ (8001884 <TIM_Base_SetConfig+0xd0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00b      	beq.n	8001816 <TIM_Base_SetConfig+0x62>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001804:	d007      	beq.n	8001816 <TIM_Base_SetConfig+0x62>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <TIM_Base_SetConfig+0xd4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d003      	beq.n	8001816 <TIM_Base_SetConfig+0x62>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a1e      	ldr	r2, [pc, #120]	@ (800188c <TIM_Base_SetConfig+0xd8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d108      	bne.n	8001828 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800181c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <TIM_Base_SetConfig+0xd0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d103      	bne.n	800185c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	f023 0201 	bic.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	611a      	str	r2, [r3, #16]
  }
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40012c00 	.word	0x40012c00
 8001888:	40000400 	.word	0x40000400
 800188c:	40000800 	.word	0x40000800

08001890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <__NVIC_SetPriority>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	@ (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	@ (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <SysTick_Handler+0x1c>)
 800190e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001910:	f001 ff22 	bl	8003758 <xTaskGetSchedulerState>
 8001914:	4603      	mov	r3, r0
 8001916:	2b01      	cmp	r3, #1
 8001918:	d001      	beq.n	800191e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800191a:	f002 fcc5 	bl	80042a8 <xPortSysTickHandler>
  }
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800192c:	2100      	movs	r1, #0
 800192e:	f06f 0004 	mvn.w	r0, #4
 8001932:	f7ff ffbf 	bl	80018b4 <__NVIC_SetPriority>
#endif
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001942:	f3ef 8305 	mrs	r3, IPSR
 8001946:	603b      	str	r3, [r7, #0]
  return(result);
 8001948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800194e:	f06f 0305 	mvn.w	r3, #5
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	e00c      	b.n	8001970 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <osKernelInitialize+0x40>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d105      	bne.n	800196a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <osKernelInitialize+0x40>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	e002      	b.n	8001970 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800196e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000090 	.word	0x20000090

08001980 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001986:	f3ef 8305 	mrs	r3, IPSR
 800198a:	603b      	str	r3, [r7, #0]
  return(result);
 800198c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001992:	f06f 0305 	mvn.w	r3, #5
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	e010      	b.n	80019bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <osKernelStart+0x48>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d109      	bne.n	80019b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80019a2:	f7ff ffc1 	bl	8001928 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <osKernelStart+0x48>)
 80019a8:	2202      	movs	r2, #2
 80019aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80019ac:	f001 fa76 	bl	8002e9c <vTaskStartScheduler>
      stat = osOK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	e002      	b.n	80019bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000090 	.word	0x20000090

080019cc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019d2:	f3ef 8305 	mrs	r3, IPSR
 80019d6:	603b      	str	r3, [r7, #0]
  return(result);
 80019d8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80019de:	f001 fb7f 	bl	80030e0 <xTaskGetTickCountFromISR>
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	e002      	b.n	80019ec <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80019e6:	f001 fb6d 	bl	80030c4 <xTaskGetTickCount>
 80019ea:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b08e      	sub	sp, #56	@ 0x38
 80019fa:	af04      	add	r7, sp, #16
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a06:	f3ef 8305 	mrs	r3, IPSR
 8001a0a:	617b      	str	r3, [r7, #20]
  return(result);
 8001a0c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d17e      	bne.n	8001b10 <osThreadNew+0x11a>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d07b      	beq.n	8001b10 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001a1c:	2318      	movs	r3, #24
 8001a1e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a28:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d045      	beq.n	8001abc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <osThreadNew+0x48>
        name = attr->name;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <osThreadNew+0x6e>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	2b38      	cmp	r3, #56	@ 0x38
 8001a56:	d805      	bhi.n	8001a64 <osThreadNew+0x6e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <osThreadNew+0x72>
        return (NULL);
 8001a64:	2300      	movs	r3, #0
 8001a66:	e054      	b.n	8001b12 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <osThreadNew+0xa8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b5b      	cmp	r3, #91	@ 0x5b
 8001a86:	d90a      	bls.n	8001a9e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <osThreadNew+0xa8>
        mem = 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	e010      	b.n	8001ac0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <osThreadNew+0xca>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d108      	bne.n	8001ac0 <osThreadNew+0xca>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <osThreadNew+0xca>
          mem = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e001      	b.n	8001ac0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d110      	bne.n	8001ae8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ace:	9202      	str	r2, [sp, #8]
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	6a3a      	ldr	r2, [r7, #32]
 8001ada:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f001 f801 	bl	8002ae4 <xTaskCreateStatic>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	e013      	b.n	8001b10 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d110      	bne.n	8001b10 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f001 f84f 	bl	8002ba4 <xTaskCreate>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d001      	beq.n	8001b10 <osThreadNew+0x11a>
            hTask = NULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b10:	693b      	ldr	r3, [r7, #16]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3728      	adds	r7, #40	@ 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b22:	f3ef 8305 	mrs	r3, IPSR
 8001b26:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <osDelay+0x1c>
    stat = osErrorISR;
 8001b2e:	f06f 0305 	mvn.w	r3, #5
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e007      	b.n	8001b46 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f001 f975 	bl	8002e30 <vTaskDelay>
    }
  }

  return (stat);
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b60:	f3ef 8305 	mrs	r3, IPSR
 8001b64:	613b      	str	r3, [r7, #16]
  return(result);
 8001b66:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d15f      	bne.n	8001c2c <osMessageQueueNew+0xdc>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d05c      	beq.n	8001c2c <osMessageQueueNew+0xdc>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d059      	beq.n	8001c2c <osMessageQueueNew+0xdc>
    mem = -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b7c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d029      	beq.n	8001bd8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d012      	beq.n	8001bb2 <osMessageQueueNew+0x62>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b4f      	cmp	r3, #79	@ 0x4f
 8001b92:	d90e      	bls.n	8001bb2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00a      	beq.n	8001bb2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d302      	bcc.n	8001bb2 <osMessageQueueNew+0x62>
        mem = 1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	e014      	b.n	8001bdc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d110      	bne.n	8001bdc <osMessageQueueNew+0x8c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d108      	bne.n	8001bdc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d104      	bne.n	8001bdc <osMessageQueueNew+0x8c>
          mem = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	e001      	b.n	8001bdc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10b      	bne.n	8001bfa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2100      	movs	r1, #0
 8001bec:	9100      	str	r1, [sp, #0]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 fa2b 	bl	800204c <xQueueGenericCreateStatic>
 8001bf6:	61f8      	str	r0, [r7, #28]
 8001bf8:	e008      	b.n	8001c0c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8001c00:	2200      	movs	r2, #0
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 fa9e 	bl	8002146 <xQueueGenericCreate>
 8001c0a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00c      	beq.n	8001c2c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <osMessageQueueNew+0xd0>
        name = attr->name;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e001      	b.n	8001c24 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8001c24:	6979      	ldr	r1, [r7, #20]
 8001c26:	69f8      	ldr	r0, [r7, #28]
 8001c28:	f000 ff00 	bl	8002a2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c50:	f3ef 8305 	mrs	r3, IPSR
 8001c54:	617b      	str	r3, [r7, #20]
  return(result);
 8001c56:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d028      	beq.n	8001cae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <osMessageQueuePut+0x36>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <osMessageQueuePut+0x36>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8001c6e:	f06f 0303 	mvn.w	r3, #3
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	e038      	b.n	8001ce8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001c7a:	f107 0210 	add.w	r2, r7, #16
 8001c7e:	2300      	movs	r3, #0
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	69b8      	ldr	r0, [r7, #24]
 8001c84:	f000 fbc0 	bl	8002408 <xQueueGenericSendFromISR>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d003      	beq.n	8001c96 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8001c8e:	f06f 0302 	mvn.w	r3, #2
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	e028      	b.n	8001ce8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d025      	beq.n	8001ce8 <osMessageQueuePut+0xb0>
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <osMessageQueuePut+0xbc>)
 8001c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	f3bf 8f6f 	isb	sy
 8001cac:	e01c      	b.n	8001ce8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <osMessageQueuePut+0x82>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8001cba:	f06f 0303 	mvn.w	r3, #3
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	e012      	b.n	8001ce8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	69b8      	ldr	r0, [r7, #24]
 8001cca:	f000 fa9b 	bl	8002204 <xQueueGenericSend>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d009      	beq.n	8001ce8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8001cda:	f06f 0301 	mvn.w	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	e002      	b.n	8001ce8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8001ce2:	f06f 0302 	mvn.w	r3, #2
 8001ce6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000ed04 	.word	0xe000ed04

08001cf8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d0e:	f3ef 8305 	mrs	r3, IPSR
 8001d12:	617b      	str	r3, [r7, #20]
  return(result);
 8001d14:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d028      	beq.n	8001d6c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <osMessageQueueGet+0x34>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <osMessageQueueGet+0x34>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8001d2c:	f06f 0303 	mvn.w	r3, #3
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e037      	b.n	8001da4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	69b8      	ldr	r0, [r7, #24]
 8001d42:	f000 fce1 	bl	8002708 <xQueueReceiveFromISR>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d003      	beq.n	8001d54 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8001d4c:	f06f 0302 	mvn.w	r3, #2
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e027      	b.n	8001da4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d024      	beq.n	8001da4 <osMessageQueueGet+0xac>
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <osMessageQueueGet+0xb8>)
 8001d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f3bf 8f4f 	dsb	sy
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	e01b      	b.n	8001da4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <osMessageQueueGet+0x80>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d103      	bne.n	8001d80 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8001d78:	f06f 0303 	mvn.w	r3, #3
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e011      	b.n	8001da4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	68b9      	ldr	r1, [r7, #8]
 8001d84:	69b8      	ldr	r0, [r7, #24]
 8001d86:	f000 fbdd 	bl	8002544 <xQueueReceive>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d009      	beq.n	8001da4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8001d96:	f06f 0301 	mvn.w	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	e002      	b.n	8001da4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8001d9e:	f06f 0302 	mvn.w	r3, #2
 8001da2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8001da4:	69fb      	ldr	r3, [r7, #28]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000ed04 	.word	0xe000ed04

08001db4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <vApplicationGetIdleTaskMemory+0x28>)
 8001dc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001dca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2280      	movs	r2, #128	@ 0x80
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000094 	.word	0x20000094
 8001de0:	200000f0 	.word	0x200000f0

08001de4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a07      	ldr	r2, [pc, #28]	@ (8001e10 <vApplicationGetTimerTaskMemory+0x2c>)
 8001df4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <vApplicationGetTimerTaskMemory+0x30>)
 8001dfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e02:	601a      	str	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200002f0 	.word	0x200002f0
 8001e14:	2000034c 	.word	0x2000034c

08001e18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f103 0208 	add.w	r2, r3, #8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f103 0208 	add.w	r2, r3, #8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f103 0208 	add.w	r2, r3, #8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001eca:	d103      	bne.n	8001ed4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	e00c      	b.n	8001eee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e002      	b.n	8001ee2 <vListInsert+0x2e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d2f6      	bcs.n	8001edc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6892      	ldr	r2, [r2, #8]
 8001f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6852      	ldr	r2, [r2, #4]
 8001f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d103      	bne.n	8001f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10b      	bne.n	8001fa4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f90:	f383 8811 	msr	BASEPRI, r3
 8001f94:	f3bf 8f6f 	isb	sy
 8001f98:	f3bf 8f4f 	dsb	sy
 8001f9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001fa4:	f002 f902 	bl	80041ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	441a      	add	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	68f9      	ldr	r1, [r7, #12]
 8001fd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	441a      	add	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	22ff      	movs	r2, #255	@ 0xff
 8001fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	22ff      	movs	r2, #255	@ 0xff
 8001ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d114      	bne.n	8002024 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01a      	beq.n	8002038 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3310      	adds	r3, #16
 8002006:	4618      	mov	r0, r3
 8002008:	f001 f9e6 	bl	80033d8 <xTaskRemoveFromEventList>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d012      	beq.n	8002038 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <xQueueGenericReset+0xd0>)
 8002014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	f3bf 8f6f 	isb	sy
 8002022:	e009      	b.n	8002038 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3310      	adds	r3, #16
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fef5 	bl	8001e18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3324      	adds	r3, #36	@ 0x24
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fef0 	bl	8001e18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002038:	f002 f8e8 	bl	800420c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000ed04 	.word	0xe000ed04

0800204c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08e      	sub	sp, #56	@ 0x38
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800207e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	e7fd      	b.n	8002092 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <xQueueGenericCreateStatic+0x56>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <xQueueGenericCreateStatic+0x5a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <xQueueGenericCreateStatic+0x5c>
 80020a6:	2300      	movs	r3, #0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80020ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	623b      	str	r3, [r7, #32]
}
 80020be:	bf00      	nop
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <xQueueGenericCreateStatic+0x84>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <xQueueGenericCreateStatic+0x88>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <xQueueGenericCreateStatic+0x8a>
 80020d4:	2300      	movs	r3, #0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80020da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	61fb      	str	r3, [r7, #28]
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	e7fd      	b.n	80020ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80020f2:	2350      	movs	r3, #80	@ 0x50
 80020f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b50      	cmp	r3, #80	@ 0x50
 80020fa:	d00b      	beq.n	8002114 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80020fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002100:	f383 8811 	msr	BASEPRI, r3
 8002104:	f3bf 8f6f 	isb	sy
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	61bb      	str	r3, [r7, #24]
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002114:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800211a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002128:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800212c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f840 	bl	80021bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800213c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800213e:	4618      	mov	r0, r3
 8002140:	3730      	adds	r7, #48	@ 0x30
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002146:	b580      	push	{r7, lr}
 8002148:	b08a      	sub	sp, #40	@ 0x28
 800214a:	af02      	add	r7, sp, #8
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	4613      	mov	r3, r2
 8002152:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10b      	bne.n	8002172 <xQueueGenericCreate+0x2c>
	__asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	613b      	str	r3, [r7, #16]
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	e7fd      	b.n	800216e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	3350      	adds	r3, #80	@ 0x50
 8002180:	4618      	mov	r0, r3
 8002182:	f002 f915 	bl	80043b0 <pvPortMalloc>
 8002186:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3350      	adds	r3, #80	@ 0x50
 8002196:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021a0:	79fa      	ldrb	r2, [r7, #7]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f805 	bl	80021bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80021b2:	69bb      	ldr	r3, [r7, #24]
	}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e002      	b.n	80021de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021ea:	2101      	movs	r1, #1
 80021ec:	69b8      	ldr	r0, [r7, #24]
 80021ee:	f7ff fec3 	bl	8001f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08e      	sub	sp, #56	@ 0x38
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800221a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10b      	bne.n	8002238 <xQueueGenericSend+0x34>
	__asm volatile
 8002220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002224:	f383 8811 	msr	BASEPRI, r3
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <xQueueGenericSend+0x42>
 800223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <xQueueGenericSend+0x46>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <xQueueGenericSend+0x48>
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10b      	bne.n	8002268 <xQueueGenericSend+0x64>
	__asm volatile
 8002250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002254:	f383 8811 	msr	BASEPRI, r3
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d103      	bne.n	8002276 <xQueueGenericSend+0x72>
 800226e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <xQueueGenericSend+0x76>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <xQueueGenericSend+0x78>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <xQueueGenericSend+0x94>
	__asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	623b      	str	r3, [r7, #32]
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002298:	f001 fa5e 	bl	8003758 <xTaskGetSchedulerState>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <xQueueGenericSend+0xa4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <xQueueGenericSend+0xa8>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <xQueueGenericSend+0xaa>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10b      	bne.n	80022ca <xQueueGenericSend+0xc6>
	__asm volatile
 80022b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	61fb      	str	r3, [r7, #28]
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	e7fd      	b.n	80022c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022ca:	f001 ff6f 	bl	80041ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d302      	bcc.n	80022e0 <xQueueGenericSend+0xdc>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d129      	bne.n	8002334 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022e6:	f000 fa91 	bl	800280c <prvCopyDataToQueue>
 80022ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f6:	3324      	adds	r3, #36	@ 0x24
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 f86d 	bl	80033d8 <xTaskRemoveFromEventList>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002304:	4b3f      	ldr	r3, [pc, #252]	@ (8002404 <xQueueGenericSend+0x200>)
 8002306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	e00a      	b.n	800232c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800231c:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <xQueueGenericSend+0x200>)
 800231e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800232c:	f001 ff6e 	bl	800420c <vPortExitCritical>
				return pdPASS;
 8002330:	2301      	movs	r3, #1
 8002332:	e063      	b.n	80023fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800233a:	f001 ff67 	bl	800420c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800233e:	2300      	movs	r3, #0
 8002340:	e05c      	b.n	80023fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	2b00      	cmp	r3, #0
 8002346:	d106      	bne.n	8002356 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4618      	mov	r0, r3
 800234e:	f001 f8a7 	bl	80034a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002352:	2301      	movs	r3, #1
 8002354:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002356:	f001 ff59 	bl	800420c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800235a:	f000 fe07 	bl	8002f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800235e:	f001 ff25 	bl	80041ac <vPortEnterCritical>
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002368:	b25b      	sxtb	r3, r3
 800236a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800236e:	d103      	bne.n	8002378 <xQueueGenericSend+0x174>
 8002370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800237e:	b25b      	sxtb	r3, r3
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002384:	d103      	bne.n	800238e <xQueueGenericSend+0x18a>
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800238e:	f001 ff3d 	bl	800420c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002392:	1d3a      	adds	r2, r7, #4
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f001 f896 	bl	80034cc <xTaskCheckForTimeOut>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d124      	bne.n	80023f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023a8:	f000 fb28 	bl	80029fc <prvIsQueueFull>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d018      	beq.n	80023e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	3310      	adds	r3, #16
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 ffba 	bl	8003334 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023c2:	f000 fab3 	bl	800292c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023c6:	f000 fddf 	bl	8002f88 <xTaskResumeAll>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f af7c 	bne.w	80022ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80023d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <xQueueGenericSend+0x200>)
 80023d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	e772      	b.n	80022ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023e6:	f000 faa1 	bl	800292c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023ea:	f000 fdcd 	bl	8002f88 <xTaskResumeAll>
 80023ee:	e76c      	b.n	80022ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023f2:	f000 fa9b 	bl	800292c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023f6:	f000 fdc7 	bl	8002f88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80023fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3738      	adds	r7, #56	@ 0x38
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	e000ed04 	.word	0xe000ed04

08002408 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b090      	sub	sp, #64	@ 0x40
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800241a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10b      	bne.n	8002438 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <xQueueGenericSendFromISR+0x3e>
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <xQueueGenericSendFromISR+0x42>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <xQueueGenericSendFromISR+0x44>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002462:	bf00      	nop
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d103      	bne.n	8002476 <xQueueGenericSendFromISR+0x6e>
 800246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <xQueueGenericSendFromISR+0x72>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <xQueueGenericSendFromISR+0x74>
 800247a:	2300      	movs	r3, #0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	623b      	str	r3, [r7, #32]
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002498:	f001 ff4a 	bl	8004330 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800249c:	f3ef 8211 	mrs	r2, BASEPRI
 80024a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	61fa      	str	r2, [r7, #28]
 80024b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80024b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d302      	bcc.n	80024ca <xQueueGenericSendFromISR+0xc2>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d12f      	bne.n	800252a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80024e0:	f000 f994 	bl	800280c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024ec:	d112      	bne.n	8002514 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f8:	3324      	adds	r3, #36	@ 0x24
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 ff6c 	bl	80033d8 <xTaskRemoveFromEventList>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00e      	beq.n	8002524 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e007      	b.n	8002524 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002514:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002518:	3301      	adds	r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	b25a      	sxtb	r2, r3
 800251e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002524:	2301      	movs	r3, #1
 8002526:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002528:	e001      	b.n	800252e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800252a:	2300      	movs	r3, #0
 800252c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800252e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002530:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002538:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800253a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800253c:	4618      	mov	r0, r3
 800253e:	3740      	adds	r7, #64	@ 0x40
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	@ 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002550:	2300      	movs	r3, #0
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <xQueueReceive+0x32>
	__asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	623b      	str	r3, [r7, #32]
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	e7fd      	b.n	8002572 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d103      	bne.n	8002584 <xQueueReceive+0x40>
 800257c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <xQueueReceive+0x44>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <xQueueReceive+0x46>
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <xQueueReceive+0x62>
	__asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	61fb      	str	r3, [r7, #28]
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	e7fd      	b.n	80025a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025a6:	f001 f8d7 	bl	8003758 <xTaskGetSchedulerState>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <xQueueReceive+0x72>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <xQueueReceive+0x76>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <xQueueReceive+0x78>
 80025ba:	2300      	movs	r3, #0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <xQueueReceive+0x94>
	__asm volatile
 80025c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	61bb      	str	r3, [r7, #24]
}
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025d8:	f001 fde8 	bl	80041ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01f      	beq.n	8002628 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025ec:	f000 f978 	bl	80028e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00f      	beq.n	8002620 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002602:	3310      	adds	r3, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fee7 	bl	80033d8 <xTaskRemoveFromEventList>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002610:	4b3c      	ldr	r3, [pc, #240]	@ (8002704 <xQueueReceive+0x1c0>)
 8002612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002620:	f001 fdf4 	bl	800420c <vPortExitCritical>
				return pdPASS;
 8002624:	2301      	movs	r3, #1
 8002626:	e069      	b.n	80026fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800262e:	f001 fded 	bl	800420c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002632:	2300      	movs	r3, #0
 8002634:	e062      	b.n	80026fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d106      	bne.n	800264a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	4618      	mov	r0, r3
 8002642:	f000 ff2d 	bl	80034a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002646:	2301      	movs	r3, #1
 8002648:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800264a:	f001 fddf 	bl	800420c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800264e:	f000 fc8d 	bl	8002f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002652:	f001 fdab 	bl	80041ac <vPortEnterCritical>
 8002656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002658:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800265c:	b25b      	sxtb	r3, r3
 800265e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002662:	d103      	bne.n	800266c <xQueueReceive+0x128>
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002672:	b25b      	sxtb	r3, r3
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002678:	d103      	bne.n	8002682 <xQueueReceive+0x13e>
 800267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002682:	f001 fdc3 	bl	800420c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002686:	1d3a      	adds	r2, r7, #4
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f000 ff1c 	bl	80034cc <xTaskCheckForTimeOut>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d123      	bne.n	80026e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800269a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800269c:	f000 f998 	bl	80029d0 <prvIsQueueEmpty>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d017      	beq.n	80026d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a8:	3324      	adds	r3, #36	@ 0x24
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fe40 	bl	8003334 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026b6:	f000 f939 	bl	800292c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026ba:	f000 fc65 	bl	8002f88 <xTaskResumeAll>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d189      	bne.n	80025d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80026c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002704 <xQueueReceive+0x1c0>)
 80026c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	e780      	b.n	80025d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80026d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026d8:	f000 f928 	bl	800292c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026dc:	f000 fc54 	bl	8002f88 <xTaskResumeAll>
 80026e0:	e77a      	b.n	80025d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80026e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026e4:	f000 f922 	bl	800292c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026e8:	f000 fc4e 	bl	8002f88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026ee:	f000 f96f 	bl	80029d0 <prvIsQueueEmpty>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f43f af6f 	beq.w	80025d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80026fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3730      	adds	r7, #48	@ 0x30
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	e000ed04 	.word	0xe000ed04

08002708 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08e      	sub	sp, #56	@ 0x38
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	623b      	str	r3, [r7, #32]
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	e7fd      	b.n	8002732 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d103      	bne.n	8002744 <xQueueReceiveFromISR+0x3c>
 800273c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <xQueueReceiveFromISR+0x40>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <xQueueReceiveFromISR+0x42>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10b      	bne.n	8002766 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	61fb      	str	r3, [r7, #28]
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	e7fd      	b.n	8002762 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002766:	f001 fde3 	bl	8004330 <vPortValidateInterruptPriority>
	__asm volatile
 800276a:	f3ef 8211 	mrs	r2, BASEPRI
 800276e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	61ba      	str	r2, [r7, #24]
 8002780:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002782:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800278c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02f      	beq.n	80027f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027a0:	f000 f89e 	bl	80028e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a6:	1e5a      	subs	r2, r3, #1
 80027a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80027ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027b4:	d112      	bne.n	80027dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c0:	3310      	adds	r3, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fe08 	bl	80033d8 <xTaskRemoveFromEventList>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e007      	b.n	80027ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80027dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027e0:	3301      	adds	r3, #1
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	b25a      	sxtb	r2, r3
 80027e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80027ec:	2301      	movs	r3, #1
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80027f0:	e001      	b.n	80027f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f383 8811 	msr	BASEPRI, r3
}
 8002800:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002804:	4618      	mov	r0, r3
 8002806:	3738      	adds	r7, #56	@ 0x38
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10d      	bne.n	8002846 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d14d      	bne.n	80028ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 ffac 	bl	8003794 <xTaskPriorityDisinherit>
 800283c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	e043      	b.n	80028ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d119      	bne.n	8002880 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6858      	ldr	r0, [r3, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	461a      	mov	r2, r3
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	f001 ffc2 	bl	80047e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	441a      	add	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	d32b      	bcc.n	80028ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	e026      	b.n	80028ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68d8      	ldr	r0, [r3, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	461a      	mov	r2, r3
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	f001 ffa8 	bl	80047e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	425b      	negs	r3, r3
 800289a:	441a      	add	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d207      	bcs.n	80028bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	425b      	negs	r3, r3
 80028b6:	441a      	add	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d105      	bne.n	80028ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80028d6:	697b      	ldr	r3, [r7, #20]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d018      	beq.n	8002924 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	441a      	add	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	d303      	bcc.n	8002914 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68d9      	ldr	r1, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	461a      	mov	r2, r3
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	f001 ff5e 	bl	80047e0 <memcpy>
	}
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002934:	f001 fc3a 	bl	80041ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800293e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002940:	e011      	b.n	8002966 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	d012      	beq.n	8002970 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3324      	adds	r3, #36	@ 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fd42 	bl	80033d8 <xTaskRemoveFromEventList>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800295a:	f000 fe1b 	bl	8003594 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3b01      	subs	r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	dce9      	bgt.n	8002942 <prvUnlockQueue+0x16>
 800296e:	e000      	b.n	8002972 <prvUnlockQueue+0x46>
					break;
 8002970:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	22ff      	movs	r2, #255	@ 0xff
 8002976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800297a:	f001 fc47 	bl	800420c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800297e:	f001 fc15 	bl	80041ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002988:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800298a:	e011      	b.n	80029b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d012      	beq.n	80029ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3310      	adds	r3, #16
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fd1d 	bl	80033d8 <xTaskRemoveFromEventList>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80029a4:	f000 fdf6 	bl	8003594 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80029a8:	7bbb      	ldrb	r3, [r7, #14]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	dce9      	bgt.n	800298c <prvUnlockQueue+0x60>
 80029b8:	e000      	b.n	80029bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80029ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	22ff      	movs	r2, #255	@ 0xff
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80029c4:	f001 fc22 	bl	800420c <vPortExitCritical>
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029d8:	f001 fbe8 	bl	80041ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e001      	b.n	80029ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029ee:	f001 fc0d 	bl	800420c <vPortExitCritical>

	return xReturn;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a04:	f001 fbd2 	bl	80041ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d102      	bne.n	8002a1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e001      	b.n	8002a1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a1e:	f001 fbf5 	bl	800420c <vPortExitCritical>

	return xReturn;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e014      	b.n	8002a66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a78 <vQueueAddToRegistry+0x4c>)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a48:	490b      	ldr	r1, [pc, #44]	@ (8002a78 <vQueueAddToRegistry+0x4c>)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002a52:	4a09      	ldr	r2, [pc, #36]	@ (8002a78 <vQueueAddToRegistry+0x4c>)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002a5e:	e006      	b.n	8002a6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b07      	cmp	r3, #7
 8002a6a:	d9e7      	bls.n	8002a3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	2000074c 	.word	0x2000074c

08002a7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002a8c:	f001 fb8e 	bl	80041ac <vPortEnterCritical>
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a9c:	d103      	bne.n	8002aa6 <vQueueWaitForMessageRestricted+0x2a>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ab2:	d103      	bne.n	8002abc <vQueueWaitForMessageRestricted+0x40>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002abc:	f001 fba6 	bl	800420c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d106      	bne.n	8002ad6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3324      	adds	r3, #36	@ 0x24
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fc55 	bl	8003380 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff28 	bl	800292c <prvUnlockQueue>
	}
 8002adc:	bf00      	nop
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08e      	sub	sp, #56	@ 0x38
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	623b      	str	r3, [r7, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	61fb      	str	r3, [r7, #28]
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	e7fd      	b.n	8002b2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b2e:	235c      	movs	r3, #92	@ 0x5c
 8002b30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b5c      	cmp	r3, #92	@ 0x5c
 8002b36:	d00b      	beq.n	8002b50 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	61bb      	str	r3, [r7, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01e      	beq.n	8002b96 <xTaskCreateStatic+0xb2>
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01b      	beq.n	8002b96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b70:	2300      	movs	r3, #0
 8002b72:	9303      	str	r3, [sp, #12]
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	9302      	str	r3, [sp, #8]
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f850 	bl	8002c2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b90:	f000 f8de 	bl	8002d50 <prvAddNewTaskToReadyList>
 8002b94:	e001      	b.n	8002b9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b9a:	697b      	ldr	r3, [r7, #20]
	}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3728      	adds	r7, #40	@ 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	@ 0x30
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 fbf9 	bl	80043b0 <pvPortMalloc>
 8002bbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00e      	beq.n	8002be4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bc6:	205c      	movs	r0, #92	@ 0x5c
 8002bc8:	f001 fbf2 	bl	80043b0 <pvPortMalloc>
 8002bcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bda:	e005      	b.n	8002be8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bdc:	6978      	ldr	r0, [r7, #20]
 8002bde:	f001 fcb5 	bl	800454c <vPortFree>
 8002be2:	e001      	b.n	8002be8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d017      	beq.n	8002c1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bf6:	88fa      	ldrh	r2, [r7, #6]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9303      	str	r3, [sp, #12]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f80e 	bl	8002c2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c12:	69f8      	ldr	r0, [r7, #28]
 8002c14:	f000 f89c 	bl	8002d50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	e002      	b.n	8002c24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c24:	69bb      	ldr	r3, [r7, #24]
	}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b088      	sub	sp, #32
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	461a      	mov	r2, r3
 8002c46:	21a5      	movs	r1, #165	@ 0xa5
 8002c48:	f001 fd9e 	bl	8004788 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c56:	3b01      	subs	r3, #1
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f023 0307 	bic.w	r3, r3, #7
 8002c64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	617b      	str	r3, [r7, #20]
}
 8002c82:	bf00      	nop
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01f      	beq.n	8002cce <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e012      	b.n	8002cba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	7819      	ldrb	r1, [r3, #0]
 8002c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3334      	adds	r3, #52	@ 0x34
 8002ca4:	460a      	mov	r2, r1
 8002ca6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2b0f      	cmp	r3, #15
 8002cbe:	d9e9      	bls.n	8002c94 <prvInitialiseNewTask+0x66>
 8002cc0:	e000      	b.n	8002cc4 <prvInitialiseNewTask+0x96>
			{
				break;
 8002cc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ccc:	e003      	b.n	8002cd6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd8:	2b37      	cmp	r3, #55	@ 0x37
 8002cda:	d901      	bls.n	8002ce0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cdc:	2337      	movs	r3, #55	@ 0x37
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	2200      	movs	r2, #0
 8002cf0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f8ad 	bl	8001e56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	3318      	adds	r3, #24
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f8a8 	bl	8001e56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	2200      	movs	r2, #0
 8002d20:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	69b8      	ldr	r0, [r7, #24]
 8002d30:	f001 f94c 	bl	8003fcc <pxPortInitialiseStack>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d46:	bf00      	nop
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d58:	f001 fa28 	bl	80041ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e14 <prvAddNewTaskToReadyList+0xc4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a2c      	ldr	r2, [pc, #176]	@ (8002e14 <prvAddNewTaskToReadyList+0xc4>)
 8002d64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d66:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <prvAddNewTaskToReadyList+0xc8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e18 <prvAddNewTaskToReadyList+0xc8>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d74:	4b27      	ldr	r3, [pc, #156]	@ (8002e14 <prvAddNewTaskToReadyList+0xc4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d110      	bne.n	8002d9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d7c:	f000 fc2e 	bl	80035dc <prvInitialiseTaskLists>
 8002d80:	e00d      	b.n	8002d9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d82:	4b26      	ldr	r3, [pc, #152]	@ (8002e1c <prvAddNewTaskToReadyList+0xcc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d8a:	4b23      	ldr	r3, [pc, #140]	@ (8002e18 <prvAddNewTaskToReadyList+0xc8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d802      	bhi.n	8002d9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d98:	4a1f      	ldr	r2, [pc, #124]	@ (8002e18 <prvAddNewTaskToReadyList+0xc8>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d9e:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <prvAddNewTaskToReadyList+0xd0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e20 <prvAddNewTaskToReadyList+0xd0>)
 8002da6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002da8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <prvAddNewTaskToReadyList+0xd0>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <prvAddNewTaskToReadyList+0xd4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d903      	bls.n	8002dc4 <prvAddNewTaskToReadyList+0x74>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <prvAddNewTaskToReadyList+0xd4>)
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4a15      	ldr	r2, [pc, #84]	@ (8002e28 <prvAddNewTaskToReadyList+0xd8>)
 8002dd2:	441a      	add	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	f7ff f847 	bl	8001e6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002de0:	f001 fa14 	bl	800420c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002de4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <prvAddNewTaskToReadyList+0xcc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00e      	beq.n	8002e0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <prvAddNewTaskToReadyList+0xc8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d207      	bcs.n	8002e0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <prvAddNewTaskToReadyList+0xdc>)
 8002dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000c60 	.word	0x20000c60
 8002e18:	2000078c 	.word	0x2000078c
 8002e1c:	20000c6c 	.word	0x20000c6c
 8002e20:	20000c7c 	.word	0x20000c7c
 8002e24:	20000c68 	.word	0x20000c68
 8002e28:	20000790 	.word	0x20000790
 8002e2c:	e000ed04 	.word	0xe000ed04

08002e30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d018      	beq.n	8002e74 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e42:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <vTaskDelay+0x64>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <vTaskDelay+0x32>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	60bb      	str	r3, [r7, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	e7fd      	b.n	8002e5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e62:	f000 f883 	bl	8002f6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e66:	2100      	movs	r1, #0
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fd03 	bl	8003874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e6e:	f000 f88b 	bl	8002f88 <xTaskResumeAll>
 8002e72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002e7a:	4b07      	ldr	r3, [pc, #28]	@ (8002e98 <vTaskDelay+0x68>)
 8002e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000c88 	.word	0x20000c88
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	@ 0x28
 8002ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002eaa:	463a      	mov	r2, r7
 8002eac:	1d39      	adds	r1, r7, #4
 8002eae:	f107 0308 	add.w	r3, r7, #8
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe ff7e 	bl	8001db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002eb8:	6839      	ldr	r1, [r7, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	9202      	str	r2, [sp, #8]
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	460a      	mov	r2, r1
 8002eca:	4922      	ldr	r1, [pc, #136]	@ (8002f54 <vTaskStartScheduler+0xb8>)
 8002ecc:	4822      	ldr	r0, [pc, #136]	@ (8002f58 <vTaskStartScheduler+0xbc>)
 8002ece:	f7ff fe09 	bl	8002ae4 <xTaskCreateStatic>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4a21      	ldr	r2, [pc, #132]	@ (8002f5c <vTaskStartScheduler+0xc0>)
 8002ed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ed8:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <vTaskStartScheduler+0xc0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	e001      	b.n	8002eea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d102      	bne.n	8002ef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ef0:	f000 fd14 	bl	800391c <xTimerCreateTimerTask>
 8002ef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d116      	bne.n	8002f2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	613b      	str	r3, [r7, #16]
}
 8002f0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f10:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <vTaskStartScheduler+0xc4>)
 8002f12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f18:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <vTaskStartScheduler+0xc8>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <vTaskStartScheduler+0xcc>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f24:	f001 f8d0 	bl	80040c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f28:	e00f      	b.n	8002f4a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f30:	d10b      	bne.n	8002f4a <vTaskStartScheduler+0xae>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	60fb      	str	r3, [r7, #12]
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	e7fd      	b.n	8002f46 <vTaskStartScheduler+0xaa>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	0800483c 	.word	0x0800483c
 8002f58:	080035ad 	.word	0x080035ad
 8002f5c:	20000c84 	.word	0x20000c84
 8002f60:	20000c80 	.word	0x20000c80
 8002f64:	20000c6c 	.word	0x20000c6c
 8002f68:	20000c64 	.word	0x20000c64

08002f6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <vTaskSuspendAll+0x18>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	4a03      	ldr	r2, [pc, #12]	@ (8002f84 <vTaskSuspendAll+0x18>)
 8002f78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000c88 	.word	0x20000c88

08002f88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f96:	4b42      	ldr	r3, [pc, #264]	@ (80030a0 <xTaskResumeAll+0x118>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	603b      	str	r3, [r7, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	e7fd      	b.n	8002fb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002fb6:	f001 f8f9 	bl	80041ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002fba:	4b39      	ldr	r3, [pc, #228]	@ (80030a0 <xTaskResumeAll+0x118>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	4a37      	ldr	r2, [pc, #220]	@ (80030a0 <xTaskResumeAll+0x118>)
 8002fc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fc4:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <xTaskResumeAll+0x118>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d162      	bne.n	8003092 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fcc:	4b35      	ldr	r3, [pc, #212]	@ (80030a4 <xTaskResumeAll+0x11c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05e      	beq.n	8003092 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fd4:	e02f      	b.n	8003036 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd6:	4b34      	ldr	r3, [pc, #208]	@ (80030a8 <xTaskResumeAll+0x120>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3318      	adds	r3, #24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe ff9e 	bl	8001f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3304      	adds	r3, #4
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe ff99 	bl	8001f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80030ac <xTaskResumeAll+0x124>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d903      	bls.n	8003006 <xTaskResumeAll+0x7e>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003002:	4a2a      	ldr	r2, [pc, #168]	@ (80030ac <xTaskResumeAll+0x124>)
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4a27      	ldr	r2, [pc, #156]	@ (80030b0 <xTaskResumeAll+0x128>)
 8003014:	441a      	add	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3304      	adds	r3, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4610      	mov	r0, r2
 800301e:	f7fe ff26 	bl	8001e6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003026:	4b23      	ldr	r3, [pc, #140]	@ (80030b4 <xTaskResumeAll+0x12c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003030:	4b21      	ldr	r3, [pc, #132]	@ (80030b8 <xTaskResumeAll+0x130>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003036:	4b1c      	ldr	r3, [pc, #112]	@ (80030a8 <xTaskResumeAll+0x120>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1cb      	bne.n	8002fd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003044:	f000 fb68 	bl	8003718 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003048:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <xTaskResumeAll+0x134>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d010      	beq.n	8003076 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003054:	f000 f856 	bl	8003104 <xTaskIncrementTick>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800305e:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <xTaskResumeAll+0x130>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f1      	bne.n	8003054 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003070:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <xTaskResumeAll+0x134>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <xTaskResumeAll+0x130>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800307e:	2301      	movs	r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003082:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <xTaskResumeAll+0x138>)
 8003084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003092:	f001 f8bb 	bl	800420c <vPortExitCritical>

	return xAlreadyYielded;
 8003096:	68bb      	ldr	r3, [r7, #8]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000c88 	.word	0x20000c88
 80030a4:	20000c60 	.word	0x20000c60
 80030a8:	20000c20 	.word	0x20000c20
 80030ac:	20000c68 	.word	0x20000c68
 80030b0:	20000790 	.word	0x20000790
 80030b4:	2000078c 	.word	0x2000078c
 80030b8:	20000c74 	.word	0x20000c74
 80030bc:	20000c70 	.word	0x20000c70
 80030c0:	e000ed04 	.word	0xe000ed04

080030c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80030ca:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <xTaskGetTickCount+0x18>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80030d0:	687b      	ldr	r3, [r7, #4]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	20000c64 	.word	0x20000c64

080030e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030e6:	f001 f923 	bl	8004330 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80030ee:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <xTaskGetTickCountFromISR+0x20>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030f4:	683b      	ldr	r3, [r7, #0]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000c64 	.word	0x20000c64

08003104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800310e:	4b4f      	ldr	r3, [pc, #316]	@ (800324c <xTaskIncrementTick+0x148>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 8090 	bne.w	8003238 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003118:	4b4d      	ldr	r3, [pc, #308]	@ (8003250 <xTaskIncrementTick+0x14c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003120:	4a4b      	ldr	r2, [pc, #300]	@ (8003250 <xTaskIncrementTick+0x14c>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d121      	bne.n	8003170 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800312c:	4b49      	ldr	r3, [pc, #292]	@ (8003254 <xTaskIncrementTick+0x150>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	603b      	str	r3, [r7, #0]
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <xTaskIncrementTick+0x46>
 800314e:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <xTaskIncrementTick+0x150>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	4b40      	ldr	r3, [pc, #256]	@ (8003258 <xTaskIncrementTick+0x154>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3e      	ldr	r2, [pc, #248]	@ (8003254 <xTaskIncrementTick+0x150>)
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4a3e      	ldr	r2, [pc, #248]	@ (8003258 <xTaskIncrementTick+0x154>)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b3e      	ldr	r3, [pc, #248]	@ (800325c <xTaskIncrementTick+0x158>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3301      	adds	r3, #1
 8003168:	4a3c      	ldr	r2, [pc, #240]	@ (800325c <xTaskIncrementTick+0x158>)
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	f000 fad4 	bl	8003718 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003170:	4b3b      	ldr	r3, [pc, #236]	@ (8003260 <xTaskIncrementTick+0x15c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	429a      	cmp	r2, r3
 8003178:	d349      	bcc.n	800320e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <xTaskIncrementTick+0x150>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003184:	4b36      	ldr	r3, [pc, #216]	@ (8003260 <xTaskIncrementTick+0x15c>)
 8003186:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800318a:	601a      	str	r2, [r3, #0]
					break;
 800318c:	e03f      	b.n	800320e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800318e:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <xTaskIncrementTick+0x150>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d203      	bcs.n	80031ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003260 <xTaskIncrementTick+0x15c>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80031ac:	e02f      	b.n	800320e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3304      	adds	r3, #4
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe feb6 	bl	8001f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	3318      	adds	r3, #24
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fead 	bl	8001f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ce:	4b25      	ldr	r3, [pc, #148]	@ (8003264 <xTaskIncrementTick+0x160>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d903      	bls.n	80031de <xTaskIncrementTick+0xda>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	4a22      	ldr	r2, [pc, #136]	@ (8003264 <xTaskIncrementTick+0x160>)
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003268 <xTaskIncrementTick+0x164>)
 80031ec:	441a      	add	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7fe fe3a 	bl	8001e6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fe:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <xTaskIncrementTick+0x168>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	429a      	cmp	r2, r3
 8003206:	d3b8      	bcc.n	800317a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003208:	2301      	movs	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320c:	e7b5      	b.n	800317a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800320e:	4b17      	ldr	r3, [pc, #92]	@ (800326c <xTaskIncrementTick+0x168>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003214:	4914      	ldr	r1, [pc, #80]	@ (8003268 <xTaskIncrementTick+0x164>)
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d901      	bls.n	800322a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003226:	2301      	movs	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800322a:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <xTaskIncrementTick+0x16c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003232:	2301      	movs	r3, #1
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e004      	b.n	8003242 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003238:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <xTaskIncrementTick+0x170>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a0d      	ldr	r2, [pc, #52]	@ (8003274 <xTaskIncrementTick+0x170>)
 8003240:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003242:	697b      	ldr	r3, [r7, #20]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000c88 	.word	0x20000c88
 8003250:	20000c64 	.word	0x20000c64
 8003254:	20000c18 	.word	0x20000c18
 8003258:	20000c1c 	.word	0x20000c1c
 800325c:	20000c78 	.word	0x20000c78
 8003260:	20000c80 	.word	0x20000c80
 8003264:	20000c68 	.word	0x20000c68
 8003268:	20000790 	.word	0x20000790
 800326c:	2000078c 	.word	0x2000078c
 8003270:	20000c74 	.word	0x20000c74
 8003274:	20000c70 	.word	0x20000c70

08003278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800327e:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <vTaskSwitchContext+0xa8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003286:	4b27      	ldr	r3, [pc, #156]	@ (8003324 <vTaskSwitchContext+0xac>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800328c:	e042      	b.n	8003314 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800328e:	4b25      	ldr	r3, [pc, #148]	@ (8003324 <vTaskSwitchContext+0xac>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003294:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <vTaskSwitchContext+0xb0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e011      	b.n	80032c0 <vTaskSwitchContext+0x48>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <vTaskSwitchContext+0x42>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	607b      	str	r3, [r7, #4]
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	e7fd      	b.n	80032b6 <vTaskSwitchContext+0x3e>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3b01      	subs	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	491a      	ldr	r1, [pc, #104]	@ (800332c <vTaskSwitchContext+0xb4>)
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0e3      	beq.n	800329c <vTaskSwitchContext+0x24>
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4a13      	ldr	r2, [pc, #76]	@ (800332c <vTaskSwitchContext+0xb4>)
 80032e0:	4413      	add	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3308      	adds	r3, #8
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d104      	bne.n	8003304 <vTaskSwitchContext+0x8c>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <vTaskSwitchContext+0xb8>)
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4a06      	ldr	r2, [pc, #24]	@ (8003328 <vTaskSwitchContext+0xb0>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000c88 	.word	0x20000c88
 8003324:	20000c74 	.word	0x20000c74
 8003328:	20000c68 	.word	0x20000c68
 800332c:	20000790 	.word	0x20000790
 8003330:	2000078c 	.word	0x2000078c

08003334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	60fb      	str	r3, [r7, #12]
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800335c:	4b07      	ldr	r3, [pc, #28]	@ (800337c <vTaskPlaceOnEventList+0x48>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3318      	adds	r3, #24
 8003362:	4619      	mov	r1, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fe fda5 	bl	8001eb4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800336a:	2101      	movs	r1, #1
 800336c:	6838      	ldr	r0, [r7, #0]
 800336e:	f000 fa81 	bl	8003874 <prvAddCurrentTaskToDelayedList>
}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	2000078c 	.word	0x2000078c

08003380 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10b      	bne.n	80033aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	617b      	str	r3, [r7, #20]
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	e7fd      	b.n	80033a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033aa:	4b0a      	ldr	r3, [pc, #40]	@ (80033d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3318      	adds	r3, #24
 80033b0:	4619      	mov	r1, r3
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7fe fd5b 	bl	8001e6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80033be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	68b8      	ldr	r0, [r7, #8]
 80033c8:	f000 fa54 	bl	8003874 <prvAddCurrentTaskToDelayedList>
	}
 80033cc:	bf00      	nop
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	2000078c 	.word	0x2000078c

080033d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	60fb      	str	r3, [r7, #12]
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	e7fd      	b.n	8003402 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	3318      	adds	r3, #24
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fd8a 	bl	8001f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003410:	4b1d      	ldr	r3, [pc, #116]	@ (8003488 <xTaskRemoveFromEventList+0xb0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d11d      	bne.n	8003454 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3304      	adds	r3, #4
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fd81 	bl	8001f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003426:	4b19      	ldr	r3, [pc, #100]	@ (800348c <xTaskRemoveFromEventList+0xb4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d903      	bls.n	8003436 <xTaskRemoveFromEventList+0x5e>
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	4a16      	ldr	r2, [pc, #88]	@ (800348c <xTaskRemoveFromEventList+0xb4>)
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <xTaskRemoveFromEventList+0xb8>)
 8003444:	441a      	add	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3304      	adds	r3, #4
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f7fe fd0e 	bl	8001e6e <vListInsertEnd>
 8003452:	e005      	b.n	8003460 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	3318      	adds	r3, #24
 8003458:	4619      	mov	r1, r3
 800345a:	480e      	ldr	r0, [pc, #56]	@ (8003494 <xTaskRemoveFromEventList+0xbc>)
 800345c:	f7fe fd07 	bl	8001e6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <xTaskRemoveFromEventList+0xc0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346a:	429a      	cmp	r2, r3
 800346c:	d905      	bls.n	800347a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800346e:	2301      	movs	r3, #1
 8003470:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003472:	4b0a      	ldr	r3, [pc, #40]	@ (800349c <xTaskRemoveFromEventList+0xc4>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e001      	b.n	800347e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800347e:	697b      	ldr	r3, [r7, #20]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000c88 	.word	0x20000c88
 800348c:	20000c68 	.word	0x20000c68
 8003490:	20000790 	.word	0x20000790
 8003494:	20000c20 	.word	0x20000c20
 8003498:	2000078c 	.word	0x2000078c
 800349c:	20000c74 	.word	0x20000c74

080034a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <vTaskInternalSetTimeOutState+0x24>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034b0:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <vTaskInternalSetTimeOutState+0x28>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000c78 	.word	0x20000c78
 80034c8:	20000c64 	.word	0x20000c64

080034cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	613b      	str	r3, [r7, #16]
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10b      	bne.n	8003512 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	60fb      	str	r3, [r7, #12]
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	e7fd      	b.n	800350e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003512:	f000 fe4b 	bl	80041ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <xTaskCheckForTimeOut+0xc0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800352e:	d102      	bne.n	8003536 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	e023      	b.n	800357e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <xTaskCheckForTimeOut+0xc4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d007      	beq.n	8003552 <xTaskCheckForTimeOut+0x86>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	429a      	cmp	r2, r3
 800354a:	d302      	bcc.n	8003552 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800354c:	2301      	movs	r3, #1
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	e015      	b.n	800357e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	429a      	cmp	r2, r3
 800355a:	d20b      	bcs.n	8003574 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff99 	bl	80034a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	e004      	b.n	800357e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800357a:	2301      	movs	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800357e:	f000 fe45 	bl	800420c <vPortExitCritical>

	return xReturn;
 8003582:	69fb      	ldr	r3, [r7, #28]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3720      	adds	r7, #32
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000c64 	.word	0x20000c64
 8003590:	20000c78 	.word	0x20000c78

08003594 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <vTaskMissedYield+0x14>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000c74 	.word	0x20000c74

080035ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035b4:	f000 f852 	bl	800365c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <prvIdleTask+0x28>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d9f9      	bls.n	80035b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <prvIdleTask+0x2c>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035d0:	e7f0      	b.n	80035b4 <prvIdleTask+0x8>
 80035d2:	bf00      	nop
 80035d4:	20000790 	.word	0x20000790
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	e00c      	b.n	8003602 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4a12      	ldr	r2, [pc, #72]	@ (800363c <prvInitialiseTaskLists+0x60>)
 80035f4:	4413      	add	r3, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fc0e 	bl	8001e18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3301      	adds	r3, #1
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b37      	cmp	r3, #55	@ 0x37
 8003606:	d9ef      	bls.n	80035e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003608:	480d      	ldr	r0, [pc, #52]	@ (8003640 <prvInitialiseTaskLists+0x64>)
 800360a:	f7fe fc05 	bl	8001e18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800360e:	480d      	ldr	r0, [pc, #52]	@ (8003644 <prvInitialiseTaskLists+0x68>)
 8003610:	f7fe fc02 	bl	8001e18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003614:	480c      	ldr	r0, [pc, #48]	@ (8003648 <prvInitialiseTaskLists+0x6c>)
 8003616:	f7fe fbff 	bl	8001e18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800361a:	480c      	ldr	r0, [pc, #48]	@ (800364c <prvInitialiseTaskLists+0x70>)
 800361c:	f7fe fbfc 	bl	8001e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003620:	480b      	ldr	r0, [pc, #44]	@ (8003650 <prvInitialiseTaskLists+0x74>)
 8003622:	f7fe fbf9 	bl	8001e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003626:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <prvInitialiseTaskLists+0x78>)
 8003628:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <prvInitialiseTaskLists+0x64>)
 800362a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800362c:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <prvInitialiseTaskLists+0x7c>)
 800362e:	4a05      	ldr	r2, [pc, #20]	@ (8003644 <prvInitialiseTaskLists+0x68>)
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000790 	.word	0x20000790
 8003640:	20000bf0 	.word	0x20000bf0
 8003644:	20000c04 	.word	0x20000c04
 8003648:	20000c20 	.word	0x20000c20
 800364c:	20000c34 	.word	0x20000c34
 8003650:	20000c4c 	.word	0x20000c4c
 8003654:	20000c18 	.word	0x20000c18
 8003658:	20000c1c 	.word	0x20000c1c

0800365c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003662:	e019      	b.n	8003698 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003664:	f000 fda2 	bl	80041ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003668:	4b10      	ldr	r3, [pc, #64]	@ (80036ac <prvCheckTasksWaitingTermination+0x50>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fc55 	bl	8001f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800367a:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <prvCheckTasksWaitingTermination+0x54>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3b01      	subs	r3, #1
 8003680:	4a0b      	ldr	r2, [pc, #44]	@ (80036b0 <prvCheckTasksWaitingTermination+0x54>)
 8003682:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <prvCheckTasksWaitingTermination+0x58>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3b01      	subs	r3, #1
 800368a:	4a0a      	ldr	r2, [pc, #40]	@ (80036b4 <prvCheckTasksWaitingTermination+0x58>)
 800368c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800368e:	f000 fdbd 	bl	800420c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f810 	bl	80036b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003698:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <prvCheckTasksWaitingTermination+0x58>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e1      	bne.n	8003664 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000c34 	.word	0x20000c34
 80036b0:	20000c60 	.word	0x20000c60
 80036b4:	20000c48 	.word	0x20000c48

080036b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d108      	bne.n	80036dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 ff3c 	bl	800454c <vPortFree>
				vPortFree( pxTCB );
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 ff39 	bl	800454c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036da:	e019      	b.n	8003710 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d103      	bne.n	80036ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 ff30 	bl	800454c <vPortFree>
	}
 80036ec:	e010      	b.n	8003710 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d00b      	beq.n	8003710 <prvDeleteTCB+0x58>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	60fb      	str	r3, [r7, #12]
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <prvDeleteTCB+0x54>
	}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800371e:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <prvResetNextTaskUnblockTime+0x38>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003728:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <prvResetNextTaskUnblockTime+0x3c>)
 800372a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800372e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003730:	e008      	b.n	8003744 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003732:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <prvResetNextTaskUnblockTime+0x38>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <prvResetNextTaskUnblockTime+0x3c>)
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000c18 	.word	0x20000c18
 8003754:	20000c80 	.word	0x20000c80

08003758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800375e:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <xTaskGetSchedulerState+0x34>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003766:	2301      	movs	r3, #1
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	e008      	b.n	800377e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376c:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <xTaskGetSchedulerState+0x38>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003774:	2302      	movs	r3, #2
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	e001      	b.n	800377e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800377e:	687b      	ldr	r3, [r7, #4]
	}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000c6c 	.word	0x20000c6c
 8003790:	20000c88 	.word	0x20000c88

08003794 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d058      	beq.n	800385c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003868 <xTaskPriorityDisinherit+0xd4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d00b      	beq.n	80037cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60fb      	str	r3, [r7, #12]
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	60bb      	str	r3, [r7, #8]
}
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fe:	429a      	cmp	r2, r3
 8003800:	d02c      	beq.n	800385c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003806:	2b00      	cmp	r3, #0
 8003808:	d128      	bne.n	800385c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	3304      	adds	r3, #4
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fb88 	bl	8001f24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382c:	4b0f      	ldr	r3, [pc, #60]	@ (800386c <xTaskPriorityDisinherit+0xd8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d903      	bls.n	800383c <xTaskPriorityDisinherit+0xa8>
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	4a0c      	ldr	r2, [pc, #48]	@ (800386c <xTaskPriorityDisinherit+0xd8>)
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4a09      	ldr	r2, [pc, #36]	@ (8003870 <xTaskPriorityDisinherit+0xdc>)
 800384a:	441a      	add	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f7fe fb0b 	bl	8001e6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800385c:	697b      	ldr	r3, [r7, #20]
	}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	2000078c 	.word	0x2000078c
 800386c:	20000c68 	.word	0x20000c68
 8003870:	20000790 	.word	0x20000790

08003874 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800387e:	4b21      	ldr	r3, [pc, #132]	@ (8003904 <prvAddCurrentTaskToDelayedList+0x90>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003884:	4b20      	ldr	r3, [pc, #128]	@ (8003908 <prvAddCurrentTaskToDelayedList+0x94>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3304      	adds	r3, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fb4a 	bl	8001f24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003896:	d10a      	bne.n	80038ae <prvAddCurrentTaskToDelayedList+0x3a>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800389e:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <prvAddCurrentTaskToDelayedList+0x94>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4619      	mov	r1, r3
 80038a6:	4819      	ldr	r0, [pc, #100]	@ (800390c <prvAddCurrentTaskToDelayedList+0x98>)
 80038a8:	f7fe fae1 	bl	8001e6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038ac:	e026      	b.n	80038fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038b6:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <prvAddCurrentTaskToDelayedList+0x94>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d209      	bcs.n	80038da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c6:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <prvAddCurrentTaskToDelayedList+0x9c>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003908 <prvAddCurrentTaskToDelayedList+0x94>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f7fe faee 	bl	8001eb4 <vListInsert>
}
 80038d8:	e010      	b.n	80038fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038da:	4b0e      	ldr	r3, [pc, #56]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xa0>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b0a      	ldr	r3, [pc, #40]	@ (8003908 <prvAddCurrentTaskToDelayedList+0x94>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f7fe fae4 	bl	8001eb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <prvAddCurrentTaskToDelayedList+0xa4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d202      	bcs.n	80038fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80038f6:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <prvAddCurrentTaskToDelayedList+0xa4>)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000c64 	.word	0x20000c64
 8003908:	2000078c 	.word	0x2000078c
 800390c:	20000c4c 	.word	0x20000c4c
 8003910:	20000c1c 	.word	0x20000c1c
 8003914:	20000c18 	.word	0x20000c18
 8003918:	20000c80 	.word	0x20000c80

0800391c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	@ 0x28
 8003920:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003926:	f000 fb11 	bl	8003f4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800392a:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <xTimerCreateTimerTask+0x84>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d021      	beq.n	8003976 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800393a:	1d3a      	adds	r2, r7, #4
 800393c:	f107 0108 	add.w	r1, r7, #8
 8003940:	f107 030c 	add.w	r3, r7, #12
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe fa4d 	bl	8001de4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	9202      	str	r2, [sp, #8]
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	2302      	movs	r3, #2
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2300      	movs	r3, #0
 800395a:	460a      	mov	r2, r1
 800395c:	4911      	ldr	r1, [pc, #68]	@ (80039a4 <xTimerCreateTimerTask+0x88>)
 800395e:	4812      	ldr	r0, [pc, #72]	@ (80039a8 <xTimerCreateTimerTask+0x8c>)
 8003960:	f7ff f8c0 	bl	8002ae4 <xTaskCreateStatic>
 8003964:	4603      	mov	r3, r0
 8003966:	4a11      	ldr	r2, [pc, #68]	@ (80039ac <xTimerCreateTimerTask+0x90>)
 8003968:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800396a:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <xTimerCreateTimerTask+0x90>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003972:	2301      	movs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	613b      	str	r3, [r7, #16]
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	e7fd      	b.n	8003990 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003994:	697b      	ldr	r3, [r7, #20]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000cbc 	.word	0x20000cbc
 80039a4:	08004844 	.word	0x08004844
 80039a8:	08003ae9 	.word	0x08003ae9
 80039ac:	20000cc0 	.word	0x20000cc0

080039b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	623b      	str	r3, [r7, #32]
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	e7fd      	b.n	80039dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039e0:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <xTimerGenericCommand+0x98>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02a      	beq.n	8003a3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	dc18      	bgt.n	8003a2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039fa:	f7ff fead 	bl	8003758 <xTaskGetSchedulerState>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d109      	bne.n	8003a18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a04:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <xTimerGenericCommand+0x98>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	f107 0110 	add.w	r1, r7, #16
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a10:	f7fe fbf8 	bl	8002204 <xQueueGenericSend>
 8003a14:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a16:	e012      	b.n	8003a3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a18:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <xTimerGenericCommand+0x98>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	f107 0110 	add.w	r1, r7, #16
 8003a20:	2300      	movs	r3, #0
 8003a22:	2200      	movs	r2, #0
 8003a24:	f7fe fbee 	bl	8002204 <xQueueGenericSend>
 8003a28:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a2a:	e008      	b.n	8003a3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <xTimerGenericCommand+0x98>)
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	f107 0110 	add.w	r1, r7, #16
 8003a34:	2300      	movs	r3, #0
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	f7fe fce6 	bl	8002408 <xQueueGenericSendFromISR>
 8003a3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3728      	adds	r7, #40	@ 0x28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000cbc 	.word	0x20000cbc

08003a4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a56:	4b23      	ldr	r3, [pc, #140]	@ (8003ae4 <prvProcessExpiredTimer+0x98>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe fa5d 	bl	8001f24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d023      	beq.n	8003ac0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	18d1      	adds	r1, r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	6978      	ldr	r0, [r7, #20]
 8003a86:	f000 f8d3 	bl	8003c30 <prvInsertTimerInActiveList>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a90:	2300      	movs	r3, #0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff ff88 	bl	80039b0 <xTimerGenericCommand>
 8003aa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d114      	bne.n	8003ad2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60fb      	str	r3, [r7, #12]
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	4798      	blx	r3
}
 8003ada:	bf00      	nop
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000cb4 	.word	0x20000cb4

08003ae8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f859 	bl	8003bac <prvGetNextExpireTime>
 8003afa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4619      	mov	r1, r3
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f805 	bl	8003b10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b06:	f000 f8d5 	bl	8003cb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b0a:	bf00      	nop
 8003b0c:	e7f0      	b.n	8003af0 <prvTimerTask+0x8>
	...

08003b10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b1a:	f7ff fa27 	bl	8002f6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b1e:	f107 0308 	add.w	r3, r7, #8
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f864 	bl	8003bf0 <prvSampleTimeNow>
 8003b28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d130      	bne.n	8003b92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <prvProcessTimerOrBlockTask+0x3c>
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d806      	bhi.n	8003b4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b3e:	f7ff fa23 	bl	8002f88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff81 	bl	8003a4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b4a:	e024      	b.n	8003b96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b52:	4b13      	ldr	r3, [pc, #76]	@ (8003ba0 <prvProcessTimerOrBlockTask+0x90>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <prvProcessTimerOrBlockTask+0x50>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <prvProcessTimerOrBlockTask+0x52>
 8003b60:	2300      	movs	r3, #0
 8003b62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba4 <prvProcessTimerOrBlockTask+0x94>)
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f7fe ff83 	bl	8002a7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b76:	f7ff fa07 	bl	8002f88 <xTaskResumeAll>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <prvProcessTimerOrBlockTask+0x98>)
 8003b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
}
 8003b90:	e001      	b.n	8003b96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b92:	f7ff f9f9 	bl	8002f88 <xTaskResumeAll>
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000cb8 	.word	0x20000cb8
 8003ba4:	20000cbc 	.word	0x20000cbc
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <prvGetNextExpireTime+0x40>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <prvGetNextExpireTime+0x16>
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	e000      	b.n	8003bc4 <prvGetNextExpireTime+0x18>
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bd0:	4b06      	ldr	r3, [pc, #24]	@ (8003bec <prvGetNextExpireTime+0x40>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e001      	b.n	8003be0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003be0:	68fb      	ldr	r3, [r7, #12]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	20000cb4 	.word	0x20000cb4

08003bf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003bf8:	f7ff fa64 	bl	80030c4 <xTaskGetTickCount>
 8003bfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <prvSampleTimeNow+0x3c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d205      	bcs.n	8003c14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c08:	f000 f93a 	bl	8003e80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e002      	b.n	8003c1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c1a:	4a04      	ldr	r2, [pc, #16]	@ (8003c2c <prvSampleTimeNow+0x3c>)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c20:	68fb      	ldr	r3, [r7, #12]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000cc4 	.word	0x20000cc4

08003c30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d812      	bhi.n	8003c7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c64:	2301      	movs	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e01b      	b.n	8003ca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c6a:	4b10      	ldr	r3, [pc, #64]	@ (8003cac <prvInsertTimerInActiveList+0x7c>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7fe f91d 	bl	8001eb4 <vListInsert>
 8003c7a:	e012      	b.n	8003ca2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d206      	bcs.n	8003c92 <prvInsertTimerInActiveList+0x62>
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d302      	bcc.n	8003c92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e007      	b.n	8003ca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c92:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <prvInsertTimerInActiveList+0x80>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f7fe f909 	bl	8001eb4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003ca2:	697b      	ldr	r3, [r7, #20]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000cb8 	.word	0x20000cb8
 8003cb0:	20000cb4 	.word	0x20000cb4

08003cb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08e      	sub	sp, #56	@ 0x38
 8003cb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cba:	e0ce      	b.n	8003e5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da19      	bge.n	8003cf6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	61fb      	str	r3, [r7, #28]
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	e7fd      	b.n	8003ce2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cec:	6850      	ldr	r0, [r2, #4]
 8003cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf0:	6892      	ldr	r2, [r2, #8]
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f2c0 80ae 	blt.w	8003e5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe f908 	bl	8001f24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d14:	463b      	mov	r3, r7
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ff6a 	bl	8003bf0 <prvSampleTimeNow>
 8003d1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	f200 8097 	bhi.w	8003e54 <prvProcessReceivedCommands+0x1a0>
 8003d26:	a201      	add	r2, pc, #4	@ (adr r2, 8003d2c <prvProcessReceivedCommands+0x78>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08003d55 	.word	0x08003d55
 8003d38:	08003dcb 	.word	0x08003dcb
 8003d3c:	08003ddf 	.word	0x08003ddf
 8003d40:	08003e2b 	.word	0x08003e2b
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d55 	.word	0x08003d55
 8003d4c:	08003dcb 	.word	0x08003dcb
 8003d50:	08003ddf 	.word	0x08003ddf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	18d1      	adds	r1, r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d74:	f7ff ff5c 	bl	8003c30 <prvInsertTimerInActiveList>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d06c      	beq.n	8003e58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d061      	beq.n	8003e58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	441a      	add	r2, r3
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	2100      	movs	r1, #0
 8003da4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003da6:	f7ff fe03 	bl	80039b0 <xTimerGenericCommand>
 8003daa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d152      	bne.n	8003e58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61bb      	str	r3, [r7, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003ddc:	e03d      	b.n	8003e5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	617b      	str	r3, [r7, #20]
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	e7fd      	b.n	8003e12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	18d1      	adds	r1, r2, r3
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e24:	f7ff ff04 	bl	8003c30 <prvInsertTimerInActiveList>
					break;
 8003e28:	e017      	b.n	8003e5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003e38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e3a:	f000 fb87 	bl	800454c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e3e:	e00c      	b.n	8003e5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003e52:	e002      	b.n	8003e5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <prvProcessReceivedCommands+0x1a6>
					break;
 8003e58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e5a:	4b08      	ldr	r3, [pc, #32]	@ (8003e7c <prvProcessReceivedCommands+0x1c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	1d39      	adds	r1, r7, #4
 8003e60:	2200      	movs	r2, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe fb6e 	bl	8002544 <xQueueReceive>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f47f af26 	bne.w	8003cbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	3730      	adds	r7, #48	@ 0x30
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000cbc 	.word	0x20000cbc

08003e80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e86:	e049      	b.n	8003f1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e88:	4b2e      	ldr	r3, [pc, #184]	@ (8003f44 <prvSwitchTimerLists+0xc4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e92:	4b2c      	ldr	r3, [pc, #176]	@ (8003f44 <prvSwitchTimerLists+0xc4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe f83f 	bl	8001f24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d02f      	beq.n	8003f1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d90e      	bls.n	8003eec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eda:	4b1a      	ldr	r3, [pc, #104]	@ (8003f44 <prvSwitchTimerLists+0xc4>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f7fd ffe5 	bl	8001eb4 <vListInsert>
 8003eea:	e017      	b.n	8003f1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eec:	2300      	movs	r3, #0
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff fd5a 	bl	80039b0 <xTimerGenericCommand>
 8003efc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	603b      	str	r3, [r7, #0]
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f1c:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <prvSwitchTimerLists+0xc4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1b0      	bne.n	8003e88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f26:	4b07      	ldr	r3, [pc, #28]	@ (8003f44 <prvSwitchTimerLists+0xc4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <prvSwitchTimerLists+0xc8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a04      	ldr	r2, [pc, #16]	@ (8003f44 <prvSwitchTimerLists+0xc4>)
 8003f32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f34:	4a04      	ldr	r2, [pc, #16]	@ (8003f48 <prvSwitchTimerLists+0xc8>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6013      	str	r3, [r2, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000cb4 	.word	0x20000cb4
 8003f48:	20000cb8 	.word	0x20000cb8

08003f4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f52:	f000 f92b 	bl	80041ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f56:	4b15      	ldr	r3, [pc, #84]	@ (8003fac <prvCheckForValidListAndQueue+0x60>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d120      	bne.n	8003fa0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f5e:	4814      	ldr	r0, [pc, #80]	@ (8003fb0 <prvCheckForValidListAndQueue+0x64>)
 8003f60:	f7fd ff5a 	bl	8001e18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f64:	4813      	ldr	r0, [pc, #76]	@ (8003fb4 <prvCheckForValidListAndQueue+0x68>)
 8003f66:	f7fd ff57 	bl	8001e18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f6a:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <prvCheckForValidListAndQueue+0x6c>)
 8003f6c:	4a10      	ldr	r2, [pc, #64]	@ (8003fb0 <prvCheckForValidListAndQueue+0x64>)
 8003f6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f70:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <prvCheckForValidListAndQueue+0x70>)
 8003f72:	4a10      	ldr	r2, [pc, #64]	@ (8003fb4 <prvCheckForValidListAndQueue+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f76:	2300      	movs	r3, #0
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <prvCheckForValidListAndQueue+0x74>)
 8003f7c:	4a11      	ldr	r2, [pc, #68]	@ (8003fc4 <prvCheckForValidListAndQueue+0x78>)
 8003f7e:	2110      	movs	r1, #16
 8003f80:	200a      	movs	r0, #10
 8003f82:	f7fe f863 	bl	800204c <xQueueGenericCreateStatic>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a08      	ldr	r2, [pc, #32]	@ (8003fac <prvCheckForValidListAndQueue+0x60>)
 8003f8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f8c:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <prvCheckForValidListAndQueue+0x60>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <prvCheckForValidListAndQueue+0x60>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	490b      	ldr	r1, [pc, #44]	@ (8003fc8 <prvCheckForValidListAndQueue+0x7c>)
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe fd46 	bl	8002a2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fa0:	f000 f934 	bl	800420c <vPortExitCritical>
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000cbc 	.word	0x20000cbc
 8003fb0:	20000c8c 	.word	0x20000c8c
 8003fb4:	20000ca0 	.word	0x20000ca0
 8003fb8:	20000cb4 	.word	0x20000cb4
 8003fbc:	20000cb8 	.word	0x20000cb8
 8003fc0:	20000d68 	.word	0x20000d68
 8003fc4:	20000cc8 	.word	0x20000cc8
 8003fc8:	0800484c 	.word	0x0800484c

08003fcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b04      	subs	r3, #4
 8003fdc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3b04      	subs	r3, #4
 8003fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f023 0201 	bic.w	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b04      	subs	r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ffc:	4a08      	ldr	r2, [pc, #32]	@ (8004020 <pxPortInitialiseStack+0x54>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3b14      	subs	r3, #20
 8004006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b20      	subs	r3, #32
 8004012:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004014:	68fb      	ldr	r3, [r7, #12]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	08004025 	.word	0x08004025

08004024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800402e:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <prvTaskExitError+0x54>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004036:	d00b      	beq.n	8004050 <prvTaskExitError+0x2c>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	60fb      	str	r3, [r7, #12]
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	e7fd      	b.n	800404c <prvTaskExitError+0x28>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	60bb      	str	r3, [r7, #8]
}
 8004062:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004064:	bf00      	nop
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0fc      	beq.n	8004066 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	2000000c 	.word	0x2000000c
 800407c:	00000000 	.word	0x00000000

08004080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004080:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <pxCurrentTCBConst2>)
 8004082:	6819      	ldr	r1, [r3, #0]
 8004084:	6808      	ldr	r0, [r1, #0]
 8004086:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800408a:	f380 8809 	msr	PSP, r0
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f380 8811 	msr	BASEPRI, r0
 800409a:	f04e 0e0d 	orr.w	lr, lr, #13
 800409e:	4770      	bx	lr

080040a0 <pxCurrentTCBConst2>:
 80040a0:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop

080040a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80040a8:	4806      	ldr	r0, [pc, #24]	@ (80040c4 <prvPortStartFirstTask+0x1c>)
 80040aa:	6800      	ldr	r0, [r0, #0]
 80040ac:	6800      	ldr	r0, [r0, #0]
 80040ae:	f380 8808 	msr	MSP, r0
 80040b2:	b662      	cpsie	i
 80040b4:	b661      	cpsie	f
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	df00      	svc	0
 80040c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040c2:	bf00      	nop
 80040c4:	e000ed08 	.word	0xe000ed08

080040c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ce:	4b32      	ldr	r3, [pc, #200]	@ (8004198 <xPortStartScheduler+0xd0>)
 80040d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	22ff      	movs	r2, #255	@ 0xff
 80040de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b2a      	ldr	r3, [pc, #168]	@ (800419c <xPortStartScheduler+0xd4>)
 80040f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040f6:	4b2a      	ldr	r3, [pc, #168]	@ (80041a0 <xPortStartScheduler+0xd8>)
 80040f8:	2207      	movs	r2, #7
 80040fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040fc:	e009      	b.n	8004112 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040fe:	4b28      	ldr	r3, [pc, #160]	@ (80041a0 <xPortStartScheduler+0xd8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3b01      	subs	r3, #1
 8004104:	4a26      	ldr	r2, [pc, #152]	@ (80041a0 <xPortStartScheduler+0xd8>)
 8004106:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411a:	2b80      	cmp	r3, #128	@ 0x80
 800411c:	d0ef      	beq.n	80040fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800411e:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <xPortStartScheduler+0xd8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1c3 0307 	rsb	r3, r3, #7
 8004126:	2b04      	cmp	r3, #4
 8004128:	d00b      	beq.n	8004142 <xPortStartScheduler+0x7a>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	60bb      	str	r3, [r7, #8]
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	e7fd      	b.n	800413e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004142:	4b17      	ldr	r3, [pc, #92]	@ (80041a0 <xPortStartScheduler+0xd8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	4a15      	ldr	r2, [pc, #84]	@ (80041a0 <xPortStartScheduler+0xd8>)
 800414a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800414c:	4b14      	ldr	r3, [pc, #80]	@ (80041a0 <xPortStartScheduler+0xd8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004154:	4a12      	ldr	r2, [pc, #72]	@ (80041a0 <xPortStartScheduler+0xd8>)
 8004156:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004160:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <xPortStartScheduler+0xdc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0f      	ldr	r2, [pc, #60]	@ (80041a4 <xPortStartScheduler+0xdc>)
 8004166:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800416a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800416c:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <xPortStartScheduler+0xdc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0c      	ldr	r2, [pc, #48]	@ (80041a4 <xPortStartScheduler+0xdc>)
 8004172:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004176:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004178:	f000 f8b8 	bl	80042ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800417c:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <xPortStartScheduler+0xe0>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004182:	f7ff ff91 	bl	80040a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004186:	f7ff f877 	bl	8003278 <vTaskSwitchContext>
	prvTaskExitError();
 800418a:	f7ff ff4b 	bl	8004024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	e000e400 	.word	0xe000e400
 800419c:	20000db8 	.word	0x20000db8
 80041a0:	20000dbc 	.word	0x20000dbc
 80041a4:	e000ed20 	.word	0xe000ed20
 80041a8:	2000000c 	.word	0x2000000c

080041ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	607b      	str	r3, [r7, #4]
}
 80041c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004204 <vPortEnterCritical+0x58>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004204 <vPortEnterCritical+0x58>)
 80041ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <vPortEnterCritical+0x58>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d110      	bne.n	80041fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <vPortEnterCritical+0x5c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <vPortEnterCritical+0x4e>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	603b      	str	r3, [r7, #0]
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <vPortEnterCritical+0x4a>
	}
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr
 8004204:	2000000c 	.word	0x2000000c
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004212:	4b12      	ldr	r3, [pc, #72]	@ (800425c <vPortExitCritical+0x50>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <vPortExitCritical+0x26>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	607b      	str	r3, [r7, #4]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004232:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <vPortExitCritical+0x50>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3b01      	subs	r3, #1
 8004238:	4a08      	ldr	r2, [pc, #32]	@ (800425c <vPortExitCritical+0x50>)
 800423a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800423c:	4b07      	ldr	r3, [pc, #28]	@ (800425c <vPortExitCritical+0x50>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <vPortExitCritical+0x44>
 8004244:	2300      	movs	r3, #0
 8004246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f383 8811 	msr	BASEPRI, r3
}
 800424e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	2000000c 	.word	0x2000000c

08004260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004260:	f3ef 8009 	mrs	r0, PSP
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	4b0d      	ldr	r3, [pc, #52]	@ (80042a0 <pxCurrentTCBConst>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004270:	6010      	str	r0, [r2, #0]
 8004272:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004276:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800427a:	f380 8811 	msr	BASEPRI, r0
 800427e:	f7fe fffb 	bl	8003278 <vTaskSwitchContext>
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	6808      	ldr	r0, [r1, #0]
 8004292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004296:	f380 8809 	msr	PSP, r0
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	4770      	bx	lr

080042a0 <pxCurrentTCBConst>:
 80042a0:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop

080042a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	607b      	str	r3, [r7, #4]
}
 80042c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042c2:	f7fe ff1f 	bl	8003104 <xTaskIncrementTick>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042cc:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <xPortSysTickHandler+0x40>)
 80042ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f383 8811 	msr	BASEPRI, r3
}
 80042de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042f0:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <vPortSetupTimerInterrupt+0x30>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004320 <vPortSetupTimerInterrupt+0x34>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042fc:	4b09      	ldr	r3, [pc, #36]	@ (8004324 <vPortSetupTimerInterrupt+0x38>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <vPortSetupTimerInterrupt+0x3c>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	4a08      	ldr	r2, [pc, #32]	@ (800432c <vPortSetupTimerInterrupt+0x40>)
 800430a:	3b01      	subs	r3, #1
 800430c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800430e:	4b03      	ldr	r3, [pc, #12]	@ (800431c <vPortSetupTimerInterrupt+0x30>)
 8004310:	2207      	movs	r2, #7
 8004312:	601a      	str	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	e000e010 	.word	0xe000e010
 8004320:	e000e018 	.word	0xe000e018
 8004324:	20000000 	.word	0x20000000
 8004328:	10624dd3 	.word	0x10624dd3
 800432c:	e000e014 	.word	0xe000e014

08004330 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004336:	f3ef 8305 	mrs	r3, IPSR
 800433a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b0f      	cmp	r3, #15
 8004340:	d915      	bls.n	800436e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004342:	4a17      	ldr	r2, [pc, #92]	@ (80043a0 <vPortValidateInterruptPriority+0x70>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800434c:	4b15      	ldr	r3, [pc, #84]	@ (80043a4 <vPortValidateInterruptPriority+0x74>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	7afa      	ldrb	r2, [r7, #11]
 8004352:	429a      	cmp	r2, r3
 8004354:	d20b      	bcs.n	800436e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	607b      	str	r3, [r7, #4]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800436e:	4b0e      	ldr	r3, [pc, #56]	@ (80043a8 <vPortValidateInterruptPriority+0x78>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004376:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <vPortValidateInterruptPriority+0x7c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d90b      	bls.n	8004396 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	603b      	str	r3, [r7, #0]
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	e7fd      	b.n	8004392 <vPortValidateInterruptPriority+0x62>
	}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr
 80043a0:	e000e3f0 	.word	0xe000e3f0
 80043a4:	20000db8 	.word	0x20000db8
 80043a8:	e000ed0c 	.word	0xe000ed0c
 80043ac:	20000dbc 	.word	0x20000dbc

080043b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	@ 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043bc:	f7fe fdd6 	bl	8002f6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043c0:	4b5c      	ldr	r3, [pc, #368]	@ (8004534 <pvPortMalloc+0x184>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043c8:	f000 f924 	bl	8004614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004538 <pvPortMalloc+0x188>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f040 8095 	bne.w	8004504 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01e      	beq.n	800441e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80043e0:	2208      	movs	r2, #8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d015      	beq.n	800441e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f023 0307 	bic.w	r3, r3, #7
 80043f8:	3308      	adds	r3, #8
 80043fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <pvPortMalloc+0x6e>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	617b      	str	r3, [r7, #20]
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	e7fd      	b.n	800441a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d06f      	beq.n	8004504 <pvPortMalloc+0x154>
 8004424:	4b45      	ldr	r3, [pc, #276]	@ (800453c <pvPortMalloc+0x18c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	d86a      	bhi.n	8004504 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800442e:	4b44      	ldr	r3, [pc, #272]	@ (8004540 <pvPortMalloc+0x190>)
 8004430:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004432:	4b43      	ldr	r3, [pc, #268]	@ (8004540 <pvPortMalloc+0x190>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004438:	e004      	b.n	8004444 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	429a      	cmp	r2, r3
 800444c:	d903      	bls.n	8004456 <pvPortMalloc+0xa6>
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f1      	bne.n	800443a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004456:	4b37      	ldr	r3, [pc, #220]	@ (8004534 <pvPortMalloc+0x184>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445c:	429a      	cmp	r2, r3
 800445e:	d051      	beq.n	8004504 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2208      	movs	r2, #8
 8004466:	4413      	add	r3, r2
 8004468:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	1ad2      	subs	r2, r2, r3
 800447a:	2308      	movs	r3, #8
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	429a      	cmp	r2, r3
 8004480:	d920      	bls.n	80044c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4413      	add	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <pvPortMalloc+0xfc>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	613b      	str	r3, [r7, #16]
}
 80044a6:	bf00      	nop
 80044a8:	bf00      	nop
 80044aa:	e7fd      	b.n	80044a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1ad2      	subs	r2, r2, r3
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044be:	69b8      	ldr	r0, [r7, #24]
 80044c0:	f000 f90a 	bl	80046d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <pvPortMalloc+0x18c>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <pvPortMalloc+0x18c>)
 80044d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <pvPortMalloc+0x18c>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <pvPortMalloc+0x194>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d203      	bcs.n	80044e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044de:	4b17      	ldr	r3, [pc, #92]	@ (800453c <pvPortMalloc+0x18c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a18      	ldr	r2, [pc, #96]	@ (8004544 <pvPortMalloc+0x194>)
 80044e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4b13      	ldr	r3, [pc, #76]	@ (8004538 <pvPortMalloc+0x188>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80044fa:	4b13      	ldr	r3, [pc, #76]	@ (8004548 <pvPortMalloc+0x198>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3301      	adds	r3, #1
 8004500:	4a11      	ldr	r2, [pc, #68]	@ (8004548 <pvPortMalloc+0x198>)
 8004502:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004504:	f7fe fd40 	bl	8002f88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <pvPortMalloc+0x17a>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	60fb      	str	r3, [r7, #12]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <pvPortMalloc+0x176>
	return pvReturn;
 800452a:	69fb      	ldr	r3, [r7, #28]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3728      	adds	r7, #40	@ 0x28
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	200019c8 	.word	0x200019c8
 8004538:	200019dc 	.word	0x200019dc
 800453c:	200019cc 	.word	0x200019cc
 8004540:	200019c0 	.word	0x200019c0
 8004544:	200019d0 	.word	0x200019d0
 8004548:	200019d4 	.word	0x200019d4

0800454c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d04f      	beq.n	80045fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800455e:	2308      	movs	r3, #8
 8004560:	425b      	negs	r3, r3
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4413      	add	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	4b25      	ldr	r3, [pc, #148]	@ (8004608 <vPortFree+0xbc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <vPortFree+0x46>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60fb      	str	r3, [r7, #12]
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <vPortFree+0x66>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	60bb      	str	r3, [r7, #8]
}
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	e7fd      	b.n	80045ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	4b14      	ldr	r3, [pc, #80]	@ (8004608 <vPortFree+0xbc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01e      	beq.n	80045fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d11a      	bne.n	80045fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004608 <vPortFree+0xbc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	401a      	ands	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045d8:	f7fe fcc8 	bl	8002f6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	4b0a      	ldr	r3, [pc, #40]	@ (800460c <vPortFree+0xc0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4413      	add	r3, r2
 80045e6:	4a09      	ldr	r2, [pc, #36]	@ (800460c <vPortFree+0xc0>)
 80045e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045ea:	6938      	ldr	r0, [r7, #16]
 80045ec:	f000 f874 	bl	80046d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80045f0:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <vPortFree+0xc4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	4a06      	ldr	r2, [pc, #24]	@ (8004610 <vPortFree+0xc4>)
 80045f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80045fa:	f7fe fcc5 	bl	8002f88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045fe:	bf00      	nop
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	200019dc 	.word	0x200019dc
 800460c:	200019cc 	.word	0x200019cc
 8004610:	200019d8 	.word	0x200019d8

08004614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800461a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800461e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004620:	4b27      	ldr	r3, [pc, #156]	@ (80046c0 <prvHeapInit+0xac>)
 8004622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3307      	adds	r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0307 	bic.w	r3, r3, #7
 800463a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	4a1f      	ldr	r2, [pc, #124]	@ (80046c0 <prvHeapInit+0xac>)
 8004644:	4413      	add	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800464c:	4a1d      	ldr	r2, [pc, #116]	@ (80046c4 <prvHeapInit+0xb0>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004652:	4b1c      	ldr	r3, [pc, #112]	@ (80046c4 <prvHeapInit+0xb0>)
 8004654:	2200      	movs	r2, #0
 8004656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4413      	add	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004660:	2208      	movs	r2, #8
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a15      	ldr	r2, [pc, #84]	@ (80046c8 <prvHeapInit+0xb4>)
 8004674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004676:	4b14      	ldr	r3, [pc, #80]	@ (80046c8 <prvHeapInit+0xb4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800467e:	4b12      	ldr	r3, [pc, #72]	@ (80046c8 <prvHeapInit+0xb4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	1ad2      	subs	r2, r2, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004694:	4b0c      	ldr	r3, [pc, #48]	@ (80046c8 <prvHeapInit+0xb4>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a0a      	ldr	r2, [pc, #40]	@ (80046cc <prvHeapInit+0xb8>)
 80046a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4a09      	ldr	r2, [pc, #36]	@ (80046d0 <prvHeapInit+0xbc>)
 80046aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046ac:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <prvHeapInit+0xc0>)
 80046ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046b2:	601a      	str	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000dc0 	.word	0x20000dc0
 80046c4:	200019c0 	.word	0x200019c0
 80046c8:	200019c8 	.word	0x200019c8
 80046cc:	200019d0 	.word	0x200019d0
 80046d0:	200019cc 	.word	0x200019cc
 80046d4:	200019dc 	.word	0x200019dc

080046d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046e0:	4b27      	ldr	r3, [pc, #156]	@ (8004780 <prvInsertBlockIntoFreeList+0xa8>)
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e002      	b.n	80046ec <prvInsertBlockIntoFreeList+0x14>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d8f7      	bhi.n	80046e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4413      	add	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d108      	bne.n	800471a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	441a      	add	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	441a      	add	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d118      	bne.n	8004760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <prvInsertBlockIntoFreeList+0xac>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d00d      	beq.n	8004756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	441a      	add	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e008      	b.n	8004768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004756:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <prvInsertBlockIntoFreeList+0xac>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e003      	b.n	8004768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	429a      	cmp	r2, r3
 800476e:	d002      	beq.n	8004776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004776:	bf00      	nop
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr
 8004780:	200019c0 	.word	0x200019c0
 8004784:	200019c8 	.word	0x200019c8

08004788 <memset>:
 8004788:	4603      	mov	r3, r0
 800478a:	4402      	add	r2, r0
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <memset+0xa>
 8004790:	4770      	bx	lr
 8004792:	f803 1b01 	strb.w	r1, [r3], #1
 8004796:	e7f9      	b.n	800478c <memset+0x4>

08004798 <__libc_init_array>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	2600      	movs	r6, #0
 800479c:	4d0c      	ldr	r5, [pc, #48]	@ (80047d0 <__libc_init_array+0x38>)
 800479e:	4c0d      	ldr	r4, [pc, #52]	@ (80047d4 <__libc_init_array+0x3c>)
 80047a0:	1b64      	subs	r4, r4, r5
 80047a2:	10a4      	asrs	r4, r4, #2
 80047a4:	42a6      	cmp	r6, r4
 80047a6:	d109      	bne.n	80047bc <__libc_init_array+0x24>
 80047a8:	f000 f828 	bl	80047fc <_init>
 80047ac:	2600      	movs	r6, #0
 80047ae:	4d0a      	ldr	r5, [pc, #40]	@ (80047d8 <__libc_init_array+0x40>)
 80047b0:	4c0a      	ldr	r4, [pc, #40]	@ (80047dc <__libc_init_array+0x44>)
 80047b2:	1b64      	subs	r4, r4, r5
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	42a6      	cmp	r6, r4
 80047b8:	d105      	bne.n	80047c6 <__libc_init_array+0x2e>
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c0:	4798      	blx	r3
 80047c2:	3601      	adds	r6, #1
 80047c4:	e7ee      	b.n	80047a4 <__libc_init_array+0xc>
 80047c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ca:	4798      	blx	r3
 80047cc:	3601      	adds	r6, #1
 80047ce:	e7f2      	b.n	80047b6 <__libc_init_array+0x1e>
 80047d0:	080048e0 	.word	0x080048e0
 80047d4:	080048e0 	.word	0x080048e0
 80047d8:	080048e0 	.word	0x080048e0
 80047dc:	080048e4 	.word	0x080048e4

080047e0 <memcpy>:
 80047e0:	440a      	add	r2, r1
 80047e2:	4291      	cmp	r1, r2
 80047e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80047e8:	d100      	bne.n	80047ec <memcpy+0xc>
 80047ea:	4770      	bx	lr
 80047ec:	b510      	push	{r4, lr}
 80047ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f2:	4291      	cmp	r1, r2
 80047f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047f8:	d1f9      	bne.n	80047ee <memcpy+0xe>
 80047fa:	bd10      	pop	{r4, pc}

080047fc <_init>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr

08004808 <_fini>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr
