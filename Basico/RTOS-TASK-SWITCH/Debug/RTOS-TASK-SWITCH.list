
RTOS-TASK-SWITCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800438c  0800438c  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800438c  0800438c  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800438c  0800438c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004390  08004390  00005390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004394  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c4  20000010  080043a4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019d4  080043a4  000069d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011821  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c13  00000000  00000000  0001785a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d59  00000000  00000000  0001b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002923  00000000  00000000  0001c321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011253  00000000  00000000  0001ec44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d7e  00000000  00000000  0002fe97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1c15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004854  00000000  00000000  000c1c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c64ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080042ac 	.word	0x080042ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080042ac 	.word	0x080042ac

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f9ec 	bl	8000530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f832 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f86c 	bl	8000238 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fb5c 	bl	800181c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000164:	4a0d      	ldr	r2, [pc, #52]	@ (800019c <main+0x4c>)
 8000166:	2100      	movs	r1, #0
 8000168:	480d      	ldr	r0, [pc, #52]	@ (80001a0 <main+0x50>)
 800016a:	f001 fb9f 	bl	80018ac <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0c      	ldr	r2, [pc, #48]	@ (80001a4 <main+0x54>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000174:	4a0c      	ldr	r2, [pc, #48]	@ (80001a8 <main+0x58>)
 8000176:	2100      	movs	r1, #0
 8000178:	480c      	ldr	r0, [pc, #48]	@ (80001ac <main+0x5c>)
 800017a:	f001 fb97 	bl	80018ac <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0b      	ldr	r2, [pc, #44]	@ (80001b0 <main+0x60>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of blink03 */
  blink03Handle = osThreadNew(StartBlink03, NULL, &blink03_attributes);
 8000184:	4a0b      	ldr	r2, [pc, #44]	@ (80001b4 <main+0x64>)
 8000186:	2100      	movs	r1, #0
 8000188:	480b      	ldr	r0, [pc, #44]	@ (80001b8 <main+0x68>)
 800018a:	f001 fb8f 	bl	80018ac <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0a      	ldr	r2, [pc, #40]	@ (80001bc <main+0x6c>)
 8000192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000194:	f001 fb64 	bl	8001860 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000198:	bf00      	nop
 800019a:	e7fd      	b.n	8000198 <main+0x48>
 800019c:	080042f4 	.word	0x080042f4
 80001a0:	080002a1 	.word	0x080002a1
 80001a4:	2000002c 	.word	0x2000002c
 80001a8:	08004318 	.word	0x08004318
 80001ac:	080002c5 	.word	0x080002c5
 80001b0:	20000030 	.word	0x20000030
 80001b4:	0800433c 	.word	0x0800433c
 80001b8:	080002e9 	.word	0x080002e9
 80001bc:	20000034 	.word	0x20000034

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	@ 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	@ 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f004 f832 	bl	8004238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e6:	2301      	movs	r3, #1
 80001e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ea:	2310      	movs	r3, #16
 80001ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ee:	2300      	movs	r3, #0
 80001f0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fc62 	bl	8000ac0 <HAL_RCC_OscConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000202:	f000 f895 	bl	8000330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000206:	230f      	movs	r3, #15
 8000208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800020a:	2300      	movs	r3, #0
 800020c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fed0 	bl	8000fc4 <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800022a:	f000 f881 	bl	8000330 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	@ 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	f107 0308 	add.w	r3, r7, #8
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <MX_GPIO_Init+0x60>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a11      	ldr	r2, [pc, #68]	@ (8000298 <MX_GPIO_Init+0x60>)
 8000252:	f043 0308 	orr.w	r3, r3, #8
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <MX_GPIO_Init+0x60>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0308 	and.w	r3, r3, #8
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800026a:	480c      	ldr	r0, [pc, #48]	@ (800029c <MX_GPIO_Init+0x64>)
 800026c:	f000 fbf6 	bl	8000a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8000270:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027e:	2302      	movs	r3, #2
 8000280:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	4619      	mov	r1, r3
 8000288:	4804      	ldr	r0, [pc, #16]	@ (800029c <MX_GPIO_Init+0x64>)
 800028a:	f000 fa63 	bl	8000754 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800028e:	bf00      	nop
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000
 800029c:	40010c00 	.word	0x40010c00

080002a0 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, LED_1_Pin);
 80002a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <StartBlink01+0x20>)
 80002ae:	f000 fbed 	bl	8000a8c <HAL_GPIO_TogglePin>
    osDelay(500);
 80002b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002b6:	f001 fb8b 	bl	80019d0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, LED_1_Pin);
 80002ba:	bf00      	nop
 80002bc:	e7f4      	b.n	80002a8 <StartBlink01+0x8>
 80002be:	bf00      	nop
 80002c0:	40010c00 	.word	0x40010c00

080002c4 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, LED_2_Pin);
 80002cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002d0:	4804      	ldr	r0, [pc, #16]	@ (80002e4 <StartBlink02+0x20>)
 80002d2:	f000 fbdb 	bl	8000a8c <HAL_GPIO_TogglePin>
    osDelay(1000);
 80002d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002da:	f001 fb79 	bl	80019d0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, LED_2_Pin);
 80002de:	bf00      	nop
 80002e0:	e7f4      	b.n	80002cc <StartBlink02+0x8>
 80002e2:	bf00      	nop
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <StartBlink03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink03 */
void StartBlink03(void *argument)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, LED_3_Pin);
 80002f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002f4:	4804      	ldr	r0, [pc, #16]	@ (8000308 <StartBlink03+0x20>)
 80002f6:	f000 fbc9 	bl	8000a8c <HAL_GPIO_TogglePin>
    osDelay(3000);
 80002fa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002fe:	f001 fb67 	bl	80019d0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, LED_3_Pin);
 8000302:	bf00      	nop
 8000304:	e7f4      	b.n	80002f0 <StartBlink03+0x8>
 8000306:	bf00      	nop
 8000308:	40010c00 	.word	0x40010c00

0800030c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a04      	ldr	r2, [pc, #16]	@ (800032c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d101      	bne.n	8000322 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800031e:	f000 f91d 	bl	800055c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40012c00 	.word	0x40012c00

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <Error_Handler+0x8>

0800033c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000342:	4b18      	ldr	r3, [pc, #96]	@ (80003a4 <HAL_MspInit+0x68>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a17      	ldr	r2, [pc, #92]	@ (80003a4 <HAL_MspInit+0x68>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b15      	ldr	r3, [pc, #84]	@ (80003a4 <HAL_MspInit+0x68>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035a:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <HAL_MspInit+0x68>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	4a11      	ldr	r2, [pc, #68]	@ (80003a4 <HAL_MspInit+0x68>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000364:	61d3      	str	r3, [r2, #28]
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <HAL_MspInit+0x68>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	210f      	movs	r1, #15
 8000376:	f06f 0001 	mvn.w	r0, #1
 800037a:	f000 f9c0 	bl	80006fe <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800037e:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <HAL_MspInit+0x6c>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <HAL_MspInit+0x6c>)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	bf00      	nop
 800039c:	3710      	adds	r7, #16
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010000 	.word	0x40010000

080003ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08c      	sub	sp, #48	@ 0x30
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80003b4:	2300      	movs	r3, #0
 80003b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80003b8:	2300      	movs	r3, #0
 80003ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80003bc:	2300      	movs	r3, #0
 80003be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80003c2:	4b2e      	ldr	r3, [pc, #184]	@ (800047c <HAL_InitTick+0xd0>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a2d      	ldr	r2, [pc, #180]	@ (800047c <HAL_InitTick+0xd0>)
 80003c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b2b      	ldr	r3, [pc, #172]	@ (800047c <HAL_InitTick+0xd0>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003da:	f107 020c 	add.w	r2, r7, #12
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4611      	mov	r1, r2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 ff49 	bl	800127c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80003ea:	f000 ff33 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 80003ee:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003f2:	4a23      	ldr	r2, [pc, #140]	@ (8000480 <HAL_InitTick+0xd4>)
 80003f4:	fba2 2303 	umull	r2, r3, r2, r3
 80003f8:	0c9b      	lsrs	r3, r3, #18
 80003fa:	3b01      	subs	r3, #1
 80003fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80003fe:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <HAL_InitTick+0xd8>)
 8000400:	4a21      	ldr	r2, [pc, #132]	@ (8000488 <HAL_InitTick+0xdc>)
 8000402:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000404:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <HAL_InitTick+0xd8>)
 8000406:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800040a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800040c:	4a1d      	ldr	r2, [pc, #116]	@ (8000484 <HAL_InitTick+0xd8>)
 800040e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000410:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000412:	4b1c      	ldr	r3, [pc, #112]	@ (8000484 <HAL_InitTick+0xd8>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000418:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <HAL_InitTick+0xd8>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041e:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <HAL_InitTick+0xd8>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000424:	4817      	ldr	r0, [pc, #92]	@ (8000484 <HAL_InitTick+0xd8>)
 8000426:	f000 ff77 	bl	8001318 <HAL_TIM_Base_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000434:	2b00      	cmp	r3, #0
 8000436:	d11b      	bne.n	8000470 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000438:	4812      	ldr	r0, [pc, #72]	@ (8000484 <HAL_InitTick+0xd8>)
 800043a:	f000 ffc5 	bl	80013c8 <HAL_TIM_Base_Start_IT>
 800043e:	4603      	mov	r3, r0
 8000440:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000444:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000448:	2b00      	cmp	r3, #0
 800044a:	d111      	bne.n	8000470 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800044c:	2019      	movs	r0, #25
 800044e:	f000 f972 	bl	8000736 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b0f      	cmp	r3, #15
 8000456:	d808      	bhi.n	800046a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000458:	2200      	movs	r2, #0
 800045a:	6879      	ldr	r1, [r7, #4]
 800045c:	2019      	movs	r0, #25
 800045e:	f000 f94e 	bl	80006fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000462:	4a0a      	ldr	r2, [pc, #40]	@ (800048c <HAL_InitTick+0xe0>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6013      	str	r3, [r2, #0]
 8000468:	e002      	b.n	8000470 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800046a:	2301      	movs	r3, #1
 800046c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000470:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000474:	4618      	mov	r0, r3
 8000476:	3730      	adds	r7, #48	@ 0x30
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	431bde83 	.word	0x431bde83
 8000484:	20000038 	.word	0x20000038
 8000488:	40012c00 	.word	0x40012c00
 800048c:	20000004 	.word	0x20000004

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <NMI_Handler+0x4>

08000498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <MemManage_Handler+0x4>

080004a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004c8:	4802      	ldr	r0, [pc, #8]	@ (80004d4 <TIM1_UP_IRQHandler+0x10>)
 80004ca:	f000 ffcf 	bl	800146c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000038 	.word	0x20000038

080004d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e4:	f7ff fff8 	bl	80004d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480b      	ldr	r0, [pc, #44]	@ (8000518 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004ea:	490c      	ldr	r1, [pc, #48]	@ (800051c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000520 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a09      	ldr	r2, [pc, #36]	@ (8000524 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000500:	4c09      	ldr	r4, [pc, #36]	@ (8000528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050e:	f003 fe9b 	bl	8004248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fe1d 	bl	8000150 <main>
  bx lr
 8000516:	4770      	bx	lr
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000520:	08004394 	.word	0x08004394
  ldr r2, =_sbss
 8000524:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000528:	200019d4 	.word	0x200019d4

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <HAL_Init+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <HAL_Init+0x28>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f8d1 	bl	80006e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	200f      	movs	r0, #15
 8000548:	f7ff ff30 	bl	80003ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f7ff fef6 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000560:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <HAL_IncTick+0x1c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b05      	ldr	r3, [pc, #20]	@ (800057c <HAL_IncTick+0x20>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	4a03      	ldr	r2, [pc, #12]	@ (800057c <HAL_IncTick+0x20>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000008 	.word	0x20000008
 800057c:	20000080 	.word	0x20000080

08000580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return uwTick;
 8000584:	4b02      	ldr	r3, [pc, #8]	@ (8000590 <HAL_GetTick+0x10>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	20000080 	.word	0x20000080

08000594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005b0:	4013      	ands	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c6:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	60d3      	str	r3, [r2, #12]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <__NVIC_GetPriorityGrouping+0x18>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	f003 0307 	and.w	r3, r3, #7
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db0b      	blt.n	8000622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 021f 	and.w	r2, r3, #31
 8000610:	4906      	ldr	r1, [pc, #24]	@ (800062c <__NVIC_EnableIRQ+0x34>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f202 	lsl.w	r2, r0, r2
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	490c      	ldr	r1, [pc, #48]	@ (800067c <__NVIC_SetPriority+0x4c>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4908      	ldr	r1, [pc, #32]	@ (8000680 <__NVIC_SetPriority+0x50>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	3b04      	subs	r3, #4
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	@ 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	f1c3 0307 	rsb	r3, r3, #7
 800069e:	2b04      	cmp	r3, #4
 80006a0:	bf28      	it	cs
 80006a2:	2304      	movcs	r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3304      	adds	r3, #4
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d902      	bls.n	80006b4 <NVIC_EncodePriority+0x30>
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3b03      	subs	r3, #3
 80006b2:	e000      	b.n	80006b6 <NVIC_EncodePriority+0x32>
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	43da      	mvns	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	401a      	ands	r2, r3
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	43d9      	mvns	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	4313      	orrs	r3, r2
         );
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3724      	adds	r7, #36	@ 0x24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ff4f 	bl	8000594 <__NVIC_SetPriorityGrouping>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006fe:	b580      	push	{r7, lr}
 8000700:	b086      	sub	sp, #24
 8000702:	af00      	add	r7, sp, #0
 8000704:	4603      	mov	r3, r0
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
 800070a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000710:	f7ff ff64 	bl	80005dc <__NVIC_GetPriorityGrouping>
 8000714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	68b9      	ldr	r1, [r7, #8]
 800071a:	6978      	ldr	r0, [r7, #20]
 800071c:	f7ff ffb2 	bl	8000684 <NVIC_EncodePriority>
 8000720:	4602      	mov	r2, r0
 8000722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000726:	4611      	mov	r1, r2
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff81 	bl	8000630 <__NVIC_SetPriority>
}
 800072e:	bf00      	nop
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	4603      	mov	r3, r0
 800073e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff57 	bl	80005f8 <__NVIC_EnableIRQ>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000754:	b480      	push	{r7}
 8000756:	b08b      	sub	sp, #44	@ 0x2c
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000766:	e169      	b.n	8000a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000768:	2201      	movs	r2, #1
 800076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	69fa      	ldr	r2, [r7, #28]
 8000778:	4013      	ands	r3, r2
 800077a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800077c:	69ba      	ldr	r2, [r7, #24]
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	429a      	cmp	r2, r3
 8000782:	f040 8158 	bne.w	8000a36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4a9a      	ldr	r2, [pc, #616]	@ (80009f4 <HAL_GPIO_Init+0x2a0>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d05e      	beq.n	800084e <HAL_GPIO_Init+0xfa>
 8000790:	4a98      	ldr	r2, [pc, #608]	@ (80009f4 <HAL_GPIO_Init+0x2a0>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d875      	bhi.n	8000882 <HAL_GPIO_Init+0x12e>
 8000796:	4a98      	ldr	r2, [pc, #608]	@ (80009f8 <HAL_GPIO_Init+0x2a4>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d058      	beq.n	800084e <HAL_GPIO_Init+0xfa>
 800079c:	4a96      	ldr	r2, [pc, #600]	@ (80009f8 <HAL_GPIO_Init+0x2a4>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d86f      	bhi.n	8000882 <HAL_GPIO_Init+0x12e>
 80007a2:	4a96      	ldr	r2, [pc, #600]	@ (80009fc <HAL_GPIO_Init+0x2a8>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d052      	beq.n	800084e <HAL_GPIO_Init+0xfa>
 80007a8:	4a94      	ldr	r2, [pc, #592]	@ (80009fc <HAL_GPIO_Init+0x2a8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d869      	bhi.n	8000882 <HAL_GPIO_Init+0x12e>
 80007ae:	4a94      	ldr	r2, [pc, #592]	@ (8000a00 <HAL_GPIO_Init+0x2ac>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d04c      	beq.n	800084e <HAL_GPIO_Init+0xfa>
 80007b4:	4a92      	ldr	r2, [pc, #584]	@ (8000a00 <HAL_GPIO_Init+0x2ac>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d863      	bhi.n	8000882 <HAL_GPIO_Init+0x12e>
 80007ba:	4a92      	ldr	r2, [pc, #584]	@ (8000a04 <HAL_GPIO_Init+0x2b0>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d046      	beq.n	800084e <HAL_GPIO_Init+0xfa>
 80007c0:	4a90      	ldr	r2, [pc, #576]	@ (8000a04 <HAL_GPIO_Init+0x2b0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d85d      	bhi.n	8000882 <HAL_GPIO_Init+0x12e>
 80007c6:	2b12      	cmp	r3, #18
 80007c8:	d82a      	bhi.n	8000820 <HAL_GPIO_Init+0xcc>
 80007ca:	2b12      	cmp	r3, #18
 80007cc:	d859      	bhi.n	8000882 <HAL_GPIO_Init+0x12e>
 80007ce:	a201      	add	r2, pc, #4	@ (adr r2, 80007d4 <HAL_GPIO_Init+0x80>)
 80007d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d4:	0800084f 	.word	0x0800084f
 80007d8:	08000829 	.word	0x08000829
 80007dc:	0800083b 	.word	0x0800083b
 80007e0:	0800087d 	.word	0x0800087d
 80007e4:	08000883 	.word	0x08000883
 80007e8:	08000883 	.word	0x08000883
 80007ec:	08000883 	.word	0x08000883
 80007f0:	08000883 	.word	0x08000883
 80007f4:	08000883 	.word	0x08000883
 80007f8:	08000883 	.word	0x08000883
 80007fc:	08000883 	.word	0x08000883
 8000800:	08000883 	.word	0x08000883
 8000804:	08000883 	.word	0x08000883
 8000808:	08000883 	.word	0x08000883
 800080c:	08000883 	.word	0x08000883
 8000810:	08000883 	.word	0x08000883
 8000814:	08000883 	.word	0x08000883
 8000818:	08000831 	.word	0x08000831
 800081c:	08000845 	.word	0x08000845
 8000820:	4a79      	ldr	r2, [pc, #484]	@ (8000a08 <HAL_GPIO_Init+0x2b4>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d013      	beq.n	800084e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000826:	e02c      	b.n	8000882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	623b      	str	r3, [r7, #32]
          break;
 800082e:	e029      	b.n	8000884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	3304      	adds	r3, #4
 8000836:	623b      	str	r3, [r7, #32]
          break;
 8000838:	e024      	b.n	8000884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	3308      	adds	r3, #8
 8000840:	623b      	str	r3, [r7, #32]
          break;
 8000842:	e01f      	b.n	8000884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	330c      	adds	r3, #12
 800084a:	623b      	str	r3, [r7, #32]
          break;
 800084c:	e01a      	b.n	8000884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d102      	bne.n	800085c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000856:	2304      	movs	r3, #4
 8000858:	623b      	str	r3, [r7, #32]
          break;
 800085a:	e013      	b.n	8000884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d105      	bne.n	8000870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000864:	2308      	movs	r3, #8
 8000866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	611a      	str	r2, [r3, #16]
          break;
 800086e:	e009      	b.n	8000884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000870:	2308      	movs	r3, #8
 8000872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	615a      	str	r2, [r3, #20]
          break;
 800087a:	e003      	b.n	8000884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
          break;
 8000880:	e000      	b.n	8000884 <HAL_GPIO_Init+0x130>
          break;
 8000882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	2bff      	cmp	r3, #255	@ 0xff
 8000888:	d801      	bhi.n	800088e <HAL_GPIO_Init+0x13a>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	e001      	b.n	8000892 <HAL_GPIO_Init+0x13e>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3304      	adds	r3, #4
 8000892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	2bff      	cmp	r3, #255	@ 0xff
 8000898:	d802      	bhi.n	80008a0 <HAL_GPIO_Init+0x14c>
 800089a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	e002      	b.n	80008a6 <HAL_GPIO_Init+0x152>
 80008a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a2:	3b08      	subs	r3, #8
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	210f      	movs	r1, #15
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	6a39      	ldr	r1, [r7, #32]
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	fa01 f303 	lsl.w	r3, r1, r3
 80008c0:	431a      	orrs	r2, r3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 80b1 	beq.w	8000a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008d4:	4b4d      	ldr	r3, [pc, #308]	@ (8000a0c <HAL_GPIO_Init+0x2b8>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a4c      	ldr	r2, [pc, #304]	@ (8000a0c <HAL_GPIO_Init+0x2b8>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b4a      	ldr	r3, [pc, #296]	@ (8000a0c <HAL_GPIO_Init+0x2b8>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008ec:	4a48      	ldr	r2, [pc, #288]	@ (8000a10 <HAL_GPIO_Init+0x2bc>)
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	089b      	lsrs	r3, r3, #2
 80008f2:	3302      	adds	r3, #2
 80008f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fc:	f003 0303 	and.w	r3, r3, #3
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	220f      	movs	r2, #15
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a40      	ldr	r2, [pc, #256]	@ (8000a14 <HAL_GPIO_Init+0x2c0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d013      	beq.n	8000940 <HAL_GPIO_Init+0x1ec>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a18 <HAL_GPIO_Init+0x2c4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d00d      	beq.n	800093c <HAL_GPIO_Init+0x1e8>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a3e      	ldr	r2, [pc, #248]	@ (8000a1c <HAL_GPIO_Init+0x2c8>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d007      	beq.n	8000938 <HAL_GPIO_Init+0x1e4>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a20 <HAL_GPIO_Init+0x2cc>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d101      	bne.n	8000934 <HAL_GPIO_Init+0x1e0>
 8000930:	2303      	movs	r3, #3
 8000932:	e006      	b.n	8000942 <HAL_GPIO_Init+0x1ee>
 8000934:	2304      	movs	r3, #4
 8000936:	e004      	b.n	8000942 <HAL_GPIO_Init+0x1ee>
 8000938:	2302      	movs	r3, #2
 800093a:	e002      	b.n	8000942 <HAL_GPIO_Init+0x1ee>
 800093c:	2301      	movs	r3, #1
 800093e:	e000      	b.n	8000942 <HAL_GPIO_Init+0x1ee>
 8000940:	2300      	movs	r3, #0
 8000942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000944:	f002 0203 	and.w	r2, r2, #3
 8000948:	0092      	lsls	r2, r2, #2
 800094a:	4093      	lsls	r3, r2
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4313      	orrs	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000952:	492f      	ldr	r1, [pc, #188]	@ (8000a10 <HAL_GPIO_Init+0x2bc>)
 8000954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000956:	089b      	lsrs	r3, r3, #2
 8000958:	3302      	adds	r3, #2
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d006      	beq.n	800097a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800096c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	492c      	ldr	r1, [pc, #176]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	4313      	orrs	r3, r2
 8000976:	608b      	str	r3, [r1, #8]
 8000978:	e006      	b.n	8000988 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800097a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	43db      	mvns	r3, r3
 8000982:	4928      	ldr	r1, [pc, #160]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 8000984:	4013      	ands	r3, r2
 8000986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000994:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	4922      	ldr	r1, [pc, #136]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	4313      	orrs	r3, r2
 800099e:	60cb      	str	r3, [r1, #12]
 80009a0:	e006      	b.n	80009b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	43db      	mvns	r3, r3
 80009aa:	491e      	ldr	r1, [pc, #120]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 80009ac:	4013      	ands	r3, r2
 80009ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d006      	beq.n	80009ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	4918      	ldr	r1, [pc, #96]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	604b      	str	r3, [r1, #4]
 80009c8:	e006      	b.n	80009d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009ca:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4914      	ldr	r1, [pc, #80]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d021      	beq.n	8000a28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	490e      	ldr	r1, [pc, #56]	@ (8000a24 <HAL_GPIO_Init+0x2d0>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	600b      	str	r3, [r1, #0]
 80009f0:	e021      	b.n	8000a36 <HAL_GPIO_Init+0x2e2>
 80009f2:	bf00      	nop
 80009f4:	10320000 	.word	0x10320000
 80009f8:	10310000 	.word	0x10310000
 80009fc:	10220000 	.word	0x10220000
 8000a00:	10210000 	.word	0x10210000
 8000a04:	10120000 	.word	0x10120000
 8000a08:	10110000 	.word	0x10110000
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010000 	.word	0x40010000
 8000a14:	40010800 	.word	0x40010800
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	40011000 	.word	0x40011000
 8000a20:	40011400 	.word	0x40011400
 8000a24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <HAL_GPIO_Init+0x304>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	4909      	ldr	r1, [pc, #36]	@ (8000a58 <HAL_GPIO_Init+0x304>)
 8000a32:	4013      	ands	r3, r2
 8000a34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	3301      	adds	r3, #1
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a42:	fa22 f303 	lsr.w	r3, r2, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f47f ae8e 	bne.w	8000768 <HAL_GPIO_Init+0x14>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	372c      	adds	r7, #44	@ 0x2c
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40010400 	.word	0x40010400

08000a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a6c:	787b      	ldrb	r3, [r7, #1]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a72:	887a      	ldrh	r2, [r7, #2]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a78:	e003      	b.n	8000a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	041a      	lsls	r2, r3, #16
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	611a      	str	r2, [r3, #16]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a9e:	887a      	ldrh	r2, [r7, #2]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	041a      	lsls	r2, r3, #16
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43d9      	mvns	r1, r3
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	400b      	ands	r3, r1
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	611a      	str	r2, [r3, #16]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
	...

08000ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e272      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 8087 	beq.w	8000bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ae0:	4b92      	ldr	r3, [pc, #584]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 030c 	and.w	r3, r3, #12
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d00c      	beq.n	8000b06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aec:	4b8f      	ldr	r3, [pc, #572]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 030c 	and.w	r3, r3, #12
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d112      	bne.n	8000b1e <HAL_RCC_OscConfig+0x5e>
 8000af8:	4b8c      	ldr	r3, [pc, #560]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b04:	d10b      	bne.n	8000b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b06:	4b89      	ldr	r3, [pc, #548]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d06c      	beq.n	8000bec <HAL_RCC_OscConfig+0x12c>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d168      	bne.n	8000bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e24c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b26:	d106      	bne.n	8000b36 <HAL_RCC_OscConfig+0x76>
 8000b28:	4b80      	ldr	r3, [pc, #512]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a7f      	ldr	r2, [pc, #508]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e02e      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10c      	bne.n	8000b58 <HAL_RCC_OscConfig+0x98>
 8000b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a7a      	ldr	r2, [pc, #488]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b78      	ldr	r3, [pc, #480]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a77      	ldr	r2, [pc, #476]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e01d      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b60:	d10c      	bne.n	8000b7c <HAL_RCC_OscConfig+0xbc>
 8000b62:	4b72      	ldr	r3, [pc, #456]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a71      	ldr	r2, [pc, #452]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a6e      	ldr	r2, [pc, #440]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e00b      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a6a      	ldr	r2, [pc, #424]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b68      	ldr	r3, [pc, #416]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a67      	ldr	r2, [pc, #412]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d013      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fcf0 	bl	8000580 <HAL_GetTick>
 8000ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	e008      	b.n	8000bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ba4:	f7ff fcec 	bl	8000580 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b64      	cmp	r3, #100	@ 0x64
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e200      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f0      	beq.n	8000ba4 <HAL_RCC_OscConfig+0xe4>
 8000bc2:	e014      	b.n	8000bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fcdc 	bl	8000580 <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bcc:	f7ff fcd8 	bl	8000580 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b64      	cmp	r3, #100	@ 0x64
 8000bd8:	d901      	bls.n	8000bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e1ec      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bde:	4b53      	ldr	r3, [pc, #332]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f0      	bne.n	8000bcc <HAL_RCC_OscConfig+0x10c>
 8000bea:	e000      	b.n	8000bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d063      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00b      	beq.n	8000c1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c06:	4b49      	ldr	r3, [pc, #292]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d11c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x18c>
 8000c12:	4b46      	ldr	r3, [pc, #280]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d116      	bne.n	8000c4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1e:	4b43      	ldr	r3, [pc, #268]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d005      	beq.n	8000c36 <HAL_RCC_OscConfig+0x176>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d001      	beq.n	8000c36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e1c0      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c36:	4b3d      	ldr	r3, [pc, #244]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4939      	ldr	r1, [pc, #228]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	e03a      	b.n	8000cc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d020      	beq.n	8000c96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c54:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <HAL_RCC_OscConfig+0x270>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fc91 	bl	8000580 <HAL_GetTick>
 8000c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c60:	e008      	b.n	8000c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c62:	f7ff fc8d 	bl	8000580 <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e1a1      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c74:	4b2d      	ldr	r3, [pc, #180]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f0      	beq.n	8000c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c80:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4927      	ldr	r1, [pc, #156]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
 8000c94:	e015      	b.n	8000cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <HAL_RCC_OscConfig+0x270>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fc70 	bl	8000580 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fc6c 	bl	8000580 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e180      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d03a      	beq.n	8000d44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d019      	beq.n	8000d0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <HAL_RCC_OscConfig+0x274>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cdc:	f7ff fc50 	bl	8000580 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc4c 	bl	8000580 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e160      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 faea 	bl	80012dc <RCC_Delay>
 8000d08:	e01c      	b.n	8000d44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_RCC_OscConfig+0x274>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d10:	f7ff fc36 	bl	8000580 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d16:	e00f      	b.n	8000d38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc32 	bl	8000580 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d908      	bls.n	8000d38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e146      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	42420000 	.word	0x42420000
 8000d34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d38:	4b92      	ldr	r3, [pc, #584]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1e9      	bne.n	8000d18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80a6 	beq.w	8000e9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d56:	4b8b      	ldr	r3, [pc, #556]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b88      	ldr	r3, [pc, #544]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a87      	ldr	r2, [pc, #540]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b85      	ldr	r3, [pc, #532]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7e:	4b82      	ldr	r3, [pc, #520]	@ (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d118      	bne.n	8000dbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d96:	f7ff fbf3 	bl	8000580 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d9e:	f7ff fbef 	bl	8000580 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b64      	cmp	r3, #100	@ 0x64
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e103      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db0:	4b75      	ldr	r3, [pc, #468]	@ (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d106      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x312>
 8000dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6213      	str	r3, [r2, #32]
 8000dd0:	e02d      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x334>
 8000dda:	4b6a      	ldr	r3, [pc, #424]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4a69      	ldr	r2, [pc, #420]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	6213      	str	r3, [r2, #32]
 8000de6:	4b67      	ldr	r3, [pc, #412]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	4a66      	ldr	r2, [pc, #408]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dec:	f023 0304 	bic.w	r3, r3, #4
 8000df0:	6213      	str	r3, [r2, #32]
 8000df2:	e01c      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d10c      	bne.n	8000e16 <HAL_RCC_OscConfig+0x356>
 8000dfc:	4b61      	ldr	r3, [pc, #388]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	4a60      	ldr	r2, [pc, #384]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6213      	str	r3, [r2, #32]
 8000e08:	4b5e      	ldr	r3, [pc, #376]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6213      	str	r3, [r2, #32]
 8000e14:	e00b      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000e16:	4b5b      	ldr	r3, [pc, #364]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	4a5a      	ldr	r2, [pc, #360]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6213      	str	r3, [r2, #32]
 8000e22:	4b58      	ldr	r3, [pc, #352]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	4a57      	ldr	r2, [pc, #348]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	f023 0304 	bic.w	r3, r3, #4
 8000e2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d015      	beq.n	8000e62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e36:	f7ff fba3 	bl	8000580 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	e00a      	b.n	8000e54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e3e:	f7ff fb9f 	bl	8000580 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e0b1      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	4b4b      	ldr	r3, [pc, #300]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0ee      	beq.n	8000e3e <HAL_RCC_OscConfig+0x37e>
 8000e60:	e014      	b.n	8000e8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fb8d 	bl	8000580 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fb89 	bl	8000580 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e09b      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e80:	4b40      	ldr	r3, [pc, #256]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1ee      	bne.n	8000e6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d105      	bne.n	8000e9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e92:	4b3c      	ldr	r3, [pc, #240]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a3b      	ldr	r2, [pc, #236]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8087 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea8:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d061      	beq.n	8000f78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d146      	bne.n	8000f4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ebc:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fb5d 	bl	8000580 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eca:	f7ff fb59 	bl	8000580 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e06d      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000edc:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f0      	bne.n	8000eca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef0:	d108      	bne.n	8000f04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ef2:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4921      	ldr	r1, [pc, #132]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f04:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a19      	ldr	r1, [r3, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f14:	430b      	orrs	r3, r1
 8000f16:	491b      	ldr	r1, [pc, #108]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb2d 	bl	8000580 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2a:	f7ff fb29 	bl	8000580 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e03d      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x46a>
 8000f48:	e035      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fb16 	bl	8000580 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff fb12 	bl	8000580 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e026      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x498>
 8000f76:	e01e      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d107      	bne.n	8000f90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e019      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40007000 	.word	0x40007000
 8000f8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f90:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <HAL_RCC_OscConfig+0x500>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0d0      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d910      	bls.n	8001008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	4b67      	ldr	r3, [pc, #412]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 0207 	bic.w	r2, r3, #7
 8000fee:	4965      	ldr	r1, [pc, #404]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d001      	beq.n	8001008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0b8      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d020      	beq.n	8001056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001020:	4b59      	ldr	r3, [pc, #356]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a58      	ldr	r2, [pc, #352]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800102a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001038:	4b53      	ldr	r3, [pc, #332]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a52      	ldr	r2, [pc, #328]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001044:	4b50      	ldr	r3, [pc, #320]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	494d      	ldr	r1, [pc, #308]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d040      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b47      	ldr	r3, [pc, #284]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d115      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e07f      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d107      	bne.n	8001092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001082:	4b41      	ldr	r3, [pc, #260]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e073      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001092:	4b3d      	ldr	r3, [pc, #244]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e06b      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a2:	4b39      	ldr	r3, [pc, #228]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f023 0203 	bic.w	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4936      	ldr	r1, [pc, #216]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b4:	f7ff fa64 	bl	8000580 <HAL_GetTick>
 80010b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ba:	e00a      	b.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010bc:	f7ff fa60 	bl	8000580 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e053      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 020c 	and.w	r2, r3, #12
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d1eb      	bne.n	80010bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d210      	bcs.n	8001114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 0207 	bic.w	r2, r3, #7
 80010fa:	4922      	ldr	r1, [pc, #136]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e032      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4916      	ldr	r1, [pc, #88]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	490e      	ldr	r1, [pc, #56]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001152:	f000 f821 	bl	8001198 <HAL_RCC_GetSysClockFreq>
 8001156:	4602      	mov	r2, r0
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	490a      	ldr	r1, [pc, #40]	@ (800118c <HAL_RCC_ClockConfig+0x1c8>)
 8001164:	5ccb      	ldrb	r3, [r1, r3]
 8001166:	fa22 f303 	lsr.w	r3, r2, r3
 800116a:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <HAL_RCC_ClockConfig+0x1cc>)
 800116c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_RCC_ClockConfig+0x1d0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f91a 	bl	80003ac <HAL_InitTick>

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000
 8001188:	40021000 	.word	0x40021000
 800118c:	08004360 	.word	0x08004360
 8001190:	20000000 	.word	0x20000000
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <HAL_RCC_GetSysClockFreq+0x94>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d002      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x30>
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d003      	beq.n	80011ce <HAL_RCC_GetSysClockFreq+0x36>
 80011c6:	e027      	b.n	8001218 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x98>)
 80011ca:	613b      	str	r3, [r7, #16]
      break;
 80011cc:	e027      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d010      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_RCC_GetSysClockFreq+0x94>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	0c5b      	lsrs	r3, r3, #17
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	4a11      	ldr	r2, [pc, #68]	@ (8001238 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x98>)
 80011fa:	fb03 f202 	mul.w	r2, r3, r2
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	fbb2 f3f3 	udiv	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e004      	b.n	8001212 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a0c      	ldr	r2, [pc, #48]	@ (800123c <HAL_RCC_GetSysClockFreq+0xa4>)
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	613b      	str	r3, [r7, #16]
      break;
 8001216:	e002      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_RCC_GetSysClockFreq+0x98>)
 800121a:	613b      	str	r3, [r7, #16]
      break;
 800121c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800121e:	693b      	ldr	r3, [r7, #16]
}
 8001220:	4618      	mov	r0, r3
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	007a1200 	.word	0x007a1200
 8001234:	08004378 	.word	0x08004378
 8001238:	08004388 	.word	0x08004388
 800123c:	003d0900 	.word	0x003d0900

08001240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001244:	4b02      	ldr	r3, [pc, #8]	@ (8001250 <HAL_RCC_GetHCLKFreq+0x10>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	20000000 	.word	0x20000000

08001254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001258:	f7ff fff2 	bl	8001240 <HAL_RCC_GetHCLKFreq>
 800125c:	4602      	mov	r2, r0
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	0adb      	lsrs	r3, r3, #11
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	4903      	ldr	r1, [pc, #12]	@ (8001278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800126a:	5ccb      	ldrb	r3, [r1, r3]
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	08004370 	.word	0x08004370

0800127c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	220f      	movs	r2, #15
 800128a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_RCC_GetClockConfig+0x58>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_RCC_GetClockConfig+0x58>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_RCC_GetClockConfig+0x58>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <HAL_RCC_GetClockConfig+0x58>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_RCC_GetClockConfig+0x5c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0207 	and.w	r2, r3, #7
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40022000 	.word	0x40022000

080012dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <RCC_Delay+0x34>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <RCC_Delay+0x38>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0a5b      	lsrs	r3, r3, #9
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012f8:	bf00      	nop
  }
  while (Delay --);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	60fa      	str	r2, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f9      	bne.n	80012f8 <RCC_Delay+0x1c>
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000000 	.word	0x20000000
 8001314:	10624dd3 	.word	0x10624dd3

08001318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e041      	b.n	80013ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f839 	bl	80013b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3304      	adds	r3, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4610      	mov	r0, r2
 8001358:	f000 f99c 	bl	8001694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d001      	beq.n	80013e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e03a      	b.n	8001456 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <HAL_TIM_Base_Start_IT+0x98>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00e      	beq.n	8001420 <HAL_TIM_Base_Start_IT+0x58>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800140a:	d009      	beq.n	8001420 <HAL_TIM_Base_Start_IT+0x58>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <HAL_TIM_Base_Start_IT+0x9c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d004      	beq.n	8001420 <HAL_TIM_Base_Start_IT+0x58>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <HAL_TIM_Base_Start_IT+0xa0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d111      	bne.n	8001444 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b06      	cmp	r3, #6
 8001430:	d010      	beq.n	8001454 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001442:	e007      	b.n	8001454 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40012c00 	.word	0x40012c00
 8001464:	40000400 	.word	0x40000400
 8001468:	40000800 	.word	0x40000800

0800146c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d020      	beq.n	80014d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01b      	beq.n	80014d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f06f 0202 	mvn.w	r2, #2
 80014a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f8d1 	bl	800165e <HAL_TIM_IC_CaptureCallback>
 80014bc:	e005      	b.n	80014ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f8c4 	bl	800164c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f8d3 	bl	8001670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d020      	beq.n	800151c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01b      	beq.n	800151c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f06f 0204 	mvn.w	r2, #4
 80014ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2202      	movs	r2, #2
 80014f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f8ab 	bl	800165e <HAL_TIM_IC_CaptureCallback>
 8001508:	e005      	b.n	8001516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f89e 	bl	800164c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f8ad 	bl	8001670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d020      	beq.n	8001568 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d01b      	beq.n	8001568 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f06f 0208 	mvn.w	r2, #8
 8001538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2204      	movs	r2, #4
 800153e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f885 	bl	800165e <HAL_TIM_IC_CaptureCallback>
 8001554:	e005      	b.n	8001562 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f878 	bl	800164c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f887 	bl	8001670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	d020      	beq.n	80015b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01b      	beq.n	80015b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f06f 0210 	mvn.w	r2, #16
 8001584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2208      	movs	r2, #8
 800158a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f85f 	bl	800165e <HAL_TIM_IC_CaptureCallback>
 80015a0:	e005      	b.n	80015ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f852 	bl	800164c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f861 	bl	8001670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00c      	beq.n	80015d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d007      	beq.n	80015d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f06f 0201 	mvn.w	r2, #1
 80015d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7fe fe9a 	bl	800030c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00c      	beq.n	80015fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80015f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f8c3 	bl	8001782 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00c      	beq.n	8001620 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f831 	bl	8001682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	f003 0320 	and.w	r3, r3, #32
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00c      	beq.n	8001644 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f06f 0220 	mvn.w	r2, #32
 800163c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f896 	bl	8001770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001764 <TIM_Base_SetConfig+0xd0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00b      	beq.n	80016c4 <TIM_Base_SetConfig+0x30>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b2:	d007      	beq.n	80016c4 <TIM_Base_SetConfig+0x30>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001768 <TIM_Base_SetConfig+0xd4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d003      	beq.n	80016c4 <TIM_Base_SetConfig+0x30>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a2b      	ldr	r2, [pc, #172]	@ (800176c <TIM_Base_SetConfig+0xd8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d108      	bne.n	80016d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a22      	ldr	r2, [pc, #136]	@ (8001764 <TIM_Base_SetConfig+0xd0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00b      	beq.n	80016f6 <TIM_Base_SetConfig+0x62>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016e4:	d007      	beq.n	80016f6 <TIM_Base_SetConfig+0x62>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <TIM_Base_SetConfig+0xd4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d003      	beq.n	80016f6 <TIM_Base_SetConfig+0x62>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a1e      	ldr	r2, [pc, #120]	@ (800176c <TIM_Base_SetConfig+0xd8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d108      	bne.n	8001708 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <TIM_Base_SetConfig+0xd0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d103      	bne.n	800173c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f023 0201 	bic.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
  }
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40012c00 	.word	0x40012c00
 8001768:	40000400 	.word	0x40000400
 800176c:	40000800 	.word	0x40000800

08001770 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <__NVIC_SetPriority>:
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	@ (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	@ (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <SysTick_Handler+0x1c>)
 80017ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80017f0:	f001 fd0c 	bl	800320c <xTaskGetSchedulerState>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d001      	beq.n	80017fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80017fa:	f002 faad 	bl	8003d58 <xPortSysTickHandler>
  }
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800180c:	2100      	movs	r1, #0
 800180e:	f06f 0004 	mvn.w	r0, #4
 8001812:	f7ff ffbf 	bl	8001794 <__NVIC_SetPriority>
#endif
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001822:	f3ef 8305 	mrs	r3, IPSR
 8001826:	603b      	str	r3, [r7, #0]
  return(result);
 8001828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800182e:	f06f 0305 	mvn.w	r3, #5
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	e00c      	b.n	8001850 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <osKernelInitialize+0x40>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <osKernelInitialize+0x40>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	e002      	b.n	8001850 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800184e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000084 	.word	0x20000084

08001860 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001866:	f3ef 8305 	mrs	r3, IPSR
 800186a:	603b      	str	r3, [r7, #0]
  return(result);
 800186c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001872:	f06f 0305 	mvn.w	r3, #5
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	e010      	b.n	800189c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <osKernelStart+0x48>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d109      	bne.n	8001896 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001882:	f7ff ffc1 	bl	8001808 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <osKernelStart+0x48>)
 8001888:	2202      	movs	r2, #2
 800188a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800188c:	f001 f872 	bl	8002974 <vTaskStartScheduler>
      stat = osOK;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	e002      	b.n	800189c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800189a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000084 	.word	0x20000084

080018ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	@ 0x38
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018bc:	f3ef 8305 	mrs	r3, IPSR
 80018c0:	617b      	str	r3, [r7, #20]
  return(result);
 80018c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d17e      	bne.n	80019c6 <osThreadNew+0x11a>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d07b      	beq.n	80019c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80018ce:	2380      	movs	r3, #128	@ 0x80
 80018d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80018d2:	2318      	movs	r3, #24
 80018d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d045      	beq.n	8001972 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <osThreadNew+0x48>
        name = attr->name;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <osThreadNew+0x6e>
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b38      	cmp	r3, #56	@ 0x38
 800190c:	d805      	bhi.n	800191a <osThreadNew+0x6e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <osThreadNew+0x72>
        return (NULL);
 800191a:	2300      	movs	r3, #0
 800191c:	e054      	b.n	80019c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00e      	beq.n	8001954 <osThreadNew+0xa8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b5b      	cmp	r3, #91	@ 0x5b
 800193c:	d90a      	bls.n	8001954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <osThreadNew+0xa8>
        mem = 1;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	e010      	b.n	8001976 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10c      	bne.n	8001976 <osThreadNew+0xca>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d108      	bne.n	8001976 <osThreadNew+0xca>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d104      	bne.n	8001976 <osThreadNew+0xca>
          mem = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	e001      	b.n	8001976 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d110      	bne.n	800199e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001984:	9202      	str	r2, [sp, #8]
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	6a3a      	ldr	r2, [r7, #32]
 8001990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fe12 	bl	80025bc <xTaskCreateStatic>
 8001998:	4603      	mov	r3, r0
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	e013      	b.n	80019c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d110      	bne.n	80019c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fe60 	bl	800267c <xTaskCreate>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <osThreadNew+0x11a>
            hTask = NULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80019c6:	693b      	ldr	r3, [r7, #16]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3728      	adds	r7, #40	@ 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019d8:	f3ef 8305 	mrs	r3, IPSR
 80019dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80019de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <osDelay+0x1c>
    stat = osErrorISR;
 80019e4:	f06f 0305 	mvn.w	r3, #5
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e007      	b.n	80019fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 ff86 	bl	8002908 <vTaskDelay>
    }
  }

  return (stat);
 80019fc:	68fb      	ldr	r3, [r7, #12]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4a06      	ldr	r2, [pc, #24]	@ (8001a30 <vApplicationGetIdleTaskMemory+0x28>)
 8001a18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2280      	movs	r2, #128	@ 0x80
 8001a24:	601a      	str	r2, [r3, #0]
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000088 	.word	0x20000088
 8001a34:	200000e4 	.word	0x200000e4

08001a38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <vApplicationGetTimerTaskMemory+0x2c>)
 8001a48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <vApplicationGetTimerTaskMemory+0x30>)
 8001a4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a56:	601a      	str	r2, [r3, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200002e4 	.word	0x200002e4
 8001a68:	20000340 	.word	0x20000340

08001a6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f103 0208 	add.w	r2, r3, #8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f103 0208 	add.w	r2, r3, #8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f103 0208 	add.w	r2, r3, #8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b1e:	d103      	bne.n	8001b28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e00c      	b.n	8001b42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	e002      	b.n	8001b36 <vListInsert+0x2e>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d2f6      	bcs.n	8001b30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6892      	ldr	r2, [r2, #8]
 8001b8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6852      	ldr	r2, [r2, #4]
 8001b98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d103      	bne.n	8001bac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
	...

08001bcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10b      	bne.n	8001bf8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001be4:	f383 8811 	msr	BASEPRI, r3
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001bf8:	f002 f830 	bl	8003c5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	441a      	add	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	441a      	add	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	22ff      	movs	r2, #255	@ 0xff
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	22ff      	movs	r2, #255	@ 0xff
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d114      	bne.n	8001c78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01a      	beq.n	8001c8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3310      	adds	r3, #16
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 f916 	bl	8002e8c <xTaskRemoveFromEventList>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c66:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <xQueueGenericReset+0xd0>)
 8001c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	f3bf 8f6f 	isb	sy
 8001c76:	e009      	b.n	8001c8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fef5 	bl	8001a6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3324      	adds	r3, #36	@ 0x24
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fef0 	bl	8001a6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c8c:	f002 f816 	bl	8003cbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c90:	2301      	movs	r3, #1
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	e000ed04 	.word	0xe000ed04

08001ca0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	@ 0x38
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10b      	bne.n	8001ccc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	e7fd      	b.n	8001ce6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <xQueueGenericCreateStatic+0x56>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <xQueueGenericCreateStatic+0x5a>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <xQueueGenericCreateStatic+0x5c>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	623b      	str	r3, [r7, #32]
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d102      	bne.n	8001d24 <xQueueGenericCreateStatic+0x84>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <xQueueGenericCreateStatic+0x88>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <xQueueGenericCreateStatic+0x8a>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10b      	bne.n	8001d46 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d32:	f383 8811 	msr	BASEPRI, r3
 8001d36:	f3bf 8f6f 	isb	sy
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	61fb      	str	r3, [r7, #28]
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	e7fd      	b.n	8001d42 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d46:	2350      	movs	r3, #80	@ 0x50
 8001d48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b50      	cmp	r3, #80	@ 0x50
 8001d4e:	d00b      	beq.n	8001d68 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	61bb      	str	r3, [r7, #24]
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001d68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00d      	beq.n	8001d90 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d7c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f805 	bl	8001d9a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3730      	adds	r7, #48	@ 0x30
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e002      	b.n	8001dbc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001dc8:	2101      	movs	r1, #1
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	f7ff fefe 	bl	8001bcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08e      	sub	sp, #56	@ 0x38
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001dee:	2300      	movs	r3, #0
 8001df0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10b      	bne.n	8001e14 <xQueueGenericSend+0x34>
	__asm volatile
 8001dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e00:	f383 8811 	msr	BASEPRI, r3
 8001e04:	f3bf 8f6f 	isb	sy
 8001e08:	f3bf 8f4f 	dsb	sy
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <xQueueGenericSend+0x42>
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <xQueueGenericSend+0x46>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <xQueueGenericSend+0x48>
 8001e26:	2300      	movs	r3, #0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <xQueueGenericSend+0x64>
	__asm volatile
 8001e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e30:	f383 8811 	msr	BASEPRI, r3
 8001e34:	f3bf 8f6f 	isb	sy
 8001e38:	f3bf 8f4f 	dsb	sy
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d103      	bne.n	8001e52 <xQueueGenericSend+0x72>
 8001e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <xQueueGenericSend+0x76>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <xQueueGenericSend+0x78>
 8001e56:	2300      	movs	r3, #0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10b      	bne.n	8001e74 <xQueueGenericSend+0x94>
	__asm volatile
 8001e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e60:	f383 8811 	msr	BASEPRI, r3
 8001e64:	f3bf 8f6f 	isb	sy
 8001e68:	f3bf 8f4f 	dsb	sy
 8001e6c:	623b      	str	r3, [r7, #32]
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e74:	f001 f9ca 	bl	800320c <xTaskGetSchedulerState>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <xQueueGenericSend+0xa4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <xQueueGenericSend+0xa8>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <xQueueGenericSend+0xaa>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10b      	bne.n	8001ea6 <xQueueGenericSend+0xc6>
	__asm volatile
 8001e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e92:	f383 8811 	msr	BASEPRI, r3
 8001e96:	f3bf 8f6f 	isb	sy
 8001e9a:	f3bf 8f4f 	dsb	sy
 8001e9e:	61fb      	str	r3, [r7, #28]
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	e7fd      	b.n	8001ea2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ea6:	f001 fed9 	bl	8003c5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d302      	bcc.n	8001ebc <xQueueGenericSend+0xdc>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d129      	bne.n	8001f10 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ec2:	f000 fa0f 	bl	80022e4 <prvCopyDataToQueue>
 8001ec6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d010      	beq.n	8001ef2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed2:	3324      	adds	r3, #36	@ 0x24
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 ffd9 	bl	8002e8c <xTaskRemoveFromEventList>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe0 <xQueueGenericSend+0x200>)
 8001ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	e00a      	b.n	8001f08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ef8:	4b39      	ldr	r3, [pc, #228]	@ (8001fe0 <xQueueGenericSend+0x200>)
 8001efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f08:	f001 fed8 	bl	8003cbc <vPortExitCritical>
				return pdPASS;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e063      	b.n	8001fd8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f16:	f001 fed1 	bl	8003cbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e05c      	b.n	8001fd8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 f813 	bl	8002f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f32:	f001 fec3 	bl	8003cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f36:	f000 fd85 	bl	8002a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f3a:	f001 fe8f 	bl	8003c5c <vPortEnterCritical>
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f4a:	d103      	bne.n	8001f54 <xQueueGenericSend+0x174>
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f5a:	b25b      	sxtb	r3, r3
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f60:	d103      	bne.n	8001f6a <xQueueGenericSend+0x18a>
 8001f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f6a:	f001 fea7 	bl	8003cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f6e:	1d3a      	adds	r2, r7, #4
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 f802 	bl	8002f80 <xTaskCheckForTimeOut>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d124      	bne.n	8001fcc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f84:	f000 faa6 	bl	80024d4 <prvIsQueueFull>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d018      	beq.n	8001fc0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f90:	3310      	adds	r3, #16
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 ff26 	bl	8002de8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f9e:	f000 fa31 	bl	8002404 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001fa2:	f000 fd5d 	bl	8002a60 <xTaskResumeAll>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f af7c 	bne.w	8001ea6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <xQueueGenericSend+0x200>)
 8001fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f3bf 8f4f 	dsb	sy
 8001fba:	f3bf 8f6f 	isb	sy
 8001fbe:	e772      	b.n	8001ea6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fc2:	f000 fa1f 	bl	8002404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001fc6:	f000 fd4b 	bl	8002a60 <xTaskResumeAll>
 8001fca:	e76c      	b.n	8001ea6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001fcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fce:	f000 fa19 	bl	8002404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001fd2:	f000 fd45 	bl	8002a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001fd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3738      	adds	r7, #56	@ 0x38
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	e000ed04 	.word	0xe000ed04

08001fe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b090      	sub	sp, #64	@ 0x40
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800200e:	bf00      	nop
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <xQueueGenericSendFromISR+0x3e>
 800201a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <xQueueGenericSendFromISR+0x42>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <xQueueGenericSendFromISR+0x44>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d103      	bne.n	8002052 <xQueueGenericSendFromISR+0x6e>
 800204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <xQueueGenericSendFromISR+0x72>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <xQueueGenericSendFromISR+0x74>
 8002056:	2300      	movs	r3, #0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10b      	bne.n	8002074 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800205c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002060:	f383 8811 	msr	BASEPRI, r3
 8002064:	f3bf 8f6f 	isb	sy
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	623b      	str	r3, [r7, #32]
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002074:	f001 feb4 	bl	8003de0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002078:	f3ef 8211 	mrs	r2, BASEPRI
 800207c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	61fa      	str	r2, [r7, #28]
 800208e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002090:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209c:	429a      	cmp	r2, r3
 800209e:	d302      	bcc.n	80020a6 <xQueueGenericSendFromISR+0xc2>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d12f      	bne.n	8002106 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80020a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80020bc:	f000 f912 	bl	80022e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80020c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020c8:	d112      	bne.n	80020f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d016      	beq.n	8002100 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d4:	3324      	adds	r3, #36	@ 0x24
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fed8 	bl	8002e8c <xTaskRemoveFromEventList>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00e      	beq.n	8002100 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00b      	beq.n	8002100 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e007      	b.n	8002100 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80020f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020f4:	3301      	adds	r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	b25a      	sxtb	r2, r3
 80020fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002100:	2301      	movs	r3, #1
 8002102:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002104:	e001      	b.n	800210a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002106:	2300      	movs	r3, #0
 8002108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800210a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800210c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002114:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002118:	4618      	mov	r0, r3
 800211a:	3740      	adds	r7, #64	@ 0x40
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	@ 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10b      	bne.n	8002152 <xQueueReceive+0x32>
	__asm volatile
 800213a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800213e:	f383 8811 	msr	BASEPRI, r3
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	623b      	str	r3, [r7, #32]
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	e7fd      	b.n	800214e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d103      	bne.n	8002160 <xQueueReceive+0x40>
 8002158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <xQueueReceive+0x44>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <xQueueReceive+0x46>
 8002164:	2300      	movs	r3, #0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10b      	bne.n	8002182 <xQueueReceive+0x62>
	__asm volatile
 800216a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	f3bf 8f4f 	dsb	sy
 800217a:	61fb      	str	r3, [r7, #28]
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	e7fd      	b.n	800217e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002182:	f001 f843 	bl	800320c <xTaskGetSchedulerState>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <xQueueReceive+0x72>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <xQueueReceive+0x76>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <xQueueReceive+0x78>
 8002196:	2300      	movs	r3, #0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10b      	bne.n	80021b4 <xQueueReceive+0x94>
	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	61bb      	str	r3, [r7, #24]
}
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021b4:	f001 fd52 	bl	8003c5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01f      	beq.n	8002204 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021c8:	f000 f8f6 	bl	80023b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	1e5a      	subs	r2, r3, #1
 80021d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00f      	beq.n	80021fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021de:	3310      	adds	r3, #16
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fe53 	bl	8002e8c <xTaskRemoveFromEventList>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80021ec:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <xQueueReceive+0x1c0>)
 80021ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80021fc:	f001 fd5e 	bl	8003cbc <vPortExitCritical>
				return pdPASS;
 8002200:	2301      	movs	r3, #1
 8002202:	e069      	b.n	80022d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800220a:	f001 fd57 	bl	8003cbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800220e:	2300      	movs	r3, #0
 8002210:	e062      	b.n	80022d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d106      	bne.n	8002226 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fe99 	bl	8002f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002222:	2301      	movs	r3, #1
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002226:	f001 fd49 	bl	8003cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800222a:	f000 fc0b 	bl	8002a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800222e:	f001 fd15 	bl	8003c5c <vPortEnterCritical>
 8002232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002234:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002238:	b25b      	sxtb	r3, r3
 800223a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800223e:	d103      	bne.n	8002248 <xQueueReceive+0x128>
 8002240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800224e:	b25b      	sxtb	r3, r3
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002254:	d103      	bne.n	800225e <xQueueReceive+0x13e>
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800225e:	f001 fd2d 	bl	8003cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002262:	1d3a      	adds	r2, r7, #4
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fe88 	bl	8002f80 <xTaskCheckForTimeOut>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d123      	bne.n	80022be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002276:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002278:	f000 f916 	bl	80024a8 <prvIsQueueEmpty>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d017      	beq.n	80022b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002284:	3324      	adds	r3, #36	@ 0x24
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fdac 	bl	8002de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002292:	f000 f8b7 	bl	8002404 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002296:	f000 fbe3 	bl	8002a60 <xTaskResumeAll>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d189      	bne.n	80021b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80022a0:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <xQueueReceive+0x1c0>)
 80022a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	e780      	b.n	80021b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80022b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022b4:	f000 f8a6 	bl	8002404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022b8:	f000 fbd2 	bl	8002a60 <xTaskResumeAll>
 80022bc:	e77a      	b.n	80021b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80022be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022c0:	f000 f8a0 	bl	8002404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022c4:	f000 fbcc 	bl	8002a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022ca:	f000 f8ed 	bl	80024a8 <prvIsQueueEmpty>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f43f af6f 	beq.w	80021b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80022d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3730      	adds	r7, #48	@ 0x30
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	e000ed04 	.word	0xe000ed04

080022e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d14d      	bne.n	80023a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 ff9a 	bl	8003248 <xTaskPriorityDisinherit>
 8002314:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	e043      	b.n	80023a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d119      	bne.n	8002358 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6858      	ldr	r0, [r3, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	461a      	mov	r2, r3
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	f001 ffae 	bl	8004290 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	441a      	add	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	d32b      	bcc.n	80023a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	e026      	b.n	80023a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68d8      	ldr	r0, [r3, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	461a      	mov	r2, r3
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	f001 ff94 	bl	8004290 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	425b      	negs	r3, r3
 8002372:	441a      	add	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d207      	bcs.n	8002394 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	425b      	negs	r3, r3
 800238e:	441a      	add	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d105      	bne.n	80023a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80023ae:	697b      	ldr	r3, [r7, #20]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d018      	beq.n	80023fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	441a      	add	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d303      	bcc.n	80023ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68d9      	ldr	r1, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	461a      	mov	r2, r3
 80023f6:	6838      	ldr	r0, [r7, #0]
 80023f8:	f001 ff4a 	bl	8004290 <memcpy>
	}
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800240c:	f001 fc26 	bl	8003c5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002416:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002418:	e011      	b.n	800243e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d012      	beq.n	8002448 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3324      	adds	r3, #36	@ 0x24
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fd30 	bl	8002e8c <xTaskRemoveFromEventList>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002432:	f000 fe09 	bl	8003048 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	3b01      	subs	r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	dce9      	bgt.n	800241a <prvUnlockQueue+0x16>
 8002446:	e000      	b.n	800244a <prvUnlockQueue+0x46>
					break;
 8002448:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	22ff      	movs	r2, #255	@ 0xff
 800244e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002452:	f001 fc33 	bl	8003cbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002456:	f001 fc01 	bl	8003c5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002460:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002462:	e011      	b.n	8002488 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3310      	adds	r3, #16
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fd0b 	bl	8002e8c <xTaskRemoveFromEventList>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800247c:	f000 fde4 	bl	8003048 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002480:	7bbb      	ldrb	r3, [r7, #14]
 8002482:	3b01      	subs	r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800248c:	2b00      	cmp	r3, #0
 800248e:	dce9      	bgt.n	8002464 <prvUnlockQueue+0x60>
 8002490:	e000      	b.n	8002494 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002492:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	22ff      	movs	r2, #255	@ 0xff
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800249c:	f001 fc0e 	bl	8003cbc <vPortExitCritical>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024b0:	f001 fbd4 	bl	8003c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80024bc:	2301      	movs	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e001      	b.n	80024c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024c6:	f001 fbf9 	bl	8003cbc <vPortExitCritical>

	return xReturn;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024dc:	f001 fbbe 	bl	8003c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d102      	bne.n	80024f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e001      	b.n	80024f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024f6:	f001 fbe1 	bl	8003cbc <vPortExitCritical>

	return xReturn;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e014      	b.n	800253e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002514:	4a0e      	ldr	r2, [pc, #56]	@ (8002550 <vQueueAddToRegistry+0x4c>)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002520:	490b      	ldr	r1, [pc, #44]	@ (8002550 <vQueueAddToRegistry+0x4c>)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800252a:	4a09      	ldr	r2, [pc, #36]	@ (8002550 <vQueueAddToRegistry+0x4c>)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002536:	e006      	b.n	8002546 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b07      	cmp	r3, #7
 8002542:	d9e7      	bls.n	8002514 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	20000740 	.word	0x20000740

08002554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002564:	f001 fb7a 	bl	8003c5c <vPortEnterCritical>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800256e:	b25b      	sxtb	r3, r3
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002574:	d103      	bne.n	800257e <vQueueWaitForMessageRestricted+0x2a>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002584:	b25b      	sxtb	r3, r3
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800258a:	d103      	bne.n	8002594 <vQueueWaitForMessageRestricted+0x40>
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002594:	f001 fb92 	bl	8003cbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3324      	adds	r3, #36	@ 0x24
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fc43 	bl	8002e34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff28 	bl	8002404 <prvUnlockQueue>
	}
 80025b4:	bf00      	nop
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	@ 0x38
 80025c0:	af04      	add	r7, sp, #16
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80025ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	623b      	str	r3, [r7, #32]
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80025e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <xTaskCreateStatic+0x4a>
	__asm volatile
 80025ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	61fb      	str	r3, [r7, #28]
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	e7fd      	b.n	8002602 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002606:	235c      	movs	r3, #92	@ 0x5c
 8002608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b5c      	cmp	r3, #92	@ 0x5c
 800260e:	d00b      	beq.n	8002628 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	61bb      	str	r3, [r7, #24]
}
 8002622:	bf00      	nop
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800262a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01e      	beq.n	800266e <xTaskCreateStatic+0xb2>
 8002630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01b      	beq.n	800266e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	2202      	movs	r2, #2
 8002644:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002648:	2300      	movs	r3, #0
 800264a:	9303      	str	r3, [sp, #12]
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	9302      	str	r3, [sp, #8]
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f850 	bl	8002706 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002668:	f000 f8de 	bl	8002828 <prvAddNewTaskToReadyList>
 800266c:	e001      	b.n	8002672 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002672:	697b      	ldr	r3, [r7, #20]
	}
 8002674:	4618      	mov	r0, r3
 8002676:	3728      	adds	r7, #40	@ 0x28
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08c      	sub	sp, #48	@ 0x30
 8002680:	af04      	add	r7, sp, #16
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4618      	mov	r0, r3
 8002692:	f001 fbe5 	bl	8003e60 <pvPortMalloc>
 8002696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00e      	beq.n	80026bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800269e:	205c      	movs	r0, #92	@ 0x5c
 80026a0:	f001 fbde 	bl	8003e60 <pvPortMalloc>
 80026a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80026b2:	e005      	b.n	80026c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80026b4:	6978      	ldr	r0, [r7, #20]
 80026b6:	f001 fca1 	bl	8003ffc <vPortFree>
 80026ba:	e001      	b.n	80026c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d017      	beq.n	80026f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	2300      	movs	r3, #0
 80026d2:	9303      	str	r3, [sp, #12]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f80e 	bl	8002706 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026ea:	69f8      	ldr	r0, [r7, #28]
 80026ec:	f000 f89c 	bl	8002828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026f0:	2301      	movs	r3, #1
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	e002      	b.n	80026fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026fc:	69bb      	ldr	r3, [r7, #24]
	}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b088      	sub	sp, #32
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002716:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	461a      	mov	r2, r3
 800271e:	21a5      	movs	r1, #165	@ 0xa5
 8002720:	f001 fd8a 	bl	8004238 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800272e:	3b01      	subs	r3, #1
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f023 0307 	bic.w	r3, r3, #7
 800273c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	617b      	str	r3, [r7, #20]
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01f      	beq.n	80027a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e012      	b.n	8002792 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	7819      	ldrb	r1, [r3, #0]
 8002774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	3334      	adds	r3, #52	@ 0x34
 800277c:	460a      	mov	r2, r1
 800277e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	4413      	add	r3, r2
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d006      	beq.n	800279a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	3301      	adds	r3, #1
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d9e9      	bls.n	800276c <prvInitialiseNewTask+0x66>
 8002798:	e000      	b.n	800279c <prvInitialiseNewTask+0x96>
			{
				break;
 800279a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027a4:	e003      	b.n	80027ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	2b37      	cmp	r3, #55	@ 0x37
 80027b2:	d901      	bls.n	80027b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027b4:	2337      	movs	r3, #55	@ 0x37
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80027be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80027c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c6:	2200      	movs	r2, #0
 80027c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027cc:	3304      	adds	r3, #4
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f96b 	bl	8001aaa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d6:	3318      	adds	r3, #24
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff f966 	bl	8001aaa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80027ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f6:	2200      	movs	r2, #0
 80027f8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	69b8      	ldr	r0, [r7, #24]
 8002808:	f001 f93a 	bl	8003a80 <pxPortInitialiseStack>
 800280c:	4602      	mov	r2, r0
 800280e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002810:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800281c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800281e:	bf00      	nop
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002830:	f001 fa14 	bl	8003c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002834:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <prvAddNewTaskToReadyList+0xc4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	4a2c      	ldr	r2, [pc, #176]	@ (80028ec <prvAddNewTaskToReadyList+0xc4>)
 800283c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800283e:	4b2c      	ldr	r3, [pc, #176]	@ (80028f0 <prvAddNewTaskToReadyList+0xc8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002846:	4a2a      	ldr	r2, [pc, #168]	@ (80028f0 <prvAddNewTaskToReadyList+0xc8>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800284c:	4b27      	ldr	r3, [pc, #156]	@ (80028ec <prvAddNewTaskToReadyList+0xc4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d110      	bne.n	8002876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002854:	f000 fc1c 	bl	8003090 <prvInitialiseTaskLists>
 8002858:	e00d      	b.n	8002876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800285a:	4b26      	ldr	r3, [pc, #152]	@ (80028f4 <prvAddNewTaskToReadyList+0xcc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002862:	4b23      	ldr	r3, [pc, #140]	@ (80028f0 <prvAddNewTaskToReadyList+0xc8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286c:	429a      	cmp	r2, r3
 800286e:	d802      	bhi.n	8002876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002870:	4a1f      	ldr	r2, [pc, #124]	@ (80028f0 <prvAddNewTaskToReadyList+0xc8>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <prvAddNewTaskToReadyList+0xd0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3301      	adds	r3, #1
 800287c:	4a1e      	ldr	r2, [pc, #120]	@ (80028f8 <prvAddNewTaskToReadyList+0xd0>)
 800287e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002880:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <prvAddNewTaskToReadyList+0xd0>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288c:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <prvAddNewTaskToReadyList+0xd4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d903      	bls.n	800289c <prvAddNewTaskToReadyList+0x74>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	4a18      	ldr	r2, [pc, #96]	@ (80028fc <prvAddNewTaskToReadyList+0xd4>)
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4a15      	ldr	r2, [pc, #84]	@ (8002900 <prvAddNewTaskToReadyList+0xd8>)
 80028aa:	441a      	add	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f7ff f905 	bl	8001ac2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80028b8:	f001 fa00 	bl	8003cbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80028bc:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <prvAddNewTaskToReadyList+0xcc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028c4:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <prvAddNewTaskToReadyList+0xc8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d207      	bcs.n	80028e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80028d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <prvAddNewTaskToReadyList+0xdc>)
 80028d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000c54 	.word	0x20000c54
 80028f0:	20000780 	.word	0x20000780
 80028f4:	20000c60 	.word	0x20000c60
 80028f8:	20000c70 	.word	0x20000c70
 80028fc:	20000c5c 	.word	0x20000c5c
 8002900:	20000784 	.word	0x20000784
 8002904:	e000ed04 	.word	0xe000ed04

08002908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d018      	beq.n	800294c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800291a:	4b14      	ldr	r3, [pc, #80]	@ (800296c <vTaskDelay+0x64>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <vTaskDelay+0x32>
	__asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	60bb      	str	r3, [r7, #8]
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	e7fd      	b.n	8002936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800293a:	f000 f883 	bl	8002a44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800293e:	2100      	movs	r1, #0
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fcf1 	bl	8003328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002946:	f000 f88b 	bl	8002a60 <xTaskResumeAll>
 800294a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d107      	bne.n	8002962 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <vTaskDelay+0x68>)
 8002954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000c7c 	.word	0x20000c7c
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	@ 0x28
 8002978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002982:	463a      	mov	r2, r7
 8002984:	1d39      	adds	r1, r7, #4
 8002986:	f107 0308 	add.w	r3, r7, #8
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f83c 	bl	8001a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002990:	6839      	ldr	r1, [r7, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	9202      	str	r2, [sp, #8]
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2300      	movs	r3, #0
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2300      	movs	r3, #0
 80029a0:	460a      	mov	r2, r1
 80029a2:	4922      	ldr	r1, [pc, #136]	@ (8002a2c <vTaskStartScheduler+0xb8>)
 80029a4:	4822      	ldr	r0, [pc, #136]	@ (8002a30 <vTaskStartScheduler+0xbc>)
 80029a6:	f7ff fe09 	bl	80025bc <xTaskCreateStatic>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a21      	ldr	r2, [pc, #132]	@ (8002a34 <vTaskStartScheduler+0xc0>)
 80029ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80029b0:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <vTaskStartScheduler+0xc0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80029b8:	2301      	movs	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	e001      	b.n	80029c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d102      	bne.n	80029ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80029c8:	f000 fd02 	bl	80033d0 <xTimerCreateTimerTask>
 80029cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d116      	bne.n	8002a02 <vTaskStartScheduler+0x8e>
	__asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	613b      	str	r3, [r7, #16]
}
 80029e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80029e8:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <vTaskStartScheduler+0xc4>)
 80029ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029f0:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <vTaskStartScheduler+0xc8>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <vTaskStartScheduler+0xcc>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029fc:	f001 f8bc 	bl	8003b78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a00:	e00f      	b.n	8002a22 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a08:	d10b      	bne.n	8002a22 <vTaskStartScheduler+0xae>
	__asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	60fb      	str	r3, [r7, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	e7fd      	b.n	8002a1e <vTaskStartScheduler+0xaa>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	080042dc 	.word	0x080042dc
 8002a30:	08003061 	.word	0x08003061
 8002a34:	20000c78 	.word	0x20000c78
 8002a38:	20000c74 	.word	0x20000c74
 8002a3c:	20000c60 	.word	0x20000c60
 8002a40:	20000c58 	.word	0x20000c58

08002a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002a48:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <vTaskSuspendAll+0x18>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	4a03      	ldr	r2, [pc, #12]	@ (8002a5c <vTaskSuspendAll+0x18>)
 8002a50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000c7c 	.word	0x20000c7c

08002a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a6e:	4b42      	ldr	r3, [pc, #264]	@ (8002b78 <xTaskResumeAll+0x118>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <xTaskResumeAll+0x2e>
	__asm volatile
 8002a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	603b      	str	r3, [r7, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	e7fd      	b.n	8002a8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a8e:	f001 f8e5 	bl	8003c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a92:	4b39      	ldr	r3, [pc, #228]	@ (8002b78 <xTaskResumeAll+0x118>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	4a37      	ldr	r2, [pc, #220]	@ (8002b78 <xTaskResumeAll+0x118>)
 8002a9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a9c:	4b36      	ldr	r3, [pc, #216]	@ (8002b78 <xTaskResumeAll+0x118>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d162      	bne.n	8002b6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002aa4:	4b35      	ldr	r3, [pc, #212]	@ (8002b7c <xTaskResumeAll+0x11c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d05e      	beq.n	8002b6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002aac:	e02f      	b.n	8002b0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aae:	4b34      	ldr	r3, [pc, #208]	@ (8002b80 <xTaskResumeAll+0x120>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3318      	adds	r3, #24
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f85c 	bl	8001b78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f857 	bl	8001b78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ace:	4b2d      	ldr	r3, [pc, #180]	@ (8002b84 <xTaskResumeAll+0x124>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d903      	bls.n	8002ade <xTaskResumeAll+0x7e>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	4a2a      	ldr	r2, [pc, #168]	@ (8002b84 <xTaskResumeAll+0x124>)
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4a27      	ldr	r2, [pc, #156]	@ (8002b88 <xTaskResumeAll+0x128>)
 8002aec:	441a      	add	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3304      	adds	r3, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4610      	mov	r0, r2
 8002af6:	f7fe ffe4 	bl	8001ac2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002afe:	4b23      	ldr	r3, [pc, #140]	@ (8002b8c <xTaskResumeAll+0x12c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d302      	bcc.n	8002b0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002b08:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <xTaskResumeAll+0x130>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <xTaskResumeAll+0x120>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1cb      	bne.n	8002aae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b1c:	f000 fb56 	bl	80031cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b20:	4b1c      	ldr	r3, [pc, #112]	@ (8002b94 <xTaskResumeAll+0x134>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b2c:	f000 f844 	bl	8002bb8 <xTaskIncrementTick>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002b36:	4b16      	ldr	r3, [pc, #88]	@ (8002b90 <xTaskResumeAll+0x130>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f1      	bne.n	8002b2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002b48:	4b12      	ldr	r3, [pc, #72]	@ (8002b94 <xTaskResumeAll+0x134>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <xTaskResumeAll+0x130>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b98 <xTaskResumeAll+0x138>)
 8002b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b6a:	f001 f8a7 	bl	8003cbc <vPortExitCritical>

	return xAlreadyYielded;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000c7c 	.word	0x20000c7c
 8002b7c:	20000c54 	.word	0x20000c54
 8002b80:	20000c14 	.word	0x20000c14
 8002b84:	20000c5c 	.word	0x20000c5c
 8002b88:	20000784 	.word	0x20000784
 8002b8c:	20000780 	.word	0x20000780
 8002b90:	20000c68 	.word	0x20000c68
 8002b94:	20000c64 	.word	0x20000c64
 8002b98:	e000ed04 	.word	0xe000ed04

08002b9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002ba2:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <xTaskGetTickCount+0x18>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ba8:	687b      	ldr	r3, [r7, #4]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	20000c58 	.word	0x20000c58

08002bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8002d00 <xTaskIncrementTick+0x148>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 8090 	bne.w	8002cec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002d04 <xTaskIncrementTick+0x14c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d04 <xTaskIncrementTick+0x14c>)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d121      	bne.n	8002c24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002be0:	4b49      	ldr	r3, [pc, #292]	@ (8002d08 <xTaskIncrementTick+0x150>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	603b      	str	r3, [r7, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	e7fd      	b.n	8002bfe <xTaskIncrementTick+0x46>
 8002c02:	4b41      	ldr	r3, [pc, #260]	@ (8002d08 <xTaskIncrementTick+0x150>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	4b40      	ldr	r3, [pc, #256]	@ (8002d0c <xTaskIncrementTick+0x154>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d08 <xTaskIncrementTick+0x150>)
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4a3e      	ldr	r2, [pc, #248]	@ (8002d0c <xTaskIncrementTick+0x154>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b3e      	ldr	r3, [pc, #248]	@ (8002d10 <xTaskIncrementTick+0x158>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d10 <xTaskIncrementTick+0x158>)
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	f000 fad4 	bl	80031cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c24:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <xTaskIncrementTick+0x15c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d349      	bcc.n	8002cc2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c2e:	4b36      	ldr	r3, [pc, #216]	@ (8002d08 <xTaskIncrementTick+0x150>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c38:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <xTaskIncrementTick+0x15c>)
 8002c3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c3e:	601a      	str	r2, [r3, #0]
					break;
 8002c40:	e03f      	b.n	8002cc2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c42:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <xTaskIncrementTick+0x150>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d203      	bcs.n	8002c62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d14 <xTaskIncrementTick+0x15c>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c60:	e02f      	b.n	8002cc2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3304      	adds	r3, #4
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe ff86 	bl	8001b78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	3318      	adds	r3, #24
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe ff7d 	bl	8001b78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c82:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <xTaskIncrementTick+0x160>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d903      	bls.n	8002c92 <xTaskIncrementTick+0xda>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	4a22      	ldr	r2, [pc, #136]	@ (8002d18 <xTaskIncrementTick+0x160>)
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d1c <xTaskIncrementTick+0x164>)
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f7fe ff0a 	bl	8001ac2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <xTaskIncrementTick+0x168>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3b8      	bcc.n	8002c2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cc0:	e7b5      	b.n	8002c2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cc2:	4b17      	ldr	r3, [pc, #92]	@ (8002d20 <xTaskIncrementTick+0x168>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc8:	4914      	ldr	r1, [pc, #80]	@ (8002d1c <xTaskIncrementTick+0x164>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d901      	bls.n	8002cde <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <xTaskIncrementTick+0x16c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e004      	b.n	8002cf6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002cec:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <xTaskIncrementTick+0x170>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8002d28 <xTaskIncrementTick+0x170>)
 8002cf4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002cf6:	697b      	ldr	r3, [r7, #20]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000c7c 	.word	0x20000c7c
 8002d04:	20000c58 	.word	0x20000c58
 8002d08:	20000c0c 	.word	0x20000c0c
 8002d0c:	20000c10 	.word	0x20000c10
 8002d10:	20000c6c 	.word	0x20000c6c
 8002d14:	20000c74 	.word	0x20000c74
 8002d18:	20000c5c 	.word	0x20000c5c
 8002d1c:	20000784 	.word	0x20000784
 8002d20:	20000780 	.word	0x20000780
 8002d24:	20000c68 	.word	0x20000c68
 8002d28:	20000c64 	.word	0x20000c64

08002d2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d32:	4b28      	ldr	r3, [pc, #160]	@ (8002dd4 <vTaskSwitchContext+0xa8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d3a:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <vTaskSwitchContext+0xac>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d40:	e042      	b.n	8002dc8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002d42:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <vTaskSwitchContext+0xac>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <vTaskSwitchContext+0xb0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e011      	b.n	8002d74 <vTaskSwitchContext+0x48>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10b      	bne.n	8002d6e <vTaskSwitchContext+0x42>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	607b      	str	r3, [r7, #4]
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	e7fd      	b.n	8002d6a <vTaskSwitchContext+0x3e>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	491a      	ldr	r1, [pc, #104]	@ (8002de0 <vTaskSwitchContext+0xb4>)
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0e3      	beq.n	8002d50 <vTaskSwitchContext+0x24>
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <vTaskSwitchContext+0xb4>)
 8002d94:	4413      	add	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3308      	adds	r3, #8
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d104      	bne.n	8002db8 <vTaskSwitchContext+0x8c>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <vTaskSwitchContext+0xb8>)
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4a06      	ldr	r2, [pc, #24]	@ (8002ddc <vTaskSwitchContext+0xb0>)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000c7c 	.word	0x20000c7c
 8002dd8:	20000c68 	.word	0x20000c68
 8002ddc:	20000c5c 	.word	0x20000c5c
 8002de0:	20000784 	.word	0x20000784
 8002de4:	20000780 	.word	0x20000780

08002de8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	60fb      	str	r3, [r7, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	e7fd      	b.n	8002e0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e10:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <vTaskPlaceOnEventList+0x48>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3318      	adds	r3, #24
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7fe fe75 	bl	8001b08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e1e:	2101      	movs	r1, #1
 8002e20:	6838      	ldr	r0, [r7, #0]
 8002e22:	f000 fa81 	bl	8003328 <prvAddCurrentTaskToDelayedList>
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000780 	.word	0x20000780

08002e34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10b      	bne.n	8002e5e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	617b      	str	r3, [r7, #20]
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	e7fd      	b.n	8002e5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <vTaskPlaceOnEventListRestricted+0x54>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3318      	adds	r3, #24
 8002e64:	4619      	mov	r1, r3
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7fe fe2b 	bl	8001ac2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	68b8      	ldr	r0, [r7, #8]
 8002e7c:	f000 fa54 	bl	8003328 <prvAddCurrentTaskToDelayedList>
	}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000780 	.word	0x20000780

08002e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	60fb      	str	r3, [r7, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fe5a 	bl	8001b78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f3c <xTaskRemoveFromEventList+0xb0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d11d      	bne.n	8002f08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe fe51 	bl	8001b78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eda:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <xTaskRemoveFromEventList+0xb4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d903      	bls.n	8002eea <xTaskRemoveFromEventList+0x5e>
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	4a16      	ldr	r2, [pc, #88]	@ (8002f40 <xTaskRemoveFromEventList+0xb4>)
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4a13      	ldr	r2, [pc, #76]	@ (8002f44 <xTaskRemoveFromEventList+0xb8>)
 8002ef8:	441a      	add	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7fe fdde 	bl	8001ac2 <vListInsertEnd>
 8002f06:	e005      	b.n	8002f14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480e      	ldr	r0, [pc, #56]	@ (8002f48 <xTaskRemoveFromEventList+0xbc>)
 8002f10:	f7fe fdd7 	bl	8001ac2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f18:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <xTaskRemoveFromEventList+0xc0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d905      	bls.n	8002f2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <xTaskRemoveFromEventList+0xc4>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e001      	b.n	8002f32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002f32:	697b      	ldr	r3, [r7, #20]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000c7c 	.word	0x20000c7c
 8002f40:	20000c5c 	.word	0x20000c5c
 8002f44:	20000784 	.word	0x20000784
 8002f48:	20000c14 	.word	0x20000c14
 8002f4c:	20000780 	.word	0x20000780
 8002f50:	20000c68 	.word	0x20000c68

08002f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <vTaskInternalSetTimeOutState+0x24>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <vTaskInternalSetTimeOutState+0x28>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	605a      	str	r2, [r3, #4]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000c6c 	.word	0x20000c6c
 8002f7c:	20000c58 	.word	0x20000c58

08002f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	613b      	str	r3, [r7, #16]
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	60fb      	str	r3, [r7, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	e7fd      	b.n	8002fc2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002fc6:	f000 fe49 	bl	8003c5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002fca:	4b1d      	ldr	r3, [pc, #116]	@ (8003040 <xTaskCheckForTimeOut+0xc0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fe2:	d102      	bne.n	8002fea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	e023      	b.n	8003032 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <xTaskCheckForTimeOut+0xc4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d007      	beq.n	8003006 <xTaskCheckForTimeOut+0x86>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003000:	2301      	movs	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	e015      	b.n	8003032 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	d20b      	bcs.n	8003028 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff99 	bl	8002f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e004      	b.n	8003032 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800302e:	2301      	movs	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003032:	f000 fe43 	bl	8003cbc <vPortExitCritical>

	return xReturn;
 8003036:	69fb      	ldr	r3, [r7, #28]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000c58 	.word	0x20000c58
 8003044:	20000c6c 	.word	0x20000c6c

08003048 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <vTaskMissedYield+0x14>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000c68 	.word	0x20000c68

08003060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003068:	f000 f852 	bl	8003110 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800306c:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <prvIdleTask+0x28>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d9f9      	bls.n	8003068 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <prvIdleTask+0x2c>)
 8003076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003084:	e7f0      	b.n	8003068 <prvIdleTask+0x8>
 8003086:	bf00      	nop
 8003088:	20000784 	.word	0x20000784
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	e00c      	b.n	80030b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4a12      	ldr	r2, [pc, #72]	@ (80030f0 <prvInitialiseTaskLists+0x60>)
 80030a8:	4413      	add	r3, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fcde 	bl	8001a6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3301      	adds	r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b37      	cmp	r3, #55	@ 0x37
 80030ba:	d9ef      	bls.n	800309c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80030bc:	480d      	ldr	r0, [pc, #52]	@ (80030f4 <prvInitialiseTaskLists+0x64>)
 80030be:	f7fe fcd5 	bl	8001a6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030c2:	480d      	ldr	r0, [pc, #52]	@ (80030f8 <prvInitialiseTaskLists+0x68>)
 80030c4:	f7fe fcd2 	bl	8001a6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030c8:	480c      	ldr	r0, [pc, #48]	@ (80030fc <prvInitialiseTaskLists+0x6c>)
 80030ca:	f7fe fccf 	bl	8001a6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030ce:	480c      	ldr	r0, [pc, #48]	@ (8003100 <prvInitialiseTaskLists+0x70>)
 80030d0:	f7fe fccc 	bl	8001a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030d4:	480b      	ldr	r0, [pc, #44]	@ (8003104 <prvInitialiseTaskLists+0x74>)
 80030d6:	f7fe fcc9 	bl	8001a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030da:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <prvInitialiseTaskLists+0x78>)
 80030dc:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <prvInitialiseTaskLists+0x64>)
 80030de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030e0:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <prvInitialiseTaskLists+0x7c>)
 80030e2:	4a05      	ldr	r2, [pc, #20]	@ (80030f8 <prvInitialiseTaskLists+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000784 	.word	0x20000784
 80030f4:	20000be4 	.word	0x20000be4
 80030f8:	20000bf8 	.word	0x20000bf8
 80030fc:	20000c14 	.word	0x20000c14
 8003100:	20000c28 	.word	0x20000c28
 8003104:	20000c40 	.word	0x20000c40
 8003108:	20000c0c 	.word	0x20000c0c
 800310c:	20000c10 	.word	0x20000c10

08003110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003116:	e019      	b.n	800314c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003118:	f000 fda0 	bl	8003c5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800311c:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <prvCheckTasksWaitingTermination+0x50>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fd25 	bl	8001b78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800312e:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <prvCheckTasksWaitingTermination+0x54>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3b01      	subs	r3, #1
 8003134:	4a0b      	ldr	r2, [pc, #44]	@ (8003164 <prvCheckTasksWaitingTermination+0x54>)
 8003136:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003138:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <prvCheckTasksWaitingTermination+0x58>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <prvCheckTasksWaitingTermination+0x58>)
 8003140:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003142:	f000 fdbb 	bl	8003cbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f810 	bl	800316c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <prvCheckTasksWaitingTermination+0x58>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e1      	bne.n	8003118 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000c28 	.word	0x20000c28
 8003164:	20000c54 	.word	0x20000c54
 8003168:	20000c3c 	.word	0x20000c3c

0800316c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	4618      	mov	r0, r3
 8003184:	f000 ff3a 	bl	8003ffc <vPortFree>
				vPortFree( pxTCB );
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 ff37 	bl	8003ffc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800318e:	e019      	b.n	80031c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003196:	2b01      	cmp	r3, #1
 8003198:	d103      	bne.n	80031a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 ff2e 	bl	8003ffc <vPortFree>
	}
 80031a0:	e010      	b.n	80031c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d00b      	beq.n	80031c4 <prvDeleteTCB+0x58>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	60fb      	str	r3, [r7, #12]
}
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <prvDeleteTCB+0x54>
	}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <prvResetNextTaskUnblockTime+0x38>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003208 <prvResetNextTaskUnblockTime+0x3c>)
 80031de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031e4:	e008      	b.n	80031f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e6:	4b07      	ldr	r3, [pc, #28]	@ (8003204 <prvResetNextTaskUnblockTime+0x38>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <prvResetNextTaskUnblockTime+0x3c>)
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000c0c 	.word	0x20000c0c
 8003208:	20000c74 	.word	0x20000c74

0800320c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003212:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <xTaskGetSchedulerState+0x34>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800321a:	2301      	movs	r3, #1
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	e008      	b.n	8003232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003220:	4b08      	ldr	r3, [pc, #32]	@ (8003244 <xTaskGetSchedulerState+0x38>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003228:	2302      	movs	r3, #2
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	e001      	b.n	8003232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800322e:	2300      	movs	r3, #0
 8003230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003232:	687b      	ldr	r3, [r7, #4]
	}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000c60 	.word	0x20000c60
 8003244:	20000c7c 	.word	0x20000c7c

08003248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d058      	beq.n	8003310 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800325e:	4b2f      	ldr	r3, [pc, #188]	@ (800331c <xTaskPriorityDisinherit+0xd4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d00b      	beq.n	8003280 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	60fb      	str	r3, [r7, #12]
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	60bb      	str	r3, [r7, #8]
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a4:	1e5a      	subs	r2, r3, #1
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d02c      	beq.n	8003310 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d128      	bne.n	8003310 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fc58 	bl	8001b78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <xTaskPriorityDisinherit+0xd8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d903      	bls.n	80032f0 <xTaskPriorityDisinherit+0xa8>
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003320 <xTaskPriorityDisinherit+0xd8>)
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4a09      	ldr	r2, [pc, #36]	@ (8003324 <xTaskPriorityDisinherit+0xdc>)
 80032fe:	441a      	add	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	3304      	adds	r3, #4
 8003304:	4619      	mov	r1, r3
 8003306:	4610      	mov	r0, r2
 8003308:	f7fe fbdb 	bl	8001ac2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800330c:	2301      	movs	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003310:	697b      	ldr	r3, [r7, #20]
	}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000780 	.word	0x20000780
 8003320:	20000c5c 	.word	0x20000c5c
 8003324:	20000784 	.word	0x20000784

08003328 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003332:	4b21      	ldr	r3, [pc, #132]	@ (80033b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003338:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <prvAddCurrentTaskToDelayedList+0x94>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3304      	adds	r3, #4
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fc1a 	bl	8001b78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800334a:	d10a      	bne.n	8003362 <prvAddCurrentTaskToDelayedList+0x3a>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <prvAddCurrentTaskToDelayedList+0x94>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3304      	adds	r3, #4
 8003358:	4619      	mov	r1, r3
 800335a:	4819      	ldr	r0, [pc, #100]	@ (80033c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800335c:	f7fe fbb1 	bl	8001ac2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003360:	e026      	b.n	80033b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800336a:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <prvAddCurrentTaskToDelayedList+0x94>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	429a      	cmp	r2, r3
 8003378:	d209      	bcs.n	800338e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800337a:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4b0f      	ldr	r3, [pc, #60]	@ (80033bc <prvAddCurrentTaskToDelayedList+0x94>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3304      	adds	r3, #4
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f7fe fbbe 	bl	8001b08 <vListInsert>
}
 800338c:	e010      	b.n	80033b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800338e:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b0a      	ldr	r3, [pc, #40]	@ (80033bc <prvAddCurrentTaskToDelayedList+0x94>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3304      	adds	r3, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7fe fbb4 	bl	8001b08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033a0:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d202      	bcs.n	80033b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80033aa:	4a08      	ldr	r2, [pc, #32]	@ (80033cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6013      	str	r3, [r2, #0]
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000c58 	.word	0x20000c58
 80033bc:	20000780 	.word	0x20000780
 80033c0:	20000c40 	.word	0x20000c40
 80033c4:	20000c10 	.word	0x20000c10
 80033c8:	20000c0c 	.word	0x20000c0c
 80033cc:	20000c74 	.word	0x20000c74

080033d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	@ 0x28
 80033d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80033da:	f000 fb11 	bl	8003a00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80033de:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <xTimerCreateTimerTask+0x84>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d021      	beq.n	800342a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80033ee:	1d3a      	adds	r2, r7, #4
 80033f0:	f107 0108 	add.w	r1, r7, #8
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fb1d 	bl	8001a38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	9202      	str	r2, [sp, #8]
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	2302      	movs	r3, #2
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2300      	movs	r3, #0
 800340e:	460a      	mov	r2, r1
 8003410:	4911      	ldr	r1, [pc, #68]	@ (8003458 <xTimerCreateTimerTask+0x88>)
 8003412:	4812      	ldr	r0, [pc, #72]	@ (800345c <xTimerCreateTimerTask+0x8c>)
 8003414:	f7ff f8d2 	bl	80025bc <xTaskCreateStatic>
 8003418:	4603      	mov	r3, r0
 800341a:	4a11      	ldr	r2, [pc, #68]	@ (8003460 <xTimerCreateTimerTask+0x90>)
 800341c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800341e:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <xTimerCreateTimerTask+0x90>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003426:	2301      	movs	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	613b      	str	r3, [r7, #16]
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003448:	697b      	ldr	r3, [r7, #20]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000cb0 	.word	0x20000cb0
 8003458:	080042e4 	.word	0x080042e4
 800345c:	0800359d 	.word	0x0800359d
 8003460:	20000cb4 	.word	0x20000cb4

08003464 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	@ 0x28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10b      	bne.n	8003494 <xTimerGenericCommand+0x30>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	623b      	str	r3, [r7, #32]
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	e7fd      	b.n	8003490 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003494:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <xTimerGenericCommand+0x98>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02a      	beq.n	80034f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	dc18      	bgt.n	80034e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034ae:	f7ff fead 	bl	800320c <xTaskGetSchedulerState>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d109      	bne.n	80034cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034b8:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <xTimerGenericCommand+0x98>)
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	f107 0110 	add.w	r1, r7, #16
 80034c0:	2300      	movs	r3, #0
 80034c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c4:	f7fe fc8c 	bl	8001de0 <xQueueGenericSend>
 80034c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80034ca:	e012      	b.n	80034f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034cc:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <xTimerGenericCommand+0x98>)
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	f107 0110 	add.w	r1, r7, #16
 80034d4:	2300      	movs	r3, #0
 80034d6:	2200      	movs	r2, #0
 80034d8:	f7fe fc82 	bl	8001de0 <xQueueGenericSend>
 80034dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80034de:	e008      	b.n	80034f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <xTimerGenericCommand+0x98>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	f107 0110 	add.w	r1, r7, #16
 80034e8:	2300      	movs	r3, #0
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	f7fe fd7a 	bl	8001fe4 <xQueueGenericSendFromISR>
 80034f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3728      	adds	r7, #40	@ 0x28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20000cb0 	.word	0x20000cb0

08003500 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800350a:	4b23      	ldr	r3, [pc, #140]	@ (8003598 <prvProcessExpiredTimer+0x98>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3304      	adds	r3, #4
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe fb2d 	bl	8001b78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d023      	beq.n	8003574 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	699a      	ldr	r2, [r3, #24]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	18d1      	adds	r1, r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f000 f8d3 	bl	80036e4 <prvInsertTimerInActiveList>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003544:	2300      	movs	r3, #0
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2300      	movs	r3, #0
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	2100      	movs	r1, #0
 800354e:	6978      	ldr	r0, [r7, #20]
 8003550:	f7ff ff88 	bl	8003464 <xTimerGenericCommand>
 8003554:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d114      	bne.n	8003586 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	60fb      	str	r3, [r7, #12]
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	6978      	ldr	r0, [r7, #20]
 800358c:	4798      	blx	r3
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000ca8 	.word	0x20000ca8

0800359c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035a4:	f107 0308 	add.w	r3, r7, #8
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f859 	bl	8003660 <prvGetNextExpireTime>
 80035ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4619      	mov	r1, r3
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f805 	bl	80035c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035ba:	f000 f8d5 	bl	8003768 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035be:	bf00      	nop
 80035c0:	e7f0      	b.n	80035a4 <prvTimerTask+0x8>
	...

080035c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035ce:	f7ff fa39 	bl	8002a44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f864 	bl	80036a4 <prvSampleTimeNow>
 80035dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d130      	bne.n	8003646 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <prvProcessTimerOrBlockTask+0x3c>
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d806      	bhi.n	8003600 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035f2:	f7ff fa35 	bl	8002a60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035f6:	68f9      	ldr	r1, [r7, #12]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff81 	bl	8003500 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80035fe:	e024      	b.n	800364a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003606:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <prvProcessTimerOrBlockTask+0x90>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <prvProcessTimerOrBlockTask+0x50>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <prvProcessTimerOrBlockTask+0x52>
 8003614:	2300      	movs	r3, #0
 8003616:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003618:	4b0f      	ldr	r3, [pc, #60]	@ (8003658 <prvProcessTimerOrBlockTask+0x94>)
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	4619      	mov	r1, r3
 8003626:	f7fe ff95 	bl	8002554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800362a:	f7ff fa19 	bl	8002a60 <xTaskResumeAll>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003634:	4b09      	ldr	r3, [pc, #36]	@ (800365c <prvProcessTimerOrBlockTask+0x98>)
 8003636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	f3bf 8f6f 	isb	sy
}
 8003644:	e001      	b.n	800364a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003646:	f7ff fa0b 	bl	8002a60 <xTaskResumeAll>
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000cac 	.word	0x20000cac
 8003658:	20000cb0 	.word	0x20000cb0
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003668:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <prvGetNextExpireTime+0x40>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <prvGetNextExpireTime+0x16>
 8003672:	2201      	movs	r2, #1
 8003674:	e000      	b.n	8003678 <prvGetNextExpireTime+0x18>
 8003676:	2200      	movs	r2, #0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <prvGetNextExpireTime+0x40>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e001      	b.n	8003694 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000ca8 	.word	0x20000ca8

080036a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80036ac:	f7ff fa76 	bl	8002b9c <xTaskGetTickCount>
 80036b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <prvSampleTimeNow+0x3c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d205      	bcs.n	80036c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80036bc:	f000 f93a 	bl	8003934 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e002      	b.n	80036ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036ce:	4a04      	ldr	r2, [pc, #16]	@ (80036e0 <prvSampleTimeNow+0x3c>)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036d4:	68fb      	ldr	r3, [r7, #12]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000cb8 	.word	0x20000cb8

080036e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	d812      	bhi.n	8003730 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	1ad2      	subs	r2, r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	429a      	cmp	r2, r3
 8003716:	d302      	bcc.n	800371e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003718:	2301      	movs	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e01b      	b.n	8003756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800371e:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <prvInsertTimerInActiveList+0x7c>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fe f9ed 	bl	8001b08 <vListInsert>
 800372e:	e012      	b.n	8003756 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d206      	bcs.n	8003746 <prvInsertTimerInActiveList+0x62>
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d302      	bcc.n	8003746 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e007      	b.n	8003756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003746:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <prvInsertTimerInActiveList+0x80>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3304      	adds	r3, #4
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7fe f9d9 	bl	8001b08 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003756:	697b      	ldr	r3, [r7, #20]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000cac 	.word	0x20000cac
 8003764:	20000ca8 	.word	0x20000ca8

08003768 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08e      	sub	sp, #56	@ 0x38
 800376c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800376e:	e0ce      	b.n	800390e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	da19      	bge.n	80037aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	3304      	adds	r3, #4
 800377a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	61fb      	str	r3, [r7, #28]
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	e7fd      	b.n	8003796 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037a0:	6850      	ldr	r0, [r2, #4]
 80037a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037a4:	6892      	ldr	r2, [r2, #8]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f2c0 80ae 	blt.w	800390e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c0:	3304      	adds	r3, #4
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe f9d8 	bl	8001b78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037c8:	463b      	mov	r3, r7
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff6a 	bl	80036a4 <prvSampleTimeNow>
 80037d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b09      	cmp	r3, #9
 80037d6:	f200 8097 	bhi.w	8003908 <prvProcessReceivedCommands+0x1a0>
 80037da:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <prvProcessReceivedCommands+0x78>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	08003809 	.word	0x08003809
 80037e4:	08003809 	.word	0x08003809
 80037e8:	08003809 	.word	0x08003809
 80037ec:	0800387f 	.word	0x0800387f
 80037f0:	08003893 	.word	0x08003893
 80037f4:	080038df 	.word	0x080038df
 80037f8:	08003809 	.word	0x08003809
 80037fc:	08003809 	.word	0x08003809
 8003800:	0800387f 	.word	0x0800387f
 8003804:	08003893 	.word	0x08003893
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	b2da      	uxtb	r2, r3
 8003814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003816:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	18d1      	adds	r1, r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003828:	f7ff ff5c 	bl	80036e4 <prvInsertTimerInActiveList>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d06c      	beq.n	800390c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003838:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800383a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d061      	beq.n	800390c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	441a      	add	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2300      	movs	r3, #0
 8003856:	2100      	movs	r1, #0
 8003858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800385a:	f7ff fe03 	bl	8003464 <xTimerGenericCommand>
 800385e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d152      	bne.n	800390c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	61bb      	str	r3, [r7, #24]
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	e7fd      	b.n	800387a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800387e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	b2da      	uxtb	r2, r3
 800388a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003890:	e03d      	b.n	800390e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	b2da      	uxtb	r2, r3
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	617b      	str	r3, [r7, #20]
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	e7fd      	b.n	80038c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	18d1      	adds	r1, r2, r3
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038d8:	f7ff ff04 	bl	80036e4 <prvInsertTimerInActiveList>
					break;
 80038dc:	e017      	b.n	800390e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d103      	bne.n	80038f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80038ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038ee:	f000 fb85 	bl	8003ffc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80038f2:	e00c      	b.n	800390e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003902:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003906:	e002      	b.n	800390e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003908:	bf00      	nop
 800390a:	e000      	b.n	800390e <prvProcessReceivedCommands+0x1a6>
					break;
 800390c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800390e:	4b08      	ldr	r3, [pc, #32]	@ (8003930 <prvProcessReceivedCommands+0x1c8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1d39      	adds	r1, r7, #4
 8003914:	2200      	movs	r2, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fc02 	bl	8002120 <xQueueReceive>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	f47f af26 	bne.w	8003770 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	3730      	adds	r7, #48	@ 0x30
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000cb0 	.word	0x20000cb0

08003934 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800393a:	e049      	b.n	80039d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800393c:	4b2e      	ldr	r3, [pc, #184]	@ (80039f8 <prvSwitchTimerLists+0xc4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003946:	4b2c      	ldr	r3, [pc, #176]	@ (80039f8 <prvSwitchTimerLists+0xc4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3304      	adds	r3, #4
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe f90f 	bl	8001b78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d02f      	beq.n	80039d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d90e      	bls.n	80039a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800398e:	4b1a      	ldr	r3, [pc, #104]	@ (80039f8 <prvSwitchTimerLists+0xc4>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f7fe f8b5 	bl	8001b08 <vListInsert>
 800399e:	e017      	b.n	80039d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039a0:	2300      	movs	r3, #0
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	2100      	movs	r1, #0
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff fd5a 	bl	8003464 <xTimerGenericCommand>
 80039b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	603b      	str	r3, [r7, #0]
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	e7fd      	b.n	80039cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <prvSwitchTimerLists+0xc4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1b0      	bne.n	800393c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80039da:	4b07      	ldr	r3, [pc, #28]	@ (80039f8 <prvSwitchTimerLists+0xc4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80039e0:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <prvSwitchTimerLists+0xc8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a04      	ldr	r2, [pc, #16]	@ (80039f8 <prvSwitchTimerLists+0xc4>)
 80039e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80039e8:	4a04      	ldr	r2, [pc, #16]	@ (80039fc <prvSwitchTimerLists+0xc8>)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	6013      	str	r3, [r2, #0]
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000ca8 	.word	0x20000ca8
 80039fc:	20000cac 	.word	0x20000cac

08003a00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003a06:	f000 f929 	bl	8003c5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <prvCheckForValidListAndQueue+0x60>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d120      	bne.n	8003a54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003a12:	4814      	ldr	r0, [pc, #80]	@ (8003a64 <prvCheckForValidListAndQueue+0x64>)
 8003a14:	f7fe f82a 	bl	8001a6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003a18:	4813      	ldr	r0, [pc, #76]	@ (8003a68 <prvCheckForValidListAndQueue+0x68>)
 8003a1a:	f7fe f827 	bl	8001a6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <prvCheckForValidListAndQueue+0x6c>)
 8003a20:	4a10      	ldr	r2, [pc, #64]	@ (8003a64 <prvCheckForValidListAndQueue+0x64>)
 8003a22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003a24:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <prvCheckForValidListAndQueue+0x70>)
 8003a26:	4a10      	ldr	r2, [pc, #64]	@ (8003a68 <prvCheckForValidListAndQueue+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <prvCheckForValidListAndQueue+0x74>)
 8003a30:	4a11      	ldr	r2, [pc, #68]	@ (8003a78 <prvCheckForValidListAndQueue+0x78>)
 8003a32:	2110      	movs	r1, #16
 8003a34:	200a      	movs	r0, #10
 8003a36:	f7fe f933 	bl	8001ca0 <xQueueGenericCreateStatic>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <prvCheckForValidListAndQueue+0x60>)
 8003a3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003a40:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <prvCheckForValidListAndQueue+0x60>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a48:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <prvCheckForValidListAndQueue+0x60>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	490b      	ldr	r1, [pc, #44]	@ (8003a7c <prvCheckForValidListAndQueue+0x7c>)
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fd58 	bl	8002504 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a54:	f000 f932 	bl	8003cbc <vPortExitCritical>
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000cb0 	.word	0x20000cb0
 8003a64:	20000c80 	.word	0x20000c80
 8003a68:	20000c94 	.word	0x20000c94
 8003a6c:	20000ca8 	.word	0x20000ca8
 8003a70:	20000cac 	.word	0x20000cac
 8003a74:	20000d5c 	.word	0x20000d5c
 8003a78:	20000cbc 	.word	0x20000cbc
 8003a7c:	080042ec 	.word	0x080042ec

08003a80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3b04      	subs	r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3b04      	subs	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3b04      	subs	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ab0:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <pxPortInitialiseStack+0x54>)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3b14      	subs	r3, #20
 8003aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b20      	subs	r3, #32
 8003ac6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	08003ad9 	.word	0x08003ad9

08003ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ae2:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <prvTaskExitError+0x54>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aea:	d00b      	beq.n	8003b04 <prvTaskExitError+0x2c>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	60fb      	str	r3, [r7, #12]
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <prvTaskExitError+0x28>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	60bb      	str	r3, [r7, #8]
}
 8003b16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b18:	bf00      	nop
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0fc      	beq.n	8003b1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	2000000c 	.word	0x2000000c

08003b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b30:	4b07      	ldr	r3, [pc, #28]	@ (8003b50 <pxCurrentTCBConst2>)
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	6808      	ldr	r0, [r1, #0]
 8003b36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b3a:	f380 8809 	msr	PSP, r0
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f380 8811 	msr	BASEPRI, r0
 8003b4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003b4e:	4770      	bx	lr

08003b50 <pxCurrentTCBConst2>:
 8003b50:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop

08003b58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003b58:	4806      	ldr	r0, [pc, #24]	@ (8003b74 <prvPortStartFirstTask+0x1c>)
 8003b5a:	6800      	ldr	r0, [r0, #0]
 8003b5c:	6800      	ldr	r0, [r0, #0]
 8003b5e:	f380 8808 	msr	MSP, r0
 8003b62:	b662      	cpsie	i
 8003b64:	b661      	cpsie	f
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	df00      	svc	0
 8003b70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b72:	bf00      	nop
 8003b74:	e000ed08 	.word	0xe000ed08

08003b78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b7e:	4b32      	ldr	r3, [pc, #200]	@ (8003c48 <xPortStartScheduler+0xd0>)
 8003b80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	22ff      	movs	r2, #255	@ 0xff
 8003b8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c4c <xPortStartScheduler+0xd4>)
 8003ba4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <xPortStartScheduler+0xd8>)
 8003ba8:	2207      	movs	r2, #7
 8003baa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bac:	e009      	b.n	8003bc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003bae:	4b28      	ldr	r3, [pc, #160]	@ (8003c50 <xPortStartScheduler+0xd8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	4a26      	ldr	r2, [pc, #152]	@ (8003c50 <xPortStartScheduler+0xd8>)
 8003bb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bca:	2b80      	cmp	r3, #128	@ 0x80
 8003bcc:	d0ef      	beq.n	8003bae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bce:	4b20      	ldr	r3, [pc, #128]	@ (8003c50 <xPortStartScheduler+0xd8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f1c3 0307 	rsb	r3, r3, #7
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00b      	beq.n	8003bf2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	60bb      	str	r3, [r7, #8]
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	e7fd      	b.n	8003bee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bf2:	4b17      	ldr	r3, [pc, #92]	@ (8003c50 <xPortStartScheduler+0xd8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	4a15      	ldr	r2, [pc, #84]	@ (8003c50 <xPortStartScheduler+0xd8>)
 8003bfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bfc:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <xPortStartScheduler+0xd8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c04:	4a12      	ldr	r2, [pc, #72]	@ (8003c50 <xPortStartScheduler+0xd8>)
 8003c06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c10:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <xPortStartScheduler+0xdc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0f      	ldr	r2, [pc, #60]	@ (8003c54 <xPortStartScheduler+0xdc>)
 8003c16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <xPortStartScheduler+0xdc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0c      	ldr	r2, [pc, #48]	@ (8003c54 <xPortStartScheduler+0xdc>)
 8003c22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c28:	f000 f8b8 	bl	8003d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <xPortStartScheduler+0xe0>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c32:	f7ff ff91 	bl	8003b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c36:	f7ff f879 	bl	8002d2c <vTaskSwitchContext>
	prvTaskExitError();
 8003c3a:	f7ff ff4d 	bl	8003ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	e000e400 	.word	0xe000e400
 8003c4c:	20000dac 	.word	0x20000dac
 8003c50:	20000db0 	.word	0x20000db0
 8003c54:	e000ed20 	.word	0xe000ed20
 8003c58:	2000000c 	.word	0x2000000c

08003c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	607b      	str	r3, [r7, #4]
}
 8003c74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c76:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb4 <vPortEnterCritical+0x58>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb4 <vPortEnterCritical+0x58>)
 8003c7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <vPortEnterCritical+0x58>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d110      	bne.n	8003caa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c88:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb8 <vPortEnterCritical+0x5c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <vPortEnterCritical+0x4e>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	603b      	str	r3, [r7, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	e7fd      	b.n	8003ca6 <vPortEnterCritical+0x4a>
	}
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	2000000c 	.word	0x2000000c
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cc2:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <vPortExitCritical+0x50>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <vPortExitCritical+0x26>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	607b      	str	r3, [r7, #4]
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	e7fd      	b.n	8003cde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <vPortExitCritical+0x50>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <vPortExitCritical+0x50>)
 8003cea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cec:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <vPortExitCritical+0x50>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <vPortExitCritical+0x44>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f383 8811 	msr	BASEPRI, r3
}
 8003cfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	2000000c 	.word	0x2000000c

08003d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d10:	f3ef 8009 	mrs	r0, PSP
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <pxCurrentTCBConst>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d20:	6010      	str	r0, [r2, #0]
 8003d22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003d26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d2a:	f380 8811 	msr	BASEPRI, r0
 8003d2e:	f7fe fffd 	bl	8002d2c <vTaskSwitchContext>
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8811 	msr	BASEPRI, r0
 8003d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003d3e:	6819      	ldr	r1, [r3, #0]
 8003d40:	6808      	ldr	r0, [r1, #0]
 8003d42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d46:	f380 8809 	msr	PSP, r0
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	4770      	bx	lr

08003d50 <pxCurrentTCBConst>:
 8003d50:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop

08003d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	607b      	str	r3, [r7, #4]
}
 8003d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d72:	f7fe ff21 	bl	8002bb8 <xTaskIncrementTick>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <xPortSysTickHandler+0x40>)
 8003d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f383 8811 	msr	BASEPRI, r3
}
 8003d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <vPortSetupTimerInterrupt+0x30>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003da6:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <vPortSetupTimerInterrupt+0x34>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dac:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <vPortSetupTimerInterrupt+0x38>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a09      	ldr	r2, [pc, #36]	@ (8003dd8 <vPortSetupTimerInterrupt+0x3c>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	4a08      	ldr	r2, [pc, #32]	@ (8003ddc <vPortSetupTimerInterrupt+0x40>)
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dbe:	4b03      	ldr	r3, [pc, #12]	@ (8003dcc <vPortSetupTimerInterrupt+0x30>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	e000e010 	.word	0xe000e010
 8003dd0:	e000e018 	.word	0xe000e018
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	10624dd3 	.word	0x10624dd3
 8003ddc:	e000e014 	.word	0xe000e014

08003de0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003de6:	f3ef 8305 	mrs	r3, IPSR
 8003dea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b0f      	cmp	r3, #15
 8003df0:	d915      	bls.n	8003e1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003df2:	4a17      	ldr	r2, [pc, #92]	@ (8003e50 <vPortValidateInterruptPriority+0x70>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003dfc:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <vPortValidateInterruptPriority+0x74>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	7afa      	ldrb	r2, [r7, #11]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d20b      	bcs.n	8003e1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	607b      	str	r3, [r7, #4]
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	e7fd      	b.n	8003e1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e58 <vPortValidateInterruptPriority+0x78>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <vPortValidateInterruptPriority+0x7c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d90b      	bls.n	8003e46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	603b      	str	r3, [r7, #0]
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <vPortValidateInterruptPriority+0x62>
	}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	e000e3f0 	.word	0xe000e3f0
 8003e54:	20000dac 	.word	0x20000dac
 8003e58:	e000ed0c 	.word	0xe000ed0c
 8003e5c:	20000db0 	.word	0x20000db0

08003e60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	@ 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e6c:	f7fe fdea 	bl	8002a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e70:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe4 <pvPortMalloc+0x184>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e78:	f000 f924 	bl	80040c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe8 <pvPortMalloc+0x188>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 8095 	bne.w	8003fb4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01e      	beq.n	8003ece <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003e90:	2208      	movs	r2, #8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d015      	beq.n	8003ece <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f023 0307 	bic.w	r3, r3, #7
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <pvPortMalloc+0x6e>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	617b      	str	r3, [r7, #20]
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	e7fd      	b.n	8003eca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d06f      	beq.n	8003fb4 <pvPortMalloc+0x154>
 8003ed4:	4b45      	ldr	r3, [pc, #276]	@ (8003fec <pvPortMalloc+0x18c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d86a      	bhi.n	8003fb4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ede:	4b44      	ldr	r3, [pc, #272]	@ (8003ff0 <pvPortMalloc+0x190>)
 8003ee0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ee2:	4b43      	ldr	r3, [pc, #268]	@ (8003ff0 <pvPortMalloc+0x190>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ee8:	e004      	b.n	8003ef4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d903      	bls.n	8003f06 <pvPortMalloc+0xa6>
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f1      	bne.n	8003eea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f06:	4b37      	ldr	r3, [pc, #220]	@ (8003fe4 <pvPortMalloc+0x184>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d051      	beq.n	8003fb4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2208      	movs	r2, #8
 8003f16:	4413      	add	r3, r2
 8003f18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	1ad2      	subs	r2, r2, r3
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d920      	bls.n	8003f74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4413      	add	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <pvPortMalloc+0xfc>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	613b      	str	r3, [r7, #16]
}
 8003f56:	bf00      	nop
 8003f58:	bf00      	nop
 8003f5a:	e7fd      	b.n	8003f58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	1ad2      	subs	r2, r2, r3
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f6e:	69b8      	ldr	r0, [r7, #24]
 8003f70:	f000 f90a 	bl	8004188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f74:	4b1d      	ldr	r3, [pc, #116]	@ (8003fec <pvPortMalloc+0x18c>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fec <pvPortMalloc+0x18c>)
 8003f80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f82:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <pvPortMalloc+0x18c>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <pvPortMalloc+0x194>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d203      	bcs.n	8003f96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f8e:	4b17      	ldr	r3, [pc, #92]	@ (8003fec <pvPortMalloc+0x18c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a18      	ldr	r2, [pc, #96]	@ (8003ff4 <pvPortMalloc+0x194>)
 8003f94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <pvPortMalloc+0x188>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003faa:	4b13      	ldr	r3, [pc, #76]	@ (8003ff8 <pvPortMalloc+0x198>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4a11      	ldr	r2, [pc, #68]	@ (8003ff8 <pvPortMalloc+0x198>)
 8003fb2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fb4:	f7fe fd54 	bl	8002a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <pvPortMalloc+0x17a>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60fb      	str	r3, [r7, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <pvPortMalloc+0x176>
	return pvReturn;
 8003fda:	69fb      	ldr	r3, [r7, #28]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3728      	adds	r7, #40	@ 0x28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	200019bc 	.word	0x200019bc
 8003fe8:	200019d0 	.word	0x200019d0
 8003fec:	200019c0 	.word	0x200019c0
 8003ff0:	200019b4 	.word	0x200019b4
 8003ff4:	200019c4 	.word	0x200019c4
 8003ff8:	200019c8 	.word	0x200019c8

08003ffc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04f      	beq.n	80040ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800400e:	2308      	movs	r3, #8
 8004010:	425b      	negs	r3, r3
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4413      	add	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <vPortFree+0xbc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <vPortFree+0x46>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	60fb      	str	r3, [r7, #12]
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	e7fd      	b.n	800403e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <vPortFree+0x66>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	60bb      	str	r3, [r7, #8]
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <vPortFree+0xbc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01e      	beq.n	80040ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11a      	bne.n	80040ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	4b0e      	ldr	r3, [pc, #56]	@ (80040b8 <vPortFree+0xbc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	43db      	mvns	r3, r3
 8004082:	401a      	ands	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004088:	f7fe fcdc 	bl	8002a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <vPortFree+0xc0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4413      	add	r3, r2
 8004096:	4a09      	ldr	r2, [pc, #36]	@ (80040bc <vPortFree+0xc0>)
 8004098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800409a:	6938      	ldr	r0, [r7, #16]
 800409c:	f000 f874 	bl	8004188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040a0:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <vPortFree+0xc4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	4a06      	ldr	r2, [pc, #24]	@ (80040c0 <vPortFree+0xc4>)
 80040a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040aa:	f7fe fcd9 	bl	8002a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040ae:	bf00      	nop
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200019d0 	.word	0x200019d0
 80040bc:	200019c0 	.word	0x200019c0
 80040c0:	200019cc 	.word	0x200019cc

080040c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80040ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040d0:	4b27      	ldr	r3, [pc, #156]	@ (8004170 <prvHeapInit+0xac>)
 80040d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3307      	adds	r3, #7
 80040e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004170 <prvHeapInit+0xac>)
 80040f4:	4413      	add	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <prvHeapInit+0xb0>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004102:	4b1c      	ldr	r3, [pc, #112]	@ (8004174 <prvHeapInit+0xb0>)
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	4413      	add	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004110:	2208      	movs	r2, #8
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a15      	ldr	r2, [pc, #84]	@ (8004178 <prvHeapInit+0xb4>)
 8004124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004126:	4b14      	ldr	r3, [pc, #80]	@ (8004178 <prvHeapInit+0xb4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800412e:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <prvHeapInit+0xb4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <prvHeapInit+0xb4>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a0a      	ldr	r2, [pc, #40]	@ (800417c <prvHeapInit+0xb8>)
 8004152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a09      	ldr	r2, [pc, #36]	@ (8004180 <prvHeapInit+0xbc>)
 800415a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800415c:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <prvHeapInit+0xc0>)
 800415e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000db4 	.word	0x20000db4
 8004174:	200019b4 	.word	0x200019b4
 8004178:	200019bc 	.word	0x200019bc
 800417c:	200019c4 	.word	0x200019c4
 8004180:	200019c0 	.word	0x200019c0
 8004184:	200019d0 	.word	0x200019d0

08004188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004190:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <prvInsertBlockIntoFreeList+0xa8>)
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e002      	b.n	800419c <prvInsertBlockIntoFreeList+0x14>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d8f7      	bhi.n	8004196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	4413      	add	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d108      	bne.n	80041ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	441a      	add	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	441a      	add	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d118      	bne.n	8004210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <prvInsertBlockIntoFreeList+0xac>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d00d      	beq.n	8004206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	441a      	add	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e008      	b.n	8004218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <prvInsertBlockIntoFreeList+0xac>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e003      	b.n	8004218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d002      	beq.n	8004226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	200019b4 	.word	0x200019b4
 8004234:	200019bc 	.word	0x200019bc

08004238 <memset>:
 8004238:	4603      	mov	r3, r0
 800423a:	4402      	add	r2, r0
 800423c:	4293      	cmp	r3, r2
 800423e:	d100      	bne.n	8004242 <memset+0xa>
 8004240:	4770      	bx	lr
 8004242:	f803 1b01 	strb.w	r1, [r3], #1
 8004246:	e7f9      	b.n	800423c <memset+0x4>

08004248 <__libc_init_array>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	2600      	movs	r6, #0
 800424c:	4d0c      	ldr	r5, [pc, #48]	@ (8004280 <__libc_init_array+0x38>)
 800424e:	4c0d      	ldr	r4, [pc, #52]	@ (8004284 <__libc_init_array+0x3c>)
 8004250:	1b64      	subs	r4, r4, r5
 8004252:	10a4      	asrs	r4, r4, #2
 8004254:	42a6      	cmp	r6, r4
 8004256:	d109      	bne.n	800426c <__libc_init_array+0x24>
 8004258:	f000 f828 	bl	80042ac <_init>
 800425c:	2600      	movs	r6, #0
 800425e:	4d0a      	ldr	r5, [pc, #40]	@ (8004288 <__libc_init_array+0x40>)
 8004260:	4c0a      	ldr	r4, [pc, #40]	@ (800428c <__libc_init_array+0x44>)
 8004262:	1b64      	subs	r4, r4, r5
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	42a6      	cmp	r6, r4
 8004268:	d105      	bne.n	8004276 <__libc_init_array+0x2e>
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004270:	4798      	blx	r3
 8004272:	3601      	adds	r6, #1
 8004274:	e7ee      	b.n	8004254 <__libc_init_array+0xc>
 8004276:	f855 3b04 	ldr.w	r3, [r5], #4
 800427a:	4798      	blx	r3
 800427c:	3601      	adds	r6, #1
 800427e:	e7f2      	b.n	8004266 <__libc_init_array+0x1e>
 8004280:	0800438c 	.word	0x0800438c
 8004284:	0800438c 	.word	0x0800438c
 8004288:	0800438c 	.word	0x0800438c
 800428c:	08004390 	.word	0x08004390

08004290 <memcpy>:
 8004290:	440a      	add	r2, r1
 8004292:	4291      	cmp	r1, r2
 8004294:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004298:	d100      	bne.n	800429c <memcpy+0xc>
 800429a:	4770      	bx	lr
 800429c:	b510      	push	{r4, lr}
 800429e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a2:	4291      	cmp	r1, r2
 80042a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a8:	d1f9      	bne.n	800429e <memcpy+0xe>
 80042aa:	bd10      	pop	{r4, pc}

080042ac <_init>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr

080042b8 <_fini>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr
