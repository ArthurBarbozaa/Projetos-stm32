
RTOS-Semaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eec  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004ffc  08004ffc  00005ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005140  08005140  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005140  08005140  00007060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005140  08005140  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005140  08005140  00006140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005148  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba8  20000060  080051a8  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c08  080051a8  00007c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d89  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb6  00000000  00000000  00019e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5a  00000000  00000000  0001dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b12  00000000  00000000  0001e97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011541  00000000  00000000  0002148c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092192  00000000  00000000  000329cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4b5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  000c4ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c96dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fe4 	.word	0x08004fe4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004fe4 	.word	0x08004fe4

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa54 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f856 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f890 	bl	8000280 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fbc4 	bl	80018ec <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semTurnsRedLed */
  semTurnsRedLedHandle = osSemaphoreNew(1, 0, &semTurnsRedLed_attributes);
 8000164:	4a19      	ldr	r2, [pc, #100]	@ (80001cc <main+0x7c>)
 8000166:	2100      	movs	r1, #0
 8000168:	2001      	movs	r0, #1
 800016a:	f001 fcb4 	bl	8001ad6 <osSemaphoreNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a17      	ldr	r2, [pc, #92]	@ (80001d0 <main+0x80>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of semTurnsGreenLed */
  semTurnsGreenLedHandle = osSemaphoreNew(1, 1, &semTurnsGreenLed_attributes);
 8000174:	4a17      	ldr	r2, [pc, #92]	@ (80001d4 <main+0x84>)
 8000176:	2101      	movs	r1, #1
 8000178:	2001      	movs	r0, #1
 800017a:	f001 fcac 	bl	8001ad6 <osSemaphoreNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a15      	ldr	r2, [pc, #84]	@ (80001d8 <main+0x88>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of semTurnsYellowLed */
  semTurnsYellowLedHandle = osSemaphoreNew(1, 0, &semTurnsYellowLed_attributes);
 8000184:	4a15      	ldr	r2, [pc, #84]	@ (80001dc <main+0x8c>)
 8000186:	2100      	movs	r1, #0
 8000188:	2001      	movs	r0, #1
 800018a:	f001 fca4 	bl	8001ad6 <osSemaphoreNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a13      	ldr	r2, [pc, #76]	@ (80001e0 <main+0x90>)
 8000192:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BlinkLedYellow */
  BlinkLedYellowHandle = osThreadNew(StartBlinkLedYellow, NULL, &BlinkLedYellow_attributes);
 8000194:	4a13      	ldr	r2, [pc, #76]	@ (80001e4 <main+0x94>)
 8000196:	2100      	movs	r1, #0
 8000198:	4813      	ldr	r0, [pc, #76]	@ (80001e8 <main+0x98>)
 800019a:	f001 fbef 	bl	800197c <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a12      	ldr	r2, [pc, #72]	@ (80001ec <main+0x9c>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* creation of BlinkLedGreen */
  BlinkLedGreenHandle = osThreadNew(StartBlinkLedGreen, NULL, &BlinkLedGreen_attributes);
 80001a4:	4a12      	ldr	r2, [pc, #72]	@ (80001f0 <main+0xa0>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	4812      	ldr	r0, [pc, #72]	@ (80001f4 <main+0xa4>)
 80001aa:	f001 fbe7 	bl	800197c <osThreadNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a11      	ldr	r2, [pc, #68]	@ (80001f8 <main+0xa8>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* creation of BlinkLedRed */
  BlinkLedRedHandle = osThreadNew(StartBlinkLedRed, NULL, &BlinkLedRed_attributes);
 80001b4:	4a11      	ldr	r2, [pc, #68]	@ (80001fc <main+0xac>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4811      	ldr	r0, [pc, #68]	@ (8000200 <main+0xb0>)
 80001ba:	f001 fbdf 	bl	800197c <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a10      	ldr	r2, [pc, #64]	@ (8000204 <main+0xb4>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f001 fbb4 	bl	8001930 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	bf00      	nop
 80001ca:	e7fd      	b.n	80001c8 <main+0x78>
 80001cc:	080050e4 	.word	0x080050e4
 80001d0:	20000088 	.word	0x20000088
 80001d4:	080050f4 	.word	0x080050f4
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08005104 	.word	0x08005104
 80001e0:	20000090 	.word	0x20000090
 80001e4:	08005078 	.word	0x08005078
 80001e8:	080002e9 	.word	0x080002e9
 80001ec:	2000007c 	.word	0x2000007c
 80001f0:	0800509c 	.word	0x0800509c
 80001f4:	08000335 	.word	0x08000335
 80001f8:	20000080 	.word	0x20000080
 80001fc:	080050c0 	.word	0x080050c0
 8000200:	08000381 	.word	0x08000381
 8000204:	20000084 	.word	0x20000084

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	@ 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f004 fdf6 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fca6 	bl	8000b90 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800024a:	f000 f8ce 	bl	80003ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f000 ff14 	bl	8001094 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000272:	f000 f8ba 	bl	80003ea <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	@ 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <MX_GPIO_Init+0x60>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a11      	ldr	r2, [pc, #68]	@ (80002e0 <MX_GPIO_Init+0x60>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <MX_GPIO_Init+0x60>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|YELLOW_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80002b2:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <MX_GPIO_Init+0x64>)
 80002b4:	f000 fc3a 	bl	8000b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_LED_Pin YELLOW_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|YELLOW_LED_Pin|GREEN_LED_Pin;
 80002b8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80002bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	2301      	movs	r3, #1
 80002c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c6:	2302      	movs	r3, #2
 80002c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ca:	f107 0308 	add.w	r3, r7, #8
 80002ce:	4619      	mov	r1, r3
 80002d0:	4804      	ldr	r0, [pc, #16]	@ (80002e4 <MX_GPIO_Init+0x64>)
 80002d2:	f000 faa7 	bl	8000824 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002d6:	bf00      	nop
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <StartBlinkLedYellow>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkLedYellow */
void StartBlinkLedYellow(void *argument)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	      osSemaphoreAcquire(semTurnsYellowLedHandle, osWaitForever);
 80002f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <StartBlinkLedYellow+0x40>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fc75 	bl	8001be8 <osSemaphoreAcquire>
	 	  HAL_GPIO_TogglePin(GPIOB, YELLOW_LED_Pin);
 80002fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000302:	480a      	ldr	r0, [pc, #40]	@ (800032c <StartBlinkLedYellow+0x44>)
 8000304:	f000 fc2a 	bl	8000b5c <HAL_GPIO_TogglePin>
	       osDelay(1500);
 8000308:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800030c:	f001 fbc8 	bl	8001aa0 <osDelay>
	       HAL_GPIO_TogglePin(GPIOB, YELLOW_LED_Pin);
 8000310:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <StartBlinkLedYellow+0x44>)
 8000316:	f000 fc21 	bl	8000b5c <HAL_GPIO_TogglePin>
	       osSemaphoreRelease(semTurnsRedLedHandle);
 800031a:	4b05      	ldr	r3, [pc, #20]	@ (8000330 <StartBlinkLedYellow+0x48>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fcb4 	bl	8001c8c <osSemaphoreRelease>
	      osSemaphoreAcquire(semTurnsYellowLedHandle, osWaitForever);
 8000324:	bf00      	nop
 8000326:	e7e3      	b.n	80002f0 <StartBlinkLedYellow+0x8>
 8000328:	20000090 	.word	0x20000090
 800032c:	40010c00 	.word	0x40010c00
 8000330:	20000088 	.word	0x20000088

08000334 <StartBlinkLedGreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkLedGreen */
void StartBlinkLedGreen(void *argument)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLedGreen */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(semTurnsGreenLedHandle,osWaitForever);
 800033c:	4b0d      	ldr	r3, [pc, #52]	@ (8000374 <StartBlinkLedGreen+0x40>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000344:	4618      	mov	r0, r3
 8000346:	f001 fc4f 	bl	8001be8 <osSemaphoreAcquire>
	  HAL_GPIO_TogglePin(GPIOB, GREEN_LED_Pin);
 800034a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800034e:	480a      	ldr	r0, [pc, #40]	@ (8000378 <StartBlinkLedGreen+0x44>)
 8000350:	f000 fc04 	bl	8000b5c <HAL_GPIO_TogglePin>
      osDelay(2500);
 8000354:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000358:	f001 fba2 	bl	8001aa0 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GREEN_LED_Pin);
 800035c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000360:	4805      	ldr	r0, [pc, #20]	@ (8000378 <StartBlinkLedGreen+0x44>)
 8000362:	f000 fbfb 	bl	8000b5c <HAL_GPIO_TogglePin>
      osSemaphoreRelease(semTurnsYellowLedHandle);
 8000366:	4b05      	ldr	r3, [pc, #20]	@ (800037c <StartBlinkLedGreen+0x48>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fc8e 	bl	8001c8c <osSemaphoreRelease>
	  osSemaphoreAcquire(semTurnsGreenLedHandle,osWaitForever);
 8000370:	bf00      	nop
 8000372:	e7e3      	b.n	800033c <StartBlinkLedGreen+0x8>
 8000374:	2000008c 	.word	0x2000008c
 8000378:	40010c00 	.word	0x40010c00
 800037c:	20000090 	.word	0x20000090

08000380 <StartBlinkLedRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkLedRed */
void StartBlinkLedRed(void *argument)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLedRed */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(semTurnsRedLedHandle, osWaitForever);
 8000388:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <StartBlinkLedRed+0x40>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fc29 	bl	8001be8 <osSemaphoreAcquire>
	  HAL_GPIO_TogglePin(GPIOB, RED_LED_Pin);
 8000396:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800039a:	480a      	ldr	r0, [pc, #40]	@ (80003c4 <StartBlinkLedRed+0x44>)
 800039c:	f000 fbde 	bl	8000b5c <HAL_GPIO_TogglePin>
	  osDelay(2000);
 80003a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003a4:	f001 fb7c 	bl	8001aa0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, RED_LED_Pin);
 80003a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ac:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <StartBlinkLedRed+0x44>)
 80003ae:	f000 fbd5 	bl	8000b5c <HAL_GPIO_TogglePin>
	  osSemaphoreRelease(semTurnsGreenLedHandle);
 80003b2:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <StartBlinkLedRed+0x48>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fc68 	bl	8001c8c <osSemaphoreRelease>
	  osSemaphoreAcquire(semTurnsRedLedHandle, osWaitForever);
 80003bc:	bf00      	nop
 80003be:	e7e3      	b.n	8000388 <StartBlinkLedRed+0x8>
 80003c0:	20000088 	.word	0x20000088
 80003c4:	40010c00 	.word	0x40010c00
 80003c8:	2000008c 	.word	0x2000008c

080003cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80003dc:	d101      	bne.n	80003e2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80003de:	f000 f925 	bl	800062c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ee:	b672      	cpsid	i
}
 80003f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f2:	bf00      	nop
 80003f4:	e7fd      	b.n	80003f2 <Error_Handler+0x8>
	...

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <HAL_MspInit+0x68>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a17      	ldr	r2, [pc, #92]	@ (8000460 <HAL_MspInit+0x68>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <HAL_MspInit+0x68>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <HAL_MspInit+0x68>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a11      	ldr	r2, [pc, #68]	@ (8000460 <HAL_MspInit+0x68>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <HAL_MspInit+0x68>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	210f      	movs	r1, #15
 8000432:	f06f 0001 	mvn.w	r0, #1
 8000436:	f000 f9ca 	bl	80007ce <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800043a:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <HAL_MspInit+0x6c>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	4a04      	ldr	r2, [pc, #16]	@ (8000464 <HAL_MspInit+0x6c>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	40010000 	.word	0x40010000

08000468 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08e      	sub	sp, #56	@ 0x38
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000470:	2300      	movs	r3, #0
 8000472:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000474:	2300      	movs	r3, #0
 8000476:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000478:	2300      	movs	r3, #0
 800047a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800047e:	4b34      	ldr	r3, [pc, #208]	@ (8000550 <HAL_InitTick+0xe8>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a33      	ldr	r2, [pc, #204]	@ (8000550 <HAL_InitTick+0xe8>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b31      	ldr	r3, [pc, #196]	@ (8000550 <HAL_InitTick+0xe8>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000496:	f107 0210 	add.w	r2, r7, #16
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 ff53 	bl	800134c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004a6:	6a3b      	ldr	r3, [r7, #32]
 80004a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d103      	bne.n	80004b8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004b0:	f000 ff38 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
 80004b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80004b6:	e004      	b.n	80004c2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004b8:	f000 ff34 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
 80004bc:	4603      	mov	r3, r0
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004c4:	4a23      	ldr	r2, [pc, #140]	@ (8000554 <HAL_InitTick+0xec>)
 80004c6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ca:	0c9b      	lsrs	r3, r3, #18
 80004cc:	3b01      	subs	r3, #1
 80004ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80004d0:	4b21      	ldr	r3, [pc, #132]	@ (8000558 <HAL_InitTick+0xf0>)
 80004d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80004d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000558 <HAL_InitTick+0xf0>)
 80004da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004de:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80004e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000558 <HAL_InitTick+0xf0>)
 80004e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004e4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80004e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <HAL_InitTick+0xf0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <HAL_InitTick+0xf0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f2:	4b19      	ldr	r3, [pc, #100]	@ (8000558 <HAL_InitTick+0xf0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80004f8:	4817      	ldr	r0, [pc, #92]	@ (8000558 <HAL_InitTick+0xf0>)
 80004fa:	f000 ff75 	bl	80013e8 <HAL_TIM_Base_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000504:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000508:	2b00      	cmp	r3, #0
 800050a:	d11b      	bne.n	8000544 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800050c:	4812      	ldr	r0, [pc, #72]	@ (8000558 <HAL_InitTick+0xf0>)
 800050e:	f000 ffc3 	bl	8001498 <HAL_TIM_Base_Start_IT>
 8000512:	4603      	mov	r3, r0
 8000514:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000518:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000520:	201c      	movs	r0, #28
 8000522:	f000 f970 	bl	8000806 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d808      	bhi.n	800053e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800052c:	2200      	movs	r2, #0
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	201c      	movs	r0, #28
 8000532:	f000 f94c 	bl	80007ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000536:	4a09      	ldr	r2, [pc, #36]	@ (800055c <HAL_InitTick+0xf4>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	e002      	b.n	8000544 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000544:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000548:	4618      	mov	r0, r3
 800054a:	3738      	adds	r7, #56	@ 0x38
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	431bde83 	.word	0x431bde83
 8000558:	20000094 	.word	0x20000094
 800055c:	20000004 	.word	0x20000004

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <NMI_Handler+0x4>

08000568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <MemManage_Handler+0x4>

08000578 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <UsageFault_Handler+0x4>

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <TIM2_IRQHandler+0x10>)
 800059a:	f000 ffcf 	bl	800153c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000094 	.word	0x20000094

080005a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f7ff fff8 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ba:	490c      	ldr	r1, [pc, #48]	@ (80005ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005bc:	4a0c      	ldr	r2, [pc, #48]	@ (80005f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005d0:	4c09      	ldr	r4, [pc, #36]	@ (80005f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f004 fc79 	bl	8004ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fdb5 	bl	8000150 <main>
  bx lr
 80005e6:	4770      	bx	lr
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005f0:	08005148 	.word	0x08005148
  ldr r2, =_sbss
 80005f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005f8:	20001c08 	.word	0x20001c08

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <HAL_Init+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <HAL_Init+0x28>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f8d1 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000616:	200f      	movs	r0, #15
 8000618:	f7ff ff26 	bl	8000468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800061c:	f7ff feec 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40022000 	.word	0x40022000

0800062c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <HAL_IncTick+0x1c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b05      	ldr	r3, [pc, #20]	@ (800064c <HAL_IncTick+0x20>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a03      	ldr	r2, [pc, #12]	@ (800064c <HAL_IncTick+0x20>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	20000008 	.word	0x20000008
 800064c:	200000dc 	.word	0x200000dc

08000650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b02      	ldr	r3, [pc, #8]	@ (8000660 <HAL_GetTick+0x10>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	200000dc 	.word	0x200000dc

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4906      	ldr	r1, [pc, #24]	@ (80006fc <__NVIC_EnableIRQ+0x34>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100

08000700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db0a      	blt.n	800072a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	490c      	ldr	r1, [pc, #48]	@ (800074c <__NVIC_SetPriority+0x4c>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	0112      	lsls	r2, r2, #4
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440b      	add	r3, r1
 8000724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000728:	e00a      	b.n	8000740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4908      	ldr	r1, [pc, #32]	@ (8000750 <__NVIC_SetPriority+0x50>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	3b04      	subs	r3, #4
 8000738:	0112      	lsls	r2, r2, #4
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	440b      	add	r3, r1
 800073e:	761a      	strb	r2, [r3, #24]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000754:	b480      	push	{r7}
 8000756:	b089      	sub	sp, #36	@ 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f1c3 0307 	rsb	r3, r3, #7
 800076e:	2b04      	cmp	r3, #4
 8000770:	bf28      	it	cs
 8000772:	2304      	movcs	r3, #4
 8000774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3304      	adds	r3, #4
 800077a:	2b06      	cmp	r3, #6
 800077c:	d902      	bls.n	8000784 <NVIC_EncodePriority+0x30>
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3b03      	subs	r3, #3
 8000782:	e000      	b.n	8000786 <NVIC_EncodePriority+0x32>
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43da      	mvns	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	401a      	ands	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	43d9      	mvns	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	4313      	orrs	r3, r2
         );
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3724      	adds	r7, #36	@ 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff4f 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff64 	bl	80006ac <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ffb2 	bl	8000754 <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff81 	bl	8000700 <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff57 	bl	80006c8 <__NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b08b      	sub	sp, #44	@ 0x2c
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000836:	e169      	b.n	8000b0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000838:	2201      	movs	r2, #1
 800083a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	69fa      	ldr	r2, [r7, #28]
 8000848:	4013      	ands	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	429a      	cmp	r2, r3
 8000852:	f040 8158 	bne.w	8000b06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4a9a      	ldr	r2, [pc, #616]	@ (8000ac4 <HAL_GPIO_Init+0x2a0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d05e      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 8000860:	4a98      	ldr	r2, [pc, #608]	@ (8000ac4 <HAL_GPIO_Init+0x2a0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d875      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 8000866:	4a98      	ldr	r2, [pc, #608]	@ (8000ac8 <HAL_GPIO_Init+0x2a4>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d058      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 800086c:	4a96      	ldr	r2, [pc, #600]	@ (8000ac8 <HAL_GPIO_Init+0x2a4>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d86f      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 8000872:	4a96      	ldr	r2, [pc, #600]	@ (8000acc <HAL_GPIO_Init+0x2a8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d052      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 8000878:	4a94      	ldr	r2, [pc, #592]	@ (8000acc <HAL_GPIO_Init+0x2a8>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d869      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 800087e:	4a94      	ldr	r2, [pc, #592]	@ (8000ad0 <HAL_GPIO_Init+0x2ac>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d04c      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 8000884:	4a92      	ldr	r2, [pc, #584]	@ (8000ad0 <HAL_GPIO_Init+0x2ac>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d863      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 800088a:	4a92      	ldr	r2, [pc, #584]	@ (8000ad4 <HAL_GPIO_Init+0x2b0>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d046      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 8000890:	4a90      	ldr	r2, [pc, #576]	@ (8000ad4 <HAL_GPIO_Init+0x2b0>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d85d      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 8000896:	2b12      	cmp	r3, #18
 8000898:	d82a      	bhi.n	80008f0 <HAL_GPIO_Init+0xcc>
 800089a:	2b12      	cmp	r3, #18
 800089c:	d859      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 800089e:	a201      	add	r2, pc, #4	@ (adr r2, 80008a4 <HAL_GPIO_Init+0x80>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	0800091f 	.word	0x0800091f
 80008a8:	080008f9 	.word	0x080008f9
 80008ac:	0800090b 	.word	0x0800090b
 80008b0:	0800094d 	.word	0x0800094d
 80008b4:	08000953 	.word	0x08000953
 80008b8:	08000953 	.word	0x08000953
 80008bc:	08000953 	.word	0x08000953
 80008c0:	08000953 	.word	0x08000953
 80008c4:	08000953 	.word	0x08000953
 80008c8:	08000953 	.word	0x08000953
 80008cc:	08000953 	.word	0x08000953
 80008d0:	08000953 	.word	0x08000953
 80008d4:	08000953 	.word	0x08000953
 80008d8:	08000953 	.word	0x08000953
 80008dc:	08000953 	.word	0x08000953
 80008e0:	08000953 	.word	0x08000953
 80008e4:	08000953 	.word	0x08000953
 80008e8:	08000901 	.word	0x08000901
 80008ec:	08000915 	.word	0x08000915
 80008f0:	4a79      	ldr	r2, [pc, #484]	@ (8000ad8 <HAL_GPIO_Init+0x2b4>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d013      	beq.n	800091e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008f6:	e02c      	b.n	8000952 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e029      	b.n	8000954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	3304      	adds	r3, #4
 8000906:	623b      	str	r3, [r7, #32]
          break;
 8000908:	e024      	b.n	8000954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	3308      	adds	r3, #8
 8000910:	623b      	str	r3, [r7, #32]
          break;
 8000912:	e01f      	b.n	8000954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	330c      	adds	r3, #12
 800091a:	623b      	str	r3, [r7, #32]
          break;
 800091c:	e01a      	b.n	8000954 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000926:	2304      	movs	r3, #4
 8000928:	623b      	str	r3, [r7, #32]
          break;
 800092a:	e013      	b.n	8000954 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d105      	bne.n	8000940 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000934:	2308      	movs	r3, #8
 8000936:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	611a      	str	r2, [r3, #16]
          break;
 800093e:	e009      	b.n	8000954 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000940:	2308      	movs	r3, #8
 8000942:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	615a      	str	r2, [r3, #20]
          break;
 800094a:	e003      	b.n	8000954 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
          break;
 8000950:	e000      	b.n	8000954 <HAL_GPIO_Init+0x130>
          break;
 8000952:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	2bff      	cmp	r3, #255	@ 0xff
 8000958:	d801      	bhi.n	800095e <HAL_GPIO_Init+0x13a>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	e001      	b.n	8000962 <HAL_GPIO_Init+0x13e>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3304      	adds	r3, #4
 8000962:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	2bff      	cmp	r3, #255	@ 0xff
 8000968:	d802      	bhi.n	8000970 <HAL_GPIO_Init+0x14c>
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0x152>
 8000970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000972:	3b08      	subs	r3, #8
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	210f      	movs	r1, #15
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	401a      	ands	r2, r3
 8000988:	6a39      	ldr	r1, [r7, #32]
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	431a      	orrs	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a4:	4b4d      	ldr	r3, [pc, #308]	@ (8000adc <HAL_GPIO_Init+0x2b8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a4c      	ldr	r2, [pc, #304]	@ (8000adc <HAL_GPIO_Init+0x2b8>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b4a      	ldr	r3, [pc, #296]	@ (8000adc <HAL_GPIO_Init+0x2b8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009bc:	4a48      	ldr	r2, [pc, #288]	@ (8000ae0 <HAL_GPIO_Init+0x2bc>)
 80009be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3302      	adds	r3, #2
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009cc:	f003 0303 	and.w	r3, r3, #3
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	220f      	movs	r2, #15
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a40      	ldr	r2, [pc, #256]	@ (8000ae4 <HAL_GPIO_Init+0x2c0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d013      	beq.n	8000a10 <HAL_GPIO_Init+0x1ec>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a3f      	ldr	r2, [pc, #252]	@ (8000ae8 <HAL_GPIO_Init+0x2c4>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d00d      	beq.n	8000a0c <HAL_GPIO_Init+0x1e8>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a3e      	ldr	r2, [pc, #248]	@ (8000aec <HAL_GPIO_Init+0x2c8>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d007      	beq.n	8000a08 <HAL_GPIO_Init+0x1e4>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a3d      	ldr	r2, [pc, #244]	@ (8000af0 <HAL_GPIO_Init+0x2cc>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d101      	bne.n	8000a04 <HAL_GPIO_Init+0x1e0>
 8000a00:	2303      	movs	r3, #3
 8000a02:	e006      	b.n	8000a12 <HAL_GPIO_Init+0x1ee>
 8000a04:	2304      	movs	r3, #4
 8000a06:	e004      	b.n	8000a12 <HAL_GPIO_Init+0x1ee>
 8000a08:	2302      	movs	r3, #2
 8000a0a:	e002      	b.n	8000a12 <HAL_GPIO_Init+0x1ee>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e000      	b.n	8000a12 <HAL_GPIO_Init+0x1ee>
 8000a10:	2300      	movs	r3, #0
 8000a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a14:	f002 0203 	and.w	r2, r2, #3
 8000a18:	0092      	lsls	r2, r2, #2
 8000a1a:	4093      	lsls	r3, r2
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a22:	492f      	ldr	r1, [pc, #188]	@ (8000ae0 <HAL_GPIO_Init+0x2bc>)
 8000a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	3302      	adds	r3, #2
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d006      	beq.n	8000a4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	492c      	ldr	r1, [pc, #176]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	608b      	str	r3, [r1, #8]
 8000a48:	e006      	b.n	8000a58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	4928      	ldr	r1, [pc, #160]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a64:	4b23      	ldr	r3, [pc, #140]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	4922      	ldr	r1, [pc, #136]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60cb      	str	r3, [r1, #12]
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a72:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	491e      	ldr	r1, [pc, #120]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	4918      	ldr	r1, [pc, #96]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	604b      	str	r3, [r1, #4]
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	4914      	ldr	r1, [pc, #80]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d021      	beq.n	8000af8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	490e      	ldr	r1, [pc, #56]	@ (8000af4 <HAL_GPIO_Init+0x2d0>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	600b      	str	r3, [r1, #0]
 8000ac0:	e021      	b.n	8000b06 <HAL_GPIO_Init+0x2e2>
 8000ac2:	bf00      	nop
 8000ac4:	10320000 	.word	0x10320000
 8000ac8:	10310000 	.word	0x10310000
 8000acc:	10220000 	.word	0x10220000
 8000ad0:	10210000 	.word	0x10210000
 8000ad4:	10120000 	.word	0x10120000
 8000ad8:	10110000 	.word	0x10110000
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010000 	.word	0x40010000
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40011000 	.word	0x40011000
 8000af0:	40011400 	.word	0x40011400
 8000af4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000af8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <HAL_GPIO_Init+0x304>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	4909      	ldr	r1, [pc, #36]	@ (8000b28 <HAL_GPIO_Init+0x304>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b08:	3301      	adds	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b12:	fa22 f303 	lsr.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f47f ae8e 	bne.w	8000838 <HAL_GPIO_Init+0x14>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	372c      	adds	r7, #44	@ 0x2c
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	40010400 	.word	0x40010400

08000b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b3c:	787b      	ldrb	r3, [r7, #1]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b48:	e003      	b.n	8000b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	041a      	lsls	r2, r3, #16
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	611a      	str	r2, [r3, #16]
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b6e:	887a      	ldrh	r2, [r7, #2]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4013      	ands	r3, r2
 8000b74:	041a      	lsls	r2, r3, #16
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43d9      	mvns	r1, r3
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	611a      	str	r2, [r3, #16]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
	...

08000b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e272      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8087 	beq.w	8000cbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb0:	4b92      	ldr	r3, [pc, #584]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d00c      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bbc:	4b8f      	ldr	r3, [pc, #572]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d112      	bne.n	8000bee <HAL_RCC_OscConfig+0x5e>
 8000bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bd4:	d10b      	bne.n	8000bee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd6:	4b89      	ldr	r3, [pc, #548]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d06c      	beq.n	8000cbc <HAL_RCC_OscConfig+0x12c>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d168      	bne.n	8000cbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e24c      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bf6:	d106      	bne.n	8000c06 <HAL_RCC_OscConfig+0x76>
 8000bf8:	4b80      	ldr	r3, [pc, #512]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a7f      	ldr	r2, [pc, #508]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	e02e      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10c      	bne.n	8000c28 <HAL_RCC_OscConfig+0x98>
 8000c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a7a      	ldr	r2, [pc, #488]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	4b78      	ldr	r3, [pc, #480]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a77      	ldr	r2, [pc, #476]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e01d      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c30:	d10c      	bne.n	8000c4c <HAL_RCC_OscConfig+0xbc>
 8000c32:	4b72      	ldr	r3, [pc, #456]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a71      	ldr	r2, [pc, #452]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b6f      	ldr	r3, [pc, #444]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a6e      	ldr	r2, [pc, #440]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e00b      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a6a      	ldr	r2, [pc, #424]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b68      	ldr	r3, [pc, #416]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a67      	ldr	r2, [pc, #412]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fcf0 	bl	8000650 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fcec 	bl	8000650 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	@ 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e200      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c86:	4b5d      	ldr	r3, [pc, #372]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f0      	beq.n	8000c74 <HAL_RCC_OscConfig+0xe4>
 8000c92:	e014      	b.n	8000cbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fcdc 	bl	8000650 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fcd8 	bl	8000650 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	@ 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e1ec      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cae:	4b53      	ldr	r3, [pc, #332]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f0      	bne.n	8000c9c <HAL_RCC_OscConfig+0x10c>
 8000cba:	e000      	b.n	8000cbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d063      	beq.n	8000d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cca:	4b4c      	ldr	r3, [pc, #304]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00b      	beq.n	8000cee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cd6:	4b49      	ldr	r3, [pc, #292]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d11c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x18c>
 8000ce2:	4b46      	ldr	r3, [pc, #280]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d116      	bne.n	8000d1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cee:	4b43      	ldr	r3, [pc, #268]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <HAL_RCC_OscConfig+0x176>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d001      	beq.n	8000d06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e1c0      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d06:	4b3d      	ldr	r3, [pc, #244]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4939      	ldr	r1, [pc, #228]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	e03a      	b.n	8000d92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d020      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fc91 	bl	8000650 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fc8d 	bl	8000650 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e1a1      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	4b2d      	ldr	r3, [pc, #180]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d50:	4b2a      	ldr	r3, [pc, #168]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4927      	ldr	r1, [pc, #156]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e015      	b.n	8000d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d66:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fc70 	bl	8000650 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d74:	f7ff fc6c 	bl	8000650 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e180      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d03a      	beq.n	8000e14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d019      	beq.n	8000dda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_RCC_OscConfig+0x274>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dac:	f7ff fc50 	bl	8000650 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fc4c 	bl	8000650 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e160      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 faea 	bl	80013ac <RCC_Delay>
 8000dd8:	e01c      	b.n	8000e14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_RCC_OscConfig+0x274>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc36 	bl	8000650 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de6:	e00f      	b.n	8000e08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc32 	bl	8000650 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d908      	bls.n	8000e08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e146      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	42420000 	.word	0x42420000
 8000e04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	4b92      	ldr	r3, [pc, #584]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1e9      	bne.n	8000de8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80a6 	beq.w	8000f6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e26:	4b8b      	ldr	r3, [pc, #556]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10d      	bne.n	8000e4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b88      	ldr	r3, [pc, #544]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a87      	ldr	r2, [pc, #540]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b85      	ldr	r3, [pc, #532]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4e:	4b82      	ldr	r3, [pc, #520]	@ (8001058 <HAL_RCC_OscConfig+0x4c8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d118      	bne.n	8000e8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001058 <HAL_RCC_OscConfig+0x4c8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001058 <HAL_RCC_OscConfig+0x4c8>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e66:	f7ff fbf3 	bl	8000650 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6e:	f7ff fbef 	bl	8000650 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b64      	cmp	r3, #100	@ 0x64
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e103      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e80:	4b75      	ldr	r3, [pc, #468]	@ (8001058 <HAL_RCC_OscConfig+0x4c8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d106      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x312>
 8000e94:	4b6f      	ldr	r3, [pc, #444]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a6e      	ldr	r2, [pc, #440]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6213      	str	r3, [r2, #32]
 8000ea0:	e02d      	b.n	8000efe <HAL_RCC_OscConfig+0x36e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x334>
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a69      	ldr	r2, [pc, #420]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	4b67      	ldr	r3, [pc, #412]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a66      	ldr	r2, [pc, #408]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	6213      	str	r3, [r2, #32]
 8000ec2:	e01c      	b.n	8000efe <HAL_RCC_OscConfig+0x36e>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d10c      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x356>
 8000ecc:	4b61      	ldr	r3, [pc, #388]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a60      	ldr	r2, [pc, #384]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a5d      	ldr	r2, [pc, #372]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
 8000ee4:	e00b      	b.n	8000efe <HAL_RCC_OscConfig+0x36e>
 8000ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a5a      	ldr	r2, [pc, #360]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	f023 0301 	bic.w	r3, r3, #1
 8000ef0:	6213      	str	r3, [r2, #32]
 8000ef2:	4b58      	ldr	r3, [pc, #352]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a57      	ldr	r2, [pc, #348]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d015      	beq.n	8000f32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fba3 	bl	8000650 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0c:	e00a      	b.n	8000f24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0e:	f7ff fb9f 	bl	8000650 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e0b1      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f24:	4b4b      	ldr	r3, [pc, #300]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0ee      	beq.n	8000f0e <HAL_RCC_OscConfig+0x37e>
 8000f30:	e014      	b.n	8000f5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fb8d 	bl	8000650 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	e00a      	b.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3a:	f7ff fb89 	bl	8000650 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e09b      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f50:	4b40      	ldr	r3, [pc, #256]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1ee      	bne.n	8000f3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d105      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f62:	4b3c      	ldr	r3, [pc, #240]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a3b      	ldr	r2, [pc, #236]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8087 	beq.w	8001086 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f78:	4b36      	ldr	r3, [pc, #216]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d061      	beq.n	8001048 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d146      	bne.n	800101a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8c:	4b33      	ldr	r3, [pc, #204]	@ (800105c <HAL_RCC_OscConfig+0x4cc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f92:	f7ff fb5d 	bl	8000650 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fb59 	bl	8000650 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e06d      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fac:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f0      	bne.n	8000f9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc0:	d108      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc2:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	4921      	ldr	r1, [pc, #132]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a19      	ldr	r1, [r3, #32]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	491b      	ldr	r1, [pc, #108]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_RCC_OscConfig+0x4cc>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fb2d 	bl	8000650 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffa:	f7ff fb29 	bl	8000650 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e03d      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x46a>
 8001018:	e035      	b.n	8001086 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <HAL_RCC_OscConfig+0x4cc>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fb16 	bl	8000650 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001028:	f7ff fb12 	bl	8000650 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e026      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0x498>
 8001046:	e01e      	b.n	8001086 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d107      	bne.n	8001060 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e019      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
 8001054:	40021000 	.word	0x40021000
 8001058:	40007000 	.word	0x40007000
 800105c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <HAL_RCC_OscConfig+0x500>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	429a      	cmp	r2, r3
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	429a      	cmp	r2, r3
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0d0      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d910      	bls.n	80010d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b6:	4b67      	ldr	r3, [pc, #412]	@ (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 0207 	bic.w	r2, r3, #7
 80010be:	4965      	ldr	r1, [pc, #404]	@ (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c6:	4b63      	ldr	r3, [pc, #396]	@ (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0b8      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d020      	beq.n	8001126 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f0:	4b59      	ldr	r3, [pc, #356]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a58      	ldr	r2, [pc, #352]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001108:	4b53      	ldr	r3, [pc, #332]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a52      	ldr	r2, [pc, #328]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001112:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001114:	4b50      	ldr	r3, [pc, #320]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	494d      	ldr	r1, [pc, #308]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	4313      	orrs	r3, r2
 8001124:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d040      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d107      	bne.n	800114a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	4b47      	ldr	r3, [pc, #284]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d115      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e07f      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d107      	bne.n	8001162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001152:	4b41      	ldr	r3, [pc, #260]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d109      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e073      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001162:	4b3d      	ldr	r3, [pc, #244]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e06b      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001172:	4b39      	ldr	r3, [pc, #228]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f023 0203 	bic.w	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4936      	ldr	r1, [pc, #216]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001184:	f7ff fa64 	bl	8000650 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	e00a      	b.n	80011a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118c:	f7ff fa60 	bl	8000650 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e053      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 020c 	and.w	r2, r3, #12
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d1eb      	bne.n	800118c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b4:	4b27      	ldr	r3, [pc, #156]	@ (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d210      	bcs.n	80011e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c2:	4b24      	ldr	r3, [pc, #144]	@ (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 0207 	bic.w	r2, r3, #7
 80011ca:	4922      	ldr	r1, [pc, #136]	@ (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d001      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e032      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4916      	ldr	r1, [pc, #88]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	490e      	ldr	r1, [pc, #56]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001222:	f000 f821 	bl	8001268 <HAL_RCC_GetSysClockFreq>
 8001226:	4602      	mov	r2, r0
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	490a      	ldr	r1, [pc, #40]	@ (800125c <HAL_RCC_ClockConfig+0x1c8>)
 8001234:	5ccb      	ldrb	r3, [r1, r3]
 8001236:	fa22 f303 	lsr.w	r3, r2, r3
 800123a:	4a09      	ldr	r2, [pc, #36]	@ (8001260 <HAL_RCC_ClockConfig+0x1cc>)
 800123c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_RCC_ClockConfig+0x1d0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f910 	bl	8000468 <HAL_InitTick>

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40022000 	.word	0x40022000
 8001258:	40021000 	.word	0x40021000
 800125c:	08005114 	.word	0x08005114
 8001260:	20000000 	.word	0x20000000
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001282:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <HAL_RCC_GetSysClockFreq+0x94>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b04      	cmp	r3, #4
 8001290:	d002      	beq.n	8001298 <HAL_RCC_GetSysClockFreq+0x30>
 8001292:	2b08      	cmp	r3, #8
 8001294:	d003      	beq.n	800129e <HAL_RCC_GetSysClockFreq+0x36>
 8001296:	e027      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x98>)
 800129a:	613b      	str	r3, [r7, #16]
      break;
 800129c:	e027      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	0c9b      	lsrs	r3, r3, #18
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	4a17      	ldr	r2, [pc, #92]	@ (8001304 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012a8:	5cd3      	ldrb	r3, [r2, r3]
 80012aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d010      	beq.n	80012d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_RCC_GetSysClockFreq+0x94>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	0c5b      	lsrs	r3, r3, #17
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	4a11      	ldr	r2, [pc, #68]	@ (8001308 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ca:	fb03 f202 	mul.w	r2, r3, r2
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e004      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <HAL_RCC_GetSysClockFreq+0xa4>)
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	613b      	str	r3, [r7, #16]
      break;
 80012e6:	e002      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ea:	613b      	str	r3, [r7, #16]
      break;
 80012ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ee:	693b      	ldr	r3, [r7, #16]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	007a1200 	.word	0x007a1200
 8001304:	0800512c 	.word	0x0800512c
 8001308:	0800513c 	.word	0x0800513c
 800130c:	003d0900 	.word	0x003d0900

08001310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001314:	4b02      	ldr	r3, [pc, #8]	@ (8001320 <HAL_RCC_GetHCLKFreq+0x10>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	20000000 	.word	0x20000000

08001324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001328:	f7ff fff2 	bl	8001310 <HAL_RCC_GetHCLKFreq>
 800132c:	4602      	mov	r2, r0
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	4903      	ldr	r1, [pc, #12]	@ (8001348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	08005124 	.word	0x08005124

0800134c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	220f      	movs	r2, #15
 800135a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800135c:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_RCC_GetClockConfig+0x58>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001368:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <HAL_RCC_GetClockConfig+0x58>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_RCC_GetClockConfig+0x58>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_RCC_GetClockConfig+0x58>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0207 	and.w	r2, r3, #7
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40022000 	.word	0x40022000

080013ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <RCC_Delay+0x34>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <RCC_Delay+0x38>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0a5b      	lsrs	r3, r3, #9
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013c8:	bf00      	nop
  }
  while (Delay --);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	60fa      	str	r2, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f9      	bne.n	80013c8 <RCC_Delay+0x1c>
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000000 	.word	0x20000000
 80013e4:	10624dd3 	.word	0x10624dd3

080013e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e041      	b.n	800147e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f839 	bl	8001486 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3304      	adds	r3, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f000 f99c 	bl	8001764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d001      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e03a      	b.n	8001526 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <HAL_TIM_Base_Start_IT+0x98>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00e      	beq.n	80014f0 <HAL_TIM_Base_Start_IT+0x58>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014da:	d009      	beq.n	80014f0 <HAL_TIM_Base_Start_IT+0x58>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <HAL_TIM_Base_Start_IT+0x9c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d004      	beq.n	80014f0 <HAL_TIM_Base_Start_IT+0x58>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <HAL_TIM_Base_Start_IT+0xa0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d111      	bne.n	8001514 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d010      	beq.n	8001524 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001512:	e007      	b.n	8001524 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0201 	orr.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40012c00 	.word	0x40012c00
 8001534:	40000400 	.word	0x40000400
 8001538:	40000800 	.word	0x40000800

0800153c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d020      	beq.n	80015a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01b      	beq.n	80015a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 0202 	mvn.w	r2, #2
 8001570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f8d1 	bl	800172e <HAL_TIM_IC_CaptureCallback>
 800158c:	e005      	b.n	800159a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f8c4 	bl	800171c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f8d3 	bl	8001740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d020      	beq.n	80015ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01b      	beq.n	80015ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f06f 0204 	mvn.w	r2, #4
 80015bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2202      	movs	r2, #2
 80015c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f8ab 	bl	800172e <HAL_TIM_IC_CaptureCallback>
 80015d8:	e005      	b.n	80015e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f89e 	bl	800171c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f8ad 	bl	8001740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d020      	beq.n	8001638 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01b      	beq.n	8001638 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0208 	mvn.w	r2, #8
 8001608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2204      	movs	r2, #4
 800160e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f885 	bl	800172e <HAL_TIM_IC_CaptureCallback>
 8001624:	e005      	b.n	8001632 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f878 	bl	800171c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f887 	bl	8001740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d020      	beq.n	8001684 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01b      	beq.n	8001684 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f06f 0210 	mvn.w	r2, #16
 8001654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2208      	movs	r2, #8
 800165a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f85f 	bl	800172e <HAL_TIM_IC_CaptureCallback>
 8001670:	e005      	b.n	800167e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f852 	bl	800171c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f861 	bl	8001740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00c      	beq.n	80016a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f06f 0201 	mvn.w	r2, #1
 80016a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7fe fe92 	bl	80003cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00c      	beq.n	80016cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80016c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f8c3 	bl	8001852 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00c      	beq.n	80016f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80016e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f831 	bl	8001752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00c      	beq.n	8001714 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f06f 0220 	mvn.w	r2, #32
 800170c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f896 	bl	8001840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a2f      	ldr	r2, [pc, #188]	@ (8001834 <TIM_Base_SetConfig+0xd0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00b      	beq.n	8001794 <TIM_Base_SetConfig+0x30>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001782:	d007      	beq.n	8001794 <TIM_Base_SetConfig+0x30>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a2c      	ldr	r2, [pc, #176]	@ (8001838 <TIM_Base_SetConfig+0xd4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d003      	beq.n	8001794 <TIM_Base_SetConfig+0x30>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a2b      	ldr	r2, [pc, #172]	@ (800183c <TIM_Base_SetConfig+0xd8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d108      	bne.n	80017a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800179a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a22      	ldr	r2, [pc, #136]	@ (8001834 <TIM_Base_SetConfig+0xd0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00b      	beq.n	80017c6 <TIM_Base_SetConfig+0x62>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b4:	d007      	beq.n	80017c6 <TIM_Base_SetConfig+0x62>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001838 <TIM_Base_SetConfig+0xd4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d003      	beq.n	80017c6 <TIM_Base_SetConfig+0x62>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1e      	ldr	r2, [pc, #120]	@ (800183c <TIM_Base_SetConfig+0xd8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d108      	bne.n	80017d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <TIM_Base_SetConfig+0xd0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d103      	bne.n	800180c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f023 0201 	bic.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	611a      	str	r2, [r3, #16]
  }
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40012c00 	.word	0x40012c00
 8001838:	40000400 	.word	0x40000400
 800183c:	40000800 	.word	0x40000800

08001840 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <__NVIC_SetPriority>:
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <SysTick_Handler+0x1c>)
 80018be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80018c0:	f002 f988 	bl	8003bd4 <xTaskGetSchedulerState>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d001      	beq.n	80018ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80018ca:	f003 f82d 	bl	8004928 <xPortSysTickHandler>
  }
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80018dc:	2100      	movs	r1, #0
 80018de:	f06f 0004 	mvn.w	r0, #4
 80018e2:	f7ff ffbf 	bl	8001864 <__NVIC_SetPriority>
#endif
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018f2:	f3ef 8305 	mrs	r3, IPSR
 80018f6:	603b      	str	r3, [r7, #0]
  return(result);
 80018f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80018fe:	f06f 0305 	mvn.w	r3, #5
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	e00c      	b.n	8001920 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <osKernelInitialize+0x40>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d105      	bne.n	800191a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <osKernelInitialize+0x40>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	e002      	b.n	8001920 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800191e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	200000e0 	.word	0x200000e0

08001930 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001936:	f3ef 8305 	mrs	r3, IPSR
 800193a:	603b      	str	r3, [r7, #0]
  return(result);
 800193c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001942:	f06f 0305 	mvn.w	r3, #5
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	e010      	b.n	800196c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <osKernelStart+0x48>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d109      	bne.n	8001966 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001952:	f7ff ffc1 	bl	80018d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <osKernelStart+0x48>)
 8001958:	2202      	movs	r2, #2
 800195a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800195c:	f001 fcda 	bl	8003314 <vTaskStartScheduler>
      stat = osOK;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	e002      	b.n	800196c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800196a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200000e0 	.word	0x200000e0

0800197c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b08e      	sub	sp, #56	@ 0x38
 8001980:	af04      	add	r7, sp, #16
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800198c:	f3ef 8305 	mrs	r3, IPSR
 8001990:	617b      	str	r3, [r7, #20]
  return(result);
 8001992:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001994:	2b00      	cmp	r3, #0
 8001996:	d17e      	bne.n	8001a96 <osThreadNew+0x11a>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d07b      	beq.n	8001a96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800199e:	2380      	movs	r3, #128	@ 0x80
 80019a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80019a2:	2318      	movs	r3, #24
 80019a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d045      	beq.n	8001a42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <osThreadNew+0x48>
        name = attr->name;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <osThreadNew+0x6e>
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b38      	cmp	r3, #56	@ 0x38
 80019dc:	d805      	bhi.n	80019ea <osThreadNew+0x6e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <osThreadNew+0x72>
        return (NULL);
 80019ea:	2300      	movs	r3, #0
 80019ec:	e054      	b.n	8001a98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00e      	beq.n	8001a24 <osThreadNew+0xa8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2ba7      	cmp	r3, #167	@ 0xa7
 8001a0c:	d90a      	bls.n	8001a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <osThreadNew+0xa8>
        mem = 1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	e010      	b.n	8001a46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10c      	bne.n	8001a46 <osThreadNew+0xca>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d108      	bne.n	8001a46 <osThreadNew+0xca>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d104      	bne.n	8001a46 <osThreadNew+0xca>
          mem = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	e001      	b.n	8001a46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d110      	bne.n	8001a6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a54:	9202      	str	r2, [sp, #8]
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	6a3a      	ldr	r2, [r7, #32]
 8001a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f001 fa62 	bl	8002f2c <xTaskCreateStatic>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	e013      	b.n	8001a96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d110      	bne.n	8001a96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f001 fab0 	bl	8002fec <xTaskCreate>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d001      	beq.n	8001a96 <osThreadNew+0x11a>
            hTask = NULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a96:	693b      	ldr	r3, [r7, #16]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001aa8:	f3ef 8305 	mrs	r3, IPSR
 8001aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8001aae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <osDelay+0x1c>
    stat = osErrorISR;
 8001ab4:	f06f 0305 	mvn.w	r3, #5
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e007      	b.n	8001acc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <osDelay+0x2c>
      vTaskDelay(ticks);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f001 fbee 	bl	80032a8 <vTaskDelay>
    }
  }

  return (stat);
 8001acc:	68fb      	ldr	r3, [r7, #12]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b08a      	sub	sp, #40	@ 0x28
 8001ada:	af02      	add	r7, sp, #8
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ae6:	f3ef 8305 	mrs	r3, IPSR
 8001aea:	613b      	str	r3, [r7, #16]
  return(result);
 8001aec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d175      	bne.n	8001bde <osSemaphoreNew+0x108>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d072      	beq.n	8001bde <osSemaphoreNew+0x108>
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d86e      	bhi.n	8001bde <osSemaphoreNew+0x108>
    mem = -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <osSemaphoreNew+0x4c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b4f      	cmp	r3, #79	@ 0x4f
 8001b1a:	d902      	bls.n	8001b22 <osSemaphoreNew+0x4c>
        mem = 1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	e00c      	b.n	8001b3c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <osSemaphoreNew+0x66>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d104      	bne.n	8001b3c <osSemaphoreNew+0x66>
          mem = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	e001      	b.n	8001b3c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b42:	d04c      	beq.n	8001bde <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d128      	bne.n	8001b9c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10a      	bne.n	8001b66 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2203      	movs	r2, #3
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f000 fa25 	bl	8001fac <xQueueGenericCreateStatic>
 8001b62:	61f8      	str	r0, [r7, #28]
 8001b64:	e005      	b.n	8001b72 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8001b66:	2203      	movs	r2, #3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f000 fa9b 	bl	80020a6 <xQueueGenericCreate>
 8001b70:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d022      	beq.n	8001bbe <osSemaphoreNew+0xe8>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01f      	beq.n	8001bbe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	69f8      	ldr	r0, [r7, #28]
 8001b86:	f000 fb5b 	bl	8002240 <xQueueGenericSend>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d016      	beq.n	8001bbe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8001b90:	69f8      	ldr	r0, [r7, #28]
 8001b92:	f000 fff9 	bl	8002b88 <vQueueDelete>
            hSemaphore = NULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	e010      	b.n	8001bbe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d108      	bne.n	8001bb4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fad9 	bl	8002162 <xQueueCreateCountingSemaphoreStatic>
 8001bb0:	61f8      	str	r0, [r7, #28]
 8001bb2:	e004      	b.n	8001bbe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fb0c 	bl	80021d4 <xQueueCreateCountingSemaphore>
 8001bbc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00c      	beq.n	8001bde <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	e001      	b.n	8001bd6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	69f8      	ldr	r0, [r7, #28]
 8001bda:	f001 f921 	bl	8002e20 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001bde:	69fb      	ldr	r3, [r7, #28]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d103      	bne.n	8001c08 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001c00:	f06f 0303 	mvn.w	r3, #3
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e039      	b.n	8001c7c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c08:	f3ef 8305 	mrs	r3, IPSR
 8001c0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d022      	beq.n	8001c5a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8001c1a:	f06f 0303 	mvn.w	r3, #3
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e02c      	b.n	8001c7c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	6938      	ldr	r0, [r7, #16]
 8001c30:	f000 ff28 	bl	8002a84 <xQueueReceiveFromISR>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d003      	beq.n	8001c42 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8001c3a:	f06f 0302 	mvn.w	r3, #2
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e01c      	b.n	8001c7c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d019      	beq.n	8001c7c <osSemaphoreAcquire+0x94>
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <osSemaphoreAcquire+0xa0>)
 8001c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f3bf 8f4f 	dsb	sy
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	e010      	b.n	8001c7c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	6938      	ldr	r0, [r7, #16]
 8001c5e:	f000 fe01 	bl	8002864 <xQueueSemaphoreTake>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d009      	beq.n	8001c7c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8001c6e:	f06f 0301 	mvn.w	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e002      	b.n	8001c7c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8001c76:	f06f 0302 	mvn.w	r3, #2
 8001c7a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8001c7c:	697b      	ldr	r3, [r7, #20]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000ed04 	.word	0xe000ed04

08001c8c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8001ca2:	f06f 0303 	mvn.w	r3, #3
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e02c      	b.n	8001d04 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001caa:	f3ef 8305 	mrs	r3, IPSR
 8001cae:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01a      	beq.n	8001cec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6938      	ldr	r0, [r7, #16]
 8001cc2:	f000 fc5d 	bl	8002580 <xQueueGiveFromISR>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d003      	beq.n	8001cd4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8001ccc:	f06f 0302 	mvn.w	r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e017      	b.n	8001d04 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d014      	beq.n	8001d04 <osSemaphoreRelease+0x78>
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <osSemaphoreRelease+0x84>)
 8001cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	f3bf 8f6f 	isb	sy
 8001cea:	e00b      	b.n	8001d04 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001cec:	2300      	movs	r3, #0
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	6938      	ldr	r0, [r7, #16]
 8001cf4:	f000 faa4 	bl	8002240 <xQueueGenericSend>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d002      	beq.n	8001d04 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8001cfe:	f06f 0302 	mvn.w	r3, #2
 8001d02:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8001d04:	697b      	ldr	r3, [r7, #20]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000ed04 	.word	0xe000ed04

08001d14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <vApplicationGetIdleTaskMemory+0x28>)
 8001d24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2280      	movs	r2, #128	@ 0x80
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	200000e4 	.word	0x200000e4
 8001d40:	2000018c 	.word	0x2000018c

08001d44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <vApplicationGetTimerTaskMemory+0x30>)
 8001d5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000038c 	.word	0x2000038c
 8001d74:	20000434 	.word	0x20000434

08001d78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f103 0208 	add.w	r2, r3, #8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f103 0208 	add.w	r2, r3, #8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f103 0208 	add.w	r2, r3, #8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e2a:	d103      	bne.n	8001e34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e00c      	b.n	8001e4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3308      	adds	r3, #8
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e002      	b.n	8001e42 <vListInsert+0x2e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d2f6      	bcs.n	8001e3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	601a      	str	r2, [r3, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6892      	ldr	r2, [r2, #8]
 8001e9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6852      	ldr	r2, [r2, #4]
 8001ea4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d103      	bne.n	8001eb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	1e5a      	subs	r2, r3, #1
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
	...

08001ed8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10b      	bne.n	8001f04 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ef0:	f383 8811 	msr	BASEPRI, r3
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001f04:	f002 fc92 	bl	800482c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	441a      	add	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f34:	3b01      	subs	r3, #1
 8001f36:	68f9      	ldr	r1, [r7, #12]
 8001f38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	441a      	add	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	22ff      	movs	r2, #255	@ 0xff
 8001f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	22ff      	movs	r2, #255	@ 0xff
 8001f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d114      	bne.n	8001f84 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d01a      	beq.n	8001f98 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3310      	adds	r3, #16
 8001f66:	4618      	mov	r0, r3
 8001f68:	f001 fc6e 	bl	8003848 <xTaskRemoveFromEventList>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d012      	beq.n	8001f98 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f72:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <xQueueGenericReset+0xd0>)
 8001f74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	f3bf 8f6f 	isb	sy
 8001f82:	e009      	b.n	8001f98 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3310      	adds	r3, #16
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fef5 	bl	8001d78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3324      	adds	r3, #36	@ 0x24
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fef0 	bl	8001d78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f98:	f002 fc78 	bl	800488c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000ed04 	.word	0xe000ed04

08001fac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08e      	sub	sp, #56	@ 0x38
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10b      	bne.n	8001ff6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe2:	f383 8811 	msr	BASEPRI, r3
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	e7fd      	b.n	8001ff2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <xQueueGenericCreateStatic+0x56>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <xQueueGenericCreateStatic+0x5a>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <xQueueGenericCreateStatic+0x5c>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800200c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	623b      	str	r3, [r7, #32]
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <xQueueGenericCreateStatic+0x84>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <xQueueGenericCreateStatic+0x88>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <xQueueGenericCreateStatic+0x8a>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10b      	bne.n	8002052 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800203a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800203e:	f383 8811 	msr	BASEPRI, r3
 8002042:	f3bf 8f6f 	isb	sy
 8002046:	f3bf 8f4f 	dsb	sy
 800204a:	61fb      	str	r3, [r7, #28]
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	e7fd      	b.n	800204e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002052:	2350      	movs	r3, #80	@ 0x50
 8002054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b50      	cmp	r3, #80	@ 0x50
 800205a:	d00b      	beq.n	8002074 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800205c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002060:	f383 8811 	msr	BASEPRI, r3
 8002064:	f3bf 8f6f 	isb	sy
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	61bb      	str	r3, [r7, #24]
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002074:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800207a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002088:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800208c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f840 	bl	800211c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800209c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800209e:	4618      	mov	r0, r3
 80020a0:	3730      	adds	r7, #48	@ 0x30
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b08a      	sub	sp, #40	@ 0x28
 80020aa:	af02      	add	r7, sp, #8
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10b      	bne.n	80020d2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80020ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020be:	f383 8811 	msr	BASEPRI, r3
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	613b      	str	r3, [r7, #16]
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	e7fd      	b.n	80020ce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	3350      	adds	r3, #80	@ 0x50
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fca5 	bl	8004a30 <pvPortMalloc>
 80020e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d011      	beq.n	8002112 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3350      	adds	r3, #80	@ 0x50
 80020f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002100:	79fa      	ldrb	r2, [r7, #7]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	4613      	mov	r3, r2
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f805 	bl	800211c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002112:	69bb      	ldr	r3, [r7, #24]
	}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e002      	b.n	800213e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800214a:	2101      	movs	r1, #1
 800214c:	69b8      	ldr	r0, [r7, #24]
 800214e:	f7ff fec3 	bl	8001ed8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002162:	b580      	push	{r7, lr}
 8002164:	b08a      	sub	sp, #40	@ 0x28
 8002166:	af02      	add	r7, sp, #8
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	61bb      	str	r3, [r7, #24]
}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d90b      	bls.n	80021ac <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	617b      	str	r3, [r7, #20]
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80021ac:	2302      	movs	r3, #2
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f7ff fef8 	bl	8001fac <xQueueGenericCreateStatic>
 80021bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80021ca:	69fb      	ldr	r3, [r7, #28]
	}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80021e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e8:	f383 8811 	msr	BASEPRI, r3
 80021ec:	f3bf 8f6f 	isb	sy
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	613b      	str	r3, [r7, #16]
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	d90b      	bls.n	800221c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	60fb      	str	r3, [r7, #12]
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800221c:	2202      	movs	r2, #2
 800221e:	2100      	movs	r1, #0
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff40 	bl	80020a6 <xQueueGenericCreate>
 8002226:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002234:	697b      	ldr	r3, [r7, #20]
	}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08e      	sub	sp, #56	@ 0x38
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800224e:	2300      	movs	r3, #0
 8002250:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <xQueueGenericSend+0x34>
	__asm volatile
 800225c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002260:	f383 8811 	msr	BASEPRI, r3
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d103      	bne.n	8002282 <xQueueGenericSend+0x42>
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <xQueueGenericSend+0x46>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <xQueueGenericSend+0x48>
 8002286:	2300      	movs	r3, #0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <xQueueGenericSend+0x64>
	__asm volatile
 800228c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d103      	bne.n	80022b2 <xQueueGenericSend+0x72>
 80022aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <xQueueGenericSend+0x76>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <xQueueGenericSend+0x78>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <xQueueGenericSend+0x94>
	__asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	623b      	str	r3, [r7, #32]
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022d4:	f001 fc7e 	bl	8003bd4 <xTaskGetSchedulerState>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <xQueueGenericSend+0xa4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <xQueueGenericSend+0xa8>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <xQueueGenericSend+0xaa>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10b      	bne.n	8002306 <xQueueGenericSend+0xc6>
	__asm volatile
 80022ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	61fb      	str	r3, [r7, #28]
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	e7fd      	b.n	8002302 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002306:	f002 fa91 	bl	800482c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800230a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <xQueueGenericSend+0xdc>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d129      	bne.n	8002370 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002322:	f000 fc6c 	bl	8002bfe <prvCopyDataToQueue>
 8002326:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232c:	2b00      	cmp	r3, #0
 800232e:	d010      	beq.n	8002352 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002332:	3324      	adds	r3, #36	@ 0x24
 8002334:	4618      	mov	r0, r3
 8002336:	f001 fa87 	bl	8003848 <xTaskRemoveFromEventList>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002340:	4b3f      	ldr	r3, [pc, #252]	@ (8002440 <xQueueGenericSend+0x200>)
 8002342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	e00a      	b.n	8002368 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002358:	4b39      	ldr	r3, [pc, #228]	@ (8002440 <xQueueGenericSend+0x200>)
 800235a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002368:	f002 fa90 	bl	800488c <vPortExitCritical>
				return pdPASS;
 800236c:	2301      	movs	r3, #1
 800236e:	e063      	b.n	8002438 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002376:	f002 fa89 	bl	800488c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800237a:	2300      	movs	r3, #0
 800237c:	e05c      	b.n	8002438 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800237e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002380:	2b00      	cmp	r3, #0
 8002382:	d106      	bne.n	8002392 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4618      	mov	r0, r3
 800238a:	f001 fac1 	bl	8003910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800238e:	2301      	movs	r3, #1
 8002390:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002392:	f002 fa7b 	bl	800488c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002396:	f001 f82d 	bl	80033f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800239a:	f002 fa47 	bl	800482c <vPortEnterCritical>
 800239e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023a4:	b25b      	sxtb	r3, r3
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023aa:	d103      	bne.n	80023b4 <xQueueGenericSend+0x174>
 80023ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023c0:	d103      	bne.n	80023ca <xQueueGenericSend+0x18a>
 80023c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023ca:	f002 fa5f 	bl	800488c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023ce:	1d3a      	adds	r2, r7, #4
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 fab0 	bl	800393c <xTaskCheckForTimeOut>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d124      	bne.n	800242c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023e4:	f000 fd03 	bl	8002dee <prvIsQueueFull>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d018      	beq.n	8002420 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	3310      	adds	r3, #16
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 f9d4 	bl	80037a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023fe:	f000 fc8e 	bl	8002d1e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002402:	f001 f805 	bl	8003410 <xTaskResumeAll>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	f47f af7c 	bne.w	8002306 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800240e:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <xQueueGenericSend+0x200>)
 8002410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	e772      	b.n	8002306 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002422:	f000 fc7c 	bl	8002d1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002426:	f000 fff3 	bl	8003410 <xTaskResumeAll>
 800242a:	e76c      	b.n	8002306 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800242c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800242e:	f000 fc76 	bl	8002d1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002432:	f000 ffed 	bl	8003410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002436:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002438:	4618      	mov	r0, r3
 800243a:	3738      	adds	r7, #56	@ 0x38
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	e000ed04 	.word	0xe000ed04

08002444 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b090      	sub	sp, #64	@ 0x40
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <xQueueGenericSendFromISR+0x3e>
 800247a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <xQueueGenericSendFromISR+0x42>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueueGenericSendFromISR+0x44>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d103      	bne.n	80024b2 <xQueueGenericSendFromISR+0x6e>
 80024aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <xQueueGenericSendFromISR+0x72>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <xQueueGenericSendFromISR+0x74>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	623b      	str	r3, [r7, #32]
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024d4:	f002 fa6c 	bl	80049b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80024d8:	f3ef 8211 	mrs	r2, BASEPRI
 80024dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e0:	f383 8811 	msr	BASEPRI, r3
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	61fa      	str	r2, [r7, #28]
 80024ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80024f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d302      	bcc.n	8002506 <xQueueGenericSendFromISR+0xc2>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d12f      	bne.n	8002566 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800250c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002514:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800251c:	f000 fb6f 	bl	8002bfe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002520:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002528:	d112      	bne.n	8002550 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d016      	beq.n	8002560 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	3324      	adds	r3, #36	@ 0x24
 8002536:	4618      	mov	r0, r3
 8002538:	f001 f986 	bl	8003848 <xTaskRemoveFromEventList>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00e      	beq.n	8002560 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e007      	b.n	8002560 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002550:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002554:	3301      	adds	r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b25a      	sxtb	r2, r3
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002560:	2301      	movs	r3, #1
 8002562:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002564:	e001      	b.n	800256a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002566:	2300      	movs	r3, #0
 8002568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800256a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002574:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002578:	4618      	mov	r0, r3
 800257a:	3740      	adds	r7, #64	@ 0x40
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08e      	sub	sp, #56	@ 0x38
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800258e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	623b      	str	r3, [r7, #32]
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <xQueueGiveFromISR+0x4c>
	__asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b8:	f383 8811 	msr	BASEPRI, r3
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	61fb      	str	r3, [r7, #28]
}
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80025cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <xQueueGiveFromISR+0x5c>
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <xQueueGiveFromISR+0x60>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <xQueueGiveFromISR+0x62>
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <xQueueGiveFromISR+0x7e>
	__asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	61bb      	str	r3, [r7, #24]
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	e7fd      	b.n	80025fa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025fe:	f002 f9d7 	bl	80049b0 <vPortValidateInterruptPriority>
	__asm volatile
 8002602:	f3ef 8211 	mrs	r2, BASEPRI
 8002606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	617a      	str	r2, [r7, #20]
 8002618:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800261a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800261e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800262a:	429a      	cmp	r2, r3
 800262c:	d22b      	bcs.n	8002686 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800262e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002640:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002648:	d112      	bne.n	8002670 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002654:	3324      	adds	r3, #36	@ 0x24
 8002656:	4618      	mov	r0, r3
 8002658:	f001 f8f6 	bl	8003848 <xTaskRemoveFromEventList>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00e      	beq.n	8002680 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e007      	b.n	8002680 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002674:	3301      	adds	r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	b25a      	sxtb	r2, r3
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002680:	2301      	movs	r3, #1
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
 8002684:	e001      	b.n	800268a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002686:	2300      	movs	r3, #0
 8002688:	637b      	str	r3, [r7, #52]	@ 0x34
 800268a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f383 8811 	msr	BASEPRI, r3
}
 8002694:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002698:	4618      	mov	r0, r3
 800269a:	3738      	adds	r7, #56	@ 0x38
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	@ 0x30
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10b      	bne.n	80026d2 <xQueueReceive+0x32>
	__asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	623b      	str	r3, [r7, #32]
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	e7fd      	b.n	80026ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d103      	bne.n	80026e0 <xQueueReceive+0x40>
 80026d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <xQueueReceive+0x44>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <xQueueReceive+0x46>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <xQueueReceive+0x62>
	__asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	61fb      	str	r3, [r7, #28]
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	e7fd      	b.n	80026fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002702:	f001 fa67 	bl	8003bd4 <xTaskGetSchedulerState>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <xQueueReceive+0x72>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <xQueueReceive+0x76>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <xQueueReceive+0x78>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <xQueueReceive+0x94>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	61bb      	str	r3, [r7, #24]
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002734:	f002 f87a 	bl	800482c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01f      	beq.n	8002784 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002748:	f000 fac3 	bl	8002cd2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	1e5a      	subs	r2, r3, #1
 8002750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002752:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00f      	beq.n	800277c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	3310      	adds	r3, #16
 8002760:	4618      	mov	r0, r3
 8002762:	f001 f871 	bl	8003848 <xTaskRemoveFromEventList>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800276c:	4b3c      	ldr	r3, [pc, #240]	@ (8002860 <xQueueReceive+0x1c0>)
 800276e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800277c:	f002 f886 	bl	800488c <vPortExitCritical>
				return pdPASS;
 8002780:	2301      	movs	r3, #1
 8002782:	e069      	b.n	8002858 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800278a:	f002 f87f 	bl	800488c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800278e:	2300      	movs	r3, #0
 8002790:	e062      	b.n	8002858 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d106      	bne.n	80027a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	4618      	mov	r0, r3
 800279e:	f001 f8b7 	bl	8003910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027a6:	f002 f871 	bl	800488c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027aa:	f000 fe23 	bl	80033f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027ae:	f002 f83d 	bl	800482c <vPortEnterCritical>
 80027b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027be:	d103      	bne.n	80027c8 <xQueueReceive+0x128>
 80027c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027d4:	d103      	bne.n	80027de <xQueueReceive+0x13e>
 80027d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027de:	f002 f855 	bl	800488c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027e2:	1d3a      	adds	r2, r7, #4
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 f8a6 	bl	800393c <xTaskCheckForTimeOut>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d123      	bne.n	800283e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027f8:	f000 fae3 	bl	8002dc2 <prvIsQueueEmpty>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d017      	beq.n	8002832 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002804:	3324      	adds	r3, #36	@ 0x24
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 ffca 	bl	80037a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002812:	f000 fa84 	bl	8002d1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002816:	f000 fdfb 	bl	8003410 <xTaskResumeAll>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d189      	bne.n	8002734 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002820:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <xQueueReceive+0x1c0>)
 8002822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	e780      	b.n	8002734 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002834:	f000 fa73 	bl	8002d1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002838:	f000 fdea 	bl	8003410 <xTaskResumeAll>
 800283c:	e77a      	b.n	8002734 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800283e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002840:	f000 fa6d 	bl	8002d1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002844:	f000 fde4 	bl	8003410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002848:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800284a:	f000 faba 	bl	8002dc2 <prvIsQueueEmpty>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f43f af6f 	beq.w	8002734 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002856:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002858:	4618      	mov	r0, r3
 800285a:	3730      	adds	r7, #48	@ 0x30
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	e000ed04 	.word	0xe000ed04

08002864 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08e      	sub	sp, #56	@ 0x38
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800286e:	2300      	movs	r3, #0
 8002870:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002876:	2300      	movs	r3, #0
 8002878:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800287a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	623b      	str	r3, [r7, #32]
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	61fb      	str	r3, [r7, #28]
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028b8:	f001 f98c 	bl	8003bd4 <xTaskGetSchedulerState>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <xQueueSemaphoreTake+0x64>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <xQueueSemaphoreTake+0x68>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <xQueueSemaphoreTake+0x6a>
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <xQueueSemaphoreTake+0x86>
	__asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	61bb      	str	r3, [r7, #24]
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	e7fd      	b.n	80028e6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028ea:	f001 ff9f 	bl	800482c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d024      	beq.n	8002944 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80028fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002900:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800290a:	f001 fadd 	bl	8003ec8 <pvTaskIncrementMutexHeldCount>
 800290e:	4602      	mov	r2, r0
 8002910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002912:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00f      	beq.n	800293c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800291c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800291e:	3310      	adds	r3, #16
 8002920:	4618      	mov	r0, r3
 8002922:	f000 ff91 	bl	8003848 <xTaskRemoveFromEventList>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800292c:	4b54      	ldr	r3, [pc, #336]	@ (8002a80 <xQueueSemaphoreTake+0x21c>)
 800292e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800293c:	f001 ffa6 	bl	800488c <vPortExitCritical>
				return pdPASS;
 8002940:	2301      	movs	r3, #1
 8002942:	e098      	b.n	8002a76 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d112      	bne.n	8002970 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800294a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00b      	beq.n	8002968 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	617b      	str	r3, [r7, #20]
}
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	e7fd      	b.n	8002964 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002968:	f001 ff90 	bl	800488c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800296c:	2300      	movs	r3, #0
 800296e:	e082      	b.n	8002a76 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	4618      	mov	r0, r3
 800297c:	f000 ffc8 	bl	8003910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002980:	2301      	movs	r3, #1
 8002982:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002984:	f001 ff82 	bl	800488c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002988:	f000 fd34 	bl	80033f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800298c:	f001 ff4e 	bl	800482c <vPortEnterCritical>
 8002990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002992:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002996:	b25b      	sxtb	r3, r3
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800299c:	d103      	bne.n	80029a6 <xQueueSemaphoreTake+0x142>
 800299e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029b2:	d103      	bne.n	80029bc <xQueueSemaphoreTake+0x158>
 80029b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029bc:	f001 ff66 	bl	800488c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029c0:	463a      	mov	r2, r7
 80029c2:	f107 030c 	add.w	r3, r7, #12
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 ffb7 	bl	800393c <xTaskCheckForTimeOut>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d132      	bne.n	8002a3a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029d6:	f000 f9f4 	bl	8002dc2 <prvIsQueueEmpty>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d026      	beq.n	8002a2e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d109      	bne.n	80029fc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80029e8:	f001 ff20 	bl	800482c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 f90d 	bl	8003c10 <xTaskPriorityInherit>
 80029f6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80029f8:	f001 ff48 	bl	800488c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fe:	3324      	adds	r3, #36	@ 0x24
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fecd 	bl	80037a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a0c:	f000 f987 	bl	8002d1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a10:	f000 fcfe 	bl	8003410 <xTaskResumeAll>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f47f af67 	bne.w	80028ea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002a1c:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <xQueueSemaphoreTake+0x21c>)
 8002a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	e75d      	b.n	80028ea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002a2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a30:	f000 f975 	bl	8002d1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a34:	f000 fcec 	bl	8003410 <xTaskResumeAll>
 8002a38:	e757      	b.n	80028ea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002a3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a3c:	f000 f96f 	bl	8002d1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a40:	f000 fce6 	bl	8003410 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a46:	f000 f9bc 	bl	8002dc2 <prvIsQueueEmpty>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f43f af4c 	beq.w	80028ea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002a58:	f001 fee8 	bl	800482c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002a5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a5e:	f000 f8b7 	bl	8002bd0 <prvGetDisinheritPriorityAfterTimeout>
 8002a62:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 f9a8 	bl	8003dc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002a70:	f001 ff0c 	bl	800488c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3738      	adds	r7, #56	@ 0x38
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	@ 0x38
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	623b      	str	r3, [r7, #32]
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	e7fd      	b.n	8002aae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <xQueueReceiveFromISR+0x3c>
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <xQueueReceiveFromISR+0x40>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <xQueueReceiveFromISR+0x42>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10b      	bne.n	8002ae2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	61fb      	str	r3, [r7, #28]
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	e7fd      	b.n	8002ade <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ae2:	f001 ff65 	bl	80049b0 <vPortValidateInterruptPriority>
	__asm volatile
 8002ae6:	f3ef 8211 	mrs	r2, BASEPRI
 8002aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	61ba      	str	r2, [r7, #24]
 8002afc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002afe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02f      	beq.n	8002b6e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b1c:	f000 f8d9 	bl	8002cd2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002b28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b30:	d112      	bne.n	8002b58 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3c:	3310      	adds	r3, #16
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fe82 	bl	8003848 <xTaskRemoveFromEventList>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e007      	b.n	8002b68 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	b25a      	sxtb	r2, r3
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b6c:	e001      	b.n	8002b72 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f383 8811 	msr	BASEPRI, r3
}
 8002b7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3738      	adds	r7, #56	@ 0x38
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10b      	bne.n	8002bb2 <vQueueDelete+0x2a>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	60bb      	str	r3, [r7, #8]
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	e7fd      	b.n	8002bae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f95c 	bl	8002e70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f002 f802 	bl	8004bcc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e001      	b.n	8002bf2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
	}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10d      	bne.n	8002c38 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d14d      	bne.n	8002cc0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 f859 	bl	8003ce0 <xTaskPriorityDisinherit>
 8002c2e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	e043      	b.n	8002cc0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d119      	bne.n	8002c72 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6858      	ldr	r0, [r3, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	461a      	mov	r2, r3
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	f002 f969 	bl	8004f20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	441a      	add	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d32b      	bcc.n	8002cc0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	e026      	b.n	8002cc0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	68d8      	ldr	r0, [r3, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	f002 f94f 	bl	8004f20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	425b      	negs	r3, r3
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d207      	bcs.n	8002cae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	425b      	negs	r3, r3
 8002ca8:	441a      	add	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d105      	bne.n	8002cc0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002cc8:	697b      	ldr	r3, [r7, #20]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d018      	beq.n	8002d16 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d303      	bcc.n	8002d06 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6838      	ldr	r0, [r7, #0]
 8002d12:	f002 f905 	bl	8004f20 <memcpy>
	}
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d26:	f001 fd81 	bl	800482c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d30:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d32:	e011      	b.n	8002d58 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3324      	adds	r3, #36	@ 0x24
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fd81 	bl	8003848 <xTaskRemoveFromEventList>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d4c:	f000 fe5a 	bl	8003a04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	dce9      	bgt.n	8002d34 <prvUnlockQueue+0x16>
 8002d60:	e000      	b.n	8002d64 <prvUnlockQueue+0x46>
					break;
 8002d62:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	22ff      	movs	r2, #255	@ 0xff
 8002d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002d6c:	f001 fd8e 	bl	800488c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d70:	f001 fd5c 	bl	800482c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d7a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d7c:	e011      	b.n	8002da2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d012      	beq.n	8002dac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3310      	adds	r3, #16
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fd5c 	bl	8003848 <xTaskRemoveFromEventList>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d96:	f000 fe35 	bl	8003a04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	dce9      	bgt.n	8002d7e <prvUnlockQueue+0x60>
 8002daa:	e000      	b.n	8002dae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002dac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	22ff      	movs	r2, #255	@ 0xff
 8002db2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002db6:	f001 fd69 	bl	800488c <vPortExitCritical>
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dca:	f001 fd2f 	bl	800482c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e001      	b.n	8002de0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002de0:	f001 fd54 	bl	800488c <vPortExitCritical>

	return xReturn;
 8002de4:	68fb      	ldr	r3, [r7, #12]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002df6:	f001 fd19 	bl	800482c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d102      	bne.n	8002e0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	e001      	b.n	8002e10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e10:	f001 fd3c 	bl	800488c <vPortExitCritical>

	return xReturn;
 8002e14:	68fb      	ldr	r3, [r7, #12]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e014      	b.n	8002e5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e30:	4a0e      	ldr	r2, [pc, #56]	@ (8002e6c <vQueueAddToRegistry+0x4c>)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e3c:	490b      	ldr	r1, [pc, #44]	@ (8002e6c <vQueueAddToRegistry+0x4c>)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e46:	4a09      	ldr	r2, [pc, #36]	@ (8002e6c <vQueueAddToRegistry+0x4c>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e52:	e006      	b.n	8002e62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	d9e7      	bls.n	8002e30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	20000834 	.word	0x20000834

08002e70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e016      	b.n	8002eac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002e7e:	4a10      	ldr	r2, [pc, #64]	@ (8002ec0 <vQueueUnregisterQueue+0x50>)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d10b      	bne.n	8002ea6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec0 <vQueueUnregisterQueue+0x50>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2100      	movs	r1, #0
 8002e94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002e98:	4a09      	ldr	r2, [pc, #36]	@ (8002ec0 <vQueueUnregisterQueue+0x50>)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	605a      	str	r2, [r3, #4]
				break;
 8002ea4:	e006      	b.n	8002eb4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b07      	cmp	r3, #7
 8002eb0:	d9e5      	bls.n	8002e7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000834 	.word	0x20000834

08002ec4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ed4:	f001 fcaa 	bl	800482c <vPortEnterCritical>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ede:	b25b      	sxtb	r3, r3
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ee4:	d103      	bne.n	8002eee <vQueueWaitForMessageRestricted+0x2a>
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002efa:	d103      	bne.n	8002f04 <vQueueWaitForMessageRestricted+0x40>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f04:	f001 fcc2 	bl	800488c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3324      	adds	r3, #36	@ 0x24
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fc69 	bl	80037f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7ff fefd 	bl	8002d1e <prvUnlockQueue>
	}
 8002f24:	bf00      	nop
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	@ 0x38
 8002f30:	af04      	add	r7, sp, #16
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	623b      	str	r3, [r7, #32]
}
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	e7fd      	b.n	8002f54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	61fb      	str	r3, [r7, #28]
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	e7fd      	b.n	8002f72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f76:	23a8      	movs	r3, #168	@ 0xa8
 8002f78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2ba8      	cmp	r3, #168	@ 0xa8
 8002f7e:	d00b      	beq.n	8002f98 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	61bb      	str	r3, [r7, #24]
}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01e      	beq.n	8002fde <xTaskCreateStatic+0xb2>
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d01b      	beq.n	8002fde <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9303      	str	r3, [sp, #12]
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	9302      	str	r3, [sp, #8]
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f851 	bl	8003078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fd8:	f000 f8f6 	bl	80031c8 <prvAddNewTaskToReadyList>
 8002fdc:	e001      	b.n	8002fe2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fe2:	697b      	ldr	r3, [r7, #20]
	}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3728      	adds	r7, #40	@ 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08c      	sub	sp, #48	@ 0x30
 8002ff0:	af04      	add	r7, sp, #16
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4618      	mov	r0, r3
 8003002:	f001 fd15 	bl	8004a30 <pvPortMalloc>
 8003006:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800300e:	20a8      	movs	r0, #168	@ 0xa8
 8003010:	f001 fd0e 	bl	8004a30 <pvPortMalloc>
 8003014:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
 8003022:	e005      	b.n	8003030 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003024:	6978      	ldr	r0, [r7, #20]
 8003026:	f001 fdd1 	bl	8004bcc <vPortFree>
 800302a:	e001      	b.n	8003030 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d017      	beq.n	8003066 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	2300      	movs	r3, #0
 8003042:	9303      	str	r3, [sp, #12]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	9302      	str	r3, [sp, #8]
 8003048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f80f 	bl	8003078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800305a:	69f8      	ldr	r0, [r7, #28]
 800305c:	f000 f8b4 	bl	80031c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003060:	2301      	movs	r3, #1
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	e002      	b.n	800306c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800306a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800306c:	69bb      	ldr	r3, [r7, #24]
	}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	461a      	mov	r2, r3
 8003090:	21a5      	movs	r1, #165	@ 0xa5
 8003092:	f001 feb9 	bl	8004e08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030a0:	3b01      	subs	r3, #1
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f023 0307 	bic.w	r3, r3, #7
 80030ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	617b      	str	r3, [r7, #20]
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	e7fd      	b.n	80030ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01f      	beq.n	8003118 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e012      	b.n	8003104 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	4413      	add	r3, r2
 80030e4:	7819      	ldrb	r1, [r3, #0]
 80030e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	4413      	add	r3, r2
 80030ec:	3334      	adds	r3, #52	@ 0x34
 80030ee:	460a      	mov	r2, r1
 80030f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	d9e9      	bls.n	80030de <prvInitialiseNewTask+0x66>
 800310a:	e000      	b.n	800310e <prvInitialiseNewTask+0x96>
			{
				break;
 800310c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800310e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003116:	e003      	b.n	8003120 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003122:	2b37      	cmp	r3, #55	@ 0x37
 8003124:	d901      	bls.n	800312a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003126:	2337      	movs	r3, #55	@ 0x37
 8003128:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800312e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003134:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800313c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313e:	3304      	adds	r3, #4
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fe38 	bl	8001db6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003148:	3318      	adds	r3, #24
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fe33 	bl	8001db6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003154:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003164:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	2200      	movs	r2, #0
 800316a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003170:	2200      	movs	r2, #0
 8003172:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	3354      	adds	r3, #84	@ 0x54
 800317a:	224c      	movs	r2, #76	@ 0x4c
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f001 fe42 	bl	8004e08 <memset>
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003186:	4a0d      	ldr	r2, [pc, #52]	@ (80031bc <prvInitialiseNewTask+0x144>)
 8003188:	659a      	str	r2, [r3, #88]	@ 0x58
 800318a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318c:	4a0c      	ldr	r2, [pc, #48]	@ (80031c0 <prvInitialiseNewTask+0x148>)
 800318e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	4a0c      	ldr	r2, [pc, #48]	@ (80031c4 <prvInitialiseNewTask+0x14c>)
 8003194:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	68f9      	ldr	r1, [r7, #12]
 800319a:	69b8      	ldr	r0, [r7, #24]
 800319c:	f001 fa54 	bl	8004648 <pxPortInitialiseStack>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031b2:	bf00      	nop
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20001ac8 	.word	0x20001ac8
 80031c0:	20001b30 	.word	0x20001b30
 80031c4:	20001b98 	.word	0x20001b98

080031c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031d0:	f001 fb2c 	bl	800482c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031d4:	4b2d      	ldr	r3, [pc, #180]	@ (800328c <prvAddNewTaskToReadyList+0xc4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	4a2c      	ldr	r2, [pc, #176]	@ (800328c <prvAddNewTaskToReadyList+0xc4>)
 80031dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031de:	4b2c      	ldr	r3, [pc, #176]	@ (8003290 <prvAddNewTaskToReadyList+0xc8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003290 <prvAddNewTaskToReadyList+0xc8>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031ec:	4b27      	ldr	r3, [pc, #156]	@ (800328c <prvAddNewTaskToReadyList+0xc4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d110      	bne.n	8003216 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031f4:	f000 fc2a 	bl	8003a4c <prvInitialiseTaskLists>
 80031f8:	e00d      	b.n	8003216 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031fa:	4b26      	ldr	r3, [pc, #152]	@ (8003294 <prvAddNewTaskToReadyList+0xcc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003202:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <prvAddNewTaskToReadyList+0xc8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	429a      	cmp	r2, r3
 800320e:	d802      	bhi.n	8003216 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003210:	4a1f      	ldr	r2, [pc, #124]	@ (8003290 <prvAddNewTaskToReadyList+0xc8>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003216:	4b20      	ldr	r3, [pc, #128]	@ (8003298 <prvAddNewTaskToReadyList+0xd0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	4a1e      	ldr	r2, [pc, #120]	@ (8003298 <prvAddNewTaskToReadyList+0xd0>)
 800321e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003220:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <prvAddNewTaskToReadyList+0xd0>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <prvAddNewTaskToReadyList+0xd4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d903      	bls.n	800323c <prvAddNewTaskToReadyList+0x74>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	4a18      	ldr	r2, [pc, #96]	@ (800329c <prvAddNewTaskToReadyList+0xd4>)
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <prvAddNewTaskToReadyList+0xd8>)
 800324a:	441a      	add	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f7fe fdbb 	bl	8001dce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003258:	f001 fb18 	bl	800488c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800325c:	4b0d      	ldr	r3, [pc, #52]	@ (8003294 <prvAddNewTaskToReadyList+0xcc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003264:	4b0a      	ldr	r3, [pc, #40]	@ (8003290 <prvAddNewTaskToReadyList+0xc8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326e:	429a      	cmp	r2, r3
 8003270:	d207      	bcs.n	8003282 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003272:	4b0c      	ldr	r3, [pc, #48]	@ (80032a4 <prvAddNewTaskToReadyList+0xdc>)
 8003274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000d48 	.word	0x20000d48
 8003290:	20000874 	.word	0x20000874
 8003294:	20000d54 	.word	0x20000d54
 8003298:	20000d64 	.word	0x20000d64
 800329c:	20000d50 	.word	0x20000d50
 80032a0:	20000878 	.word	0x20000878
 80032a4:	e000ed04 	.word	0xe000ed04

080032a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d018      	beq.n	80032ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032ba:	4b14      	ldr	r3, [pc, #80]	@ (800330c <vTaskDelay+0x64>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <vTaskDelay+0x32>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	60bb      	str	r3, [r7, #8]
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	e7fd      	b.n	80032d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032da:	f000 f88b 	bl	80033f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032de:	2100      	movs	r1, #0
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fe05 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032e6:	f000 f893 	bl	8003410 <xTaskResumeAll>
 80032ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80032f2:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <vTaskDelay+0x68>)
 80032f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000d70 	.word	0x20000d70
 8003310:	e000ed04 	.word	0xe000ed04

08003314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003322:	463a      	mov	r2, r7
 8003324:	1d39      	adds	r1, r7, #4
 8003326:	f107 0308 	add.w	r3, r7, #8
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fcf2 	bl	8001d14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003330:	6839      	ldr	r1, [r7, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	9202      	str	r2, [sp, #8]
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	2300      	movs	r3, #0
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2300      	movs	r3, #0
 8003340:	460a      	mov	r2, r1
 8003342:	4924      	ldr	r1, [pc, #144]	@ (80033d4 <vTaskStartScheduler+0xc0>)
 8003344:	4824      	ldr	r0, [pc, #144]	@ (80033d8 <vTaskStartScheduler+0xc4>)
 8003346:	f7ff fdf1 	bl	8002f2c <xTaskCreateStatic>
 800334a:	4603      	mov	r3, r0
 800334c:	4a23      	ldr	r2, [pc, #140]	@ (80033dc <vTaskStartScheduler+0xc8>)
 800334e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003350:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <vTaskStartScheduler+0xc8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003358:	2301      	movs	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e001      	b.n	8003362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003368:	f000 fe16 	bl	8003f98 <xTimerCreateTimerTask>
 800336c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d11b      	bne.n	80033ac <vTaskStartScheduler+0x98>
	__asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	613b      	str	r3, [r7, #16]
}
 8003386:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003388:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <vTaskStartScheduler+0xcc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3354      	adds	r3, #84	@ 0x54
 800338e:	4a15      	ldr	r2, [pc, #84]	@ (80033e4 <vTaskStartScheduler+0xd0>)
 8003390:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003392:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <vTaskStartScheduler+0xd4>)
 8003394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003398:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800339a:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <vTaskStartScheduler+0xd8>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033a0:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <vTaskStartScheduler+0xdc>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033a6:	f001 f9cf 	bl	8004748 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033aa:	e00f      	b.n	80033cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b2:	d10b      	bne.n	80033cc <vTaskStartScheduler+0xb8>
	__asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	60fb      	str	r3, [r7, #12]
}
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
 80033ca:	e7fd      	b.n	80033c8 <vTaskStartScheduler+0xb4>
}
 80033cc:	bf00      	nop
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	08005060 	.word	0x08005060
 80033d8:	08003a1d 	.word	0x08003a1d
 80033dc:	20000d6c 	.word	0x20000d6c
 80033e0:	20000874 	.word	0x20000874
 80033e4:	20000010 	.word	0x20000010
 80033e8:	20000d68 	.word	0x20000d68
 80033ec:	20000d54 	.word	0x20000d54
 80033f0:	20000d4c 	.word	0x20000d4c

080033f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80033f8:	4b04      	ldr	r3, [pc, #16]	@ (800340c <vTaskSuspendAll+0x18>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a03      	ldr	r2, [pc, #12]	@ (800340c <vTaskSuspendAll+0x18>)
 8003400:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000d70 	.word	0x20000d70

08003410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800341e:	4b42      	ldr	r3, [pc, #264]	@ (8003528 <xTaskResumeAll+0x118>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <xTaskResumeAll+0x2e>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	603b      	str	r3, [r7, #0]
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	e7fd      	b.n	800343a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800343e:	f001 f9f5 	bl	800482c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003442:	4b39      	ldr	r3, [pc, #228]	@ (8003528 <xTaskResumeAll+0x118>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3b01      	subs	r3, #1
 8003448:	4a37      	ldr	r2, [pc, #220]	@ (8003528 <xTaskResumeAll+0x118>)
 800344a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344c:	4b36      	ldr	r3, [pc, #216]	@ (8003528 <xTaskResumeAll+0x118>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d162      	bne.n	800351a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003454:	4b35      	ldr	r3, [pc, #212]	@ (800352c <xTaskResumeAll+0x11c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d05e      	beq.n	800351a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800345c:	e02f      	b.n	80034be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800345e:	4b34      	ldr	r3, [pc, #208]	@ (8003530 <xTaskResumeAll+0x120>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3318      	adds	r3, #24
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fd0a 	bl	8001e84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3304      	adds	r3, #4
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fd05 	bl	8001e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800347e:	4b2d      	ldr	r3, [pc, #180]	@ (8003534 <xTaskResumeAll+0x124>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d903      	bls.n	800348e <xTaskResumeAll+0x7e>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	4a2a      	ldr	r2, [pc, #168]	@ (8003534 <xTaskResumeAll+0x124>)
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4a27      	ldr	r2, [pc, #156]	@ (8003538 <xTaskResumeAll+0x128>)
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7fe fc92 	bl	8001dce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ae:	4b23      	ldr	r3, [pc, #140]	@ (800353c <xTaskResumeAll+0x12c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80034b8:	4b21      	ldr	r3, [pc, #132]	@ (8003540 <xTaskResumeAll+0x130>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034be:	4b1c      	ldr	r3, [pc, #112]	@ (8003530 <xTaskResumeAll+0x120>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cb      	bne.n	800345e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034cc:	f000 fb62 	bl	8003b94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003544 <xTaskResumeAll+0x134>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d010      	beq.n	80034fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034dc:	f000 f844 	bl	8003568 <xTaskIncrementTick>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80034e6:	4b16      	ldr	r3, [pc, #88]	@ (8003540 <xTaskResumeAll+0x130>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f1      	bne.n	80034dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80034f8:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <xTaskResumeAll+0x134>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034fe:	4b10      	ldr	r3, [pc, #64]	@ (8003540 <xTaskResumeAll+0x130>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <xTaskResumeAll+0x138>)
 800350c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800351a:	f001 f9b7 	bl	800488c <vPortExitCritical>

	return xAlreadyYielded;
 800351e:	68bb      	ldr	r3, [r7, #8]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000d70 	.word	0x20000d70
 800352c:	20000d48 	.word	0x20000d48
 8003530:	20000d08 	.word	0x20000d08
 8003534:	20000d50 	.word	0x20000d50
 8003538:	20000878 	.word	0x20000878
 800353c:	20000874 	.word	0x20000874
 8003540:	20000d5c 	.word	0x20000d5c
 8003544:	20000d58 	.word	0x20000d58
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003552:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <xTaskGetTickCount+0x18>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003558:	687b      	ldr	r3, [r7, #4]
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr
 8003564:	20000d4c 	.word	0x20000d4c

08003568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003572:	4b4f      	ldr	r3, [pc, #316]	@ (80036b0 <xTaskIncrementTick+0x148>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 8090 	bne.w	800369c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800357c:	4b4d      	ldr	r3, [pc, #308]	@ (80036b4 <xTaskIncrementTick+0x14c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003584:	4a4b      	ldr	r2, [pc, #300]	@ (80036b4 <xTaskIncrementTick+0x14c>)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d121      	bne.n	80035d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003590:	4b49      	ldr	r3, [pc, #292]	@ (80036b8 <xTaskIncrementTick+0x150>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800359a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	603b      	str	r3, [r7, #0]
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	e7fd      	b.n	80035ae <xTaskIncrementTick+0x46>
 80035b2:	4b41      	ldr	r3, [pc, #260]	@ (80036b8 <xTaskIncrementTick+0x150>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	4b40      	ldr	r3, [pc, #256]	@ (80036bc <xTaskIncrementTick+0x154>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a3e      	ldr	r2, [pc, #248]	@ (80036b8 <xTaskIncrementTick+0x150>)
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	4a3e      	ldr	r2, [pc, #248]	@ (80036bc <xTaskIncrementTick+0x154>)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b3e      	ldr	r3, [pc, #248]	@ (80036c0 <xTaskIncrementTick+0x158>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	4a3c      	ldr	r2, [pc, #240]	@ (80036c0 <xTaskIncrementTick+0x158>)
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	f000 fae0 	bl	8003b94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035d4:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <xTaskIncrementTick+0x15c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d349      	bcc.n	8003672 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035de:	4b36      	ldr	r3, [pc, #216]	@ (80036b8 <xTaskIncrementTick+0x150>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e8:	4b36      	ldr	r3, [pc, #216]	@ (80036c4 <xTaskIncrementTick+0x15c>)
 80035ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035ee:	601a      	str	r2, [r3, #0]
					break;
 80035f0:	e03f      	b.n	8003672 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f2:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <xTaskIncrementTick+0x150>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d203      	bcs.n	8003612 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800360a:	4a2e      	ldr	r2, [pc, #184]	@ (80036c4 <xTaskIncrementTick+0x15c>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003610:	e02f      	b.n	8003672 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3304      	adds	r3, #4
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fc34 	bl	8001e84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3318      	adds	r3, #24
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe fc2b 	bl	8001e84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003632:	4b25      	ldr	r3, [pc, #148]	@ (80036c8 <xTaskIncrementTick+0x160>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d903      	bls.n	8003642 <xTaskIncrementTick+0xda>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	4a22      	ldr	r2, [pc, #136]	@ (80036c8 <xTaskIncrementTick+0x160>)
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4a1f      	ldr	r2, [pc, #124]	@ (80036cc <xTaskIncrementTick+0x164>)
 8003650:	441a      	add	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7fe fbb8 	bl	8001dce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003662:	4b1b      	ldr	r3, [pc, #108]	@ (80036d0 <xTaskIncrementTick+0x168>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	429a      	cmp	r2, r3
 800366a:	d3b8      	bcc.n	80035de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800366c:	2301      	movs	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003670:	e7b5      	b.n	80035de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003672:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <xTaskIncrementTick+0x168>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003678:	4914      	ldr	r1, [pc, #80]	@ (80036cc <xTaskIncrementTick+0x164>)
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d901      	bls.n	800368e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800368a:	2301      	movs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <xTaskIncrementTick+0x16c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003696:	2301      	movs	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	e004      	b.n	80036a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800369c:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <xTaskIncrementTick+0x170>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	4a0d      	ldr	r2, [pc, #52]	@ (80036d8 <xTaskIncrementTick+0x170>)
 80036a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80036a6:	697b      	ldr	r3, [r7, #20]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000d70 	.word	0x20000d70
 80036b4:	20000d4c 	.word	0x20000d4c
 80036b8:	20000d00 	.word	0x20000d00
 80036bc:	20000d04 	.word	0x20000d04
 80036c0:	20000d60 	.word	0x20000d60
 80036c4:	20000d68 	.word	0x20000d68
 80036c8:	20000d50 	.word	0x20000d50
 80036cc:	20000878 	.word	0x20000878
 80036d0:	20000874 	.word	0x20000874
 80036d4:	20000d5c 	.word	0x20000d5c
 80036d8:	20000d58 	.word	0x20000d58

080036dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036e2:	4b2a      	ldr	r3, [pc, #168]	@ (800378c <vTaskSwitchContext+0xb0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036ea:	4b29      	ldr	r3, [pc, #164]	@ (8003790 <vTaskSwitchContext+0xb4>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036f0:	e047      	b.n	8003782 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80036f2:	4b27      	ldr	r3, [pc, #156]	@ (8003790 <vTaskSwitchContext+0xb4>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f8:	4b26      	ldr	r3, [pc, #152]	@ (8003794 <vTaskSwitchContext+0xb8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e011      	b.n	8003724 <vTaskSwitchContext+0x48>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10b      	bne.n	800371e <vTaskSwitchContext+0x42>
	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	607b      	str	r3, [r7, #4]
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	e7fd      	b.n	800371a <vTaskSwitchContext+0x3e>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b01      	subs	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	491c      	ldr	r1, [pc, #112]	@ (8003798 <vTaskSwitchContext+0xbc>)
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0e3      	beq.n	8003700 <vTaskSwitchContext+0x24>
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <vTaskSwitchContext+0xbc>)
 8003744:	4413      	add	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	3308      	adds	r3, #8
 800375a:	429a      	cmp	r2, r3
 800375c:	d104      	bne.n	8003768 <vTaskSwitchContext+0x8c>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4a0b      	ldr	r2, [pc, #44]	@ (800379c <vTaskSwitchContext+0xc0>)
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4a08      	ldr	r2, [pc, #32]	@ (8003794 <vTaskSwitchContext+0xb8>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <vTaskSwitchContext+0xc0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3354      	adds	r3, #84	@ 0x54
 800377e:	4a08      	ldr	r2, [pc, #32]	@ (80037a0 <vTaskSwitchContext+0xc4>)
 8003780:	6013      	str	r3, [r2, #0]
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000d70 	.word	0x20000d70
 8003790:	20000d5c 	.word	0x20000d5c
 8003794:	20000d50 	.word	0x20000d50
 8003798:	20000878 	.word	0x20000878
 800379c:	20000874 	.word	0x20000874
 80037a0:	20000010 	.word	0x20000010

080037a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60fb      	str	r3, [r7, #12]
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037cc:	4b07      	ldr	r3, [pc, #28]	@ (80037ec <vTaskPlaceOnEventList+0x48>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3318      	adds	r3, #24
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fe fb1d 	bl	8001e14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037da:	2101      	movs	r1, #1
 80037dc:	6838      	ldr	r0, [r7, #0]
 80037de:	f000 fb87 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000874 	.word	0x20000874

080037f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	617b      	str	r3, [r7, #20]
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800381a:	4b0a      	ldr	r3, [pc, #40]	@ (8003844 <vTaskPlaceOnEventListRestricted+0x54>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3318      	adds	r3, #24
 8003820:	4619      	mov	r1, r3
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7fe fad3 	bl	8001dce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003832:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	68b8      	ldr	r0, [r7, #8]
 8003838:	f000 fb5a 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
	}
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000874 	.word	0x20000874

08003848 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60fb      	str	r3, [r7, #12]
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	e7fd      	b.n	8003872 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	3318      	adds	r3, #24
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fb02 	bl	8001e84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003880:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <xTaskRemoveFromEventList+0xb0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11d      	bne.n	80038c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	3304      	adds	r3, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe faf9 	bl	8001e84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003896:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <xTaskRemoveFromEventList+0xb4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d903      	bls.n	80038a6 <xTaskRemoveFromEventList+0x5e>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a2:	4a16      	ldr	r2, [pc, #88]	@ (80038fc <xTaskRemoveFromEventList+0xb4>)
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4a13      	ldr	r2, [pc, #76]	@ (8003900 <xTaskRemoveFromEventList+0xb8>)
 80038b4:	441a      	add	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f7fe fa86 	bl	8001dce <vListInsertEnd>
 80038c2:	e005      	b.n	80038d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	3318      	adds	r3, #24
 80038c8:	4619      	mov	r1, r3
 80038ca:	480e      	ldr	r0, [pc, #56]	@ (8003904 <xTaskRemoveFromEventList+0xbc>)
 80038cc:	f7fe fa7f 	bl	8001dce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <xTaskRemoveFromEventList+0xc0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	429a      	cmp	r2, r3
 80038dc:	d905      	bls.n	80038ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038de:	2301      	movs	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038e2:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <xTaskRemoveFromEventList+0xc4>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e001      	b.n	80038ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80038ee:	697b      	ldr	r3, [r7, #20]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000d70 	.word	0x20000d70
 80038fc:	20000d50 	.word	0x20000d50
 8003900:	20000878 	.word	0x20000878
 8003904:	20000d08 	.word	0x20000d08
 8003908:	20000874 	.word	0x20000874
 800390c:	20000d5c 	.word	0x20000d5c

08003910 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <vTaskInternalSetTimeOutState+0x24>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <vTaskInternalSetTimeOutState+0x28>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	605a      	str	r2, [r3, #4]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000d60 	.word	0x20000d60
 8003938:	20000d4c 	.word	0x20000d4c

0800393c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	613b      	str	r3, [r7, #16]
}
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60fb      	str	r3, [r7, #12]
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	e7fd      	b.n	800397e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003982:	f000 ff53 	bl	800482c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003986:	4b1d      	ldr	r3, [pc, #116]	@ (80039fc <xTaskCheckForTimeOut+0xc0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800399e:	d102      	bne.n	80039a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	e023      	b.n	80039ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <xTaskCheckForTimeOut+0xc4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d007      	beq.n	80039c2 <xTaskCheckForTimeOut+0x86>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d302      	bcc.n	80039c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e015      	b.n	80039ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d20b      	bcs.n	80039e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	1ad2      	subs	r2, r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff99 	bl	8003910 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e004      	b.n	80039ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039ea:	2301      	movs	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039ee:	f000 ff4d 	bl	800488c <vPortExitCritical>

	return xReturn;
 80039f2:	69fb      	ldr	r3, [r7, #28]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000d4c 	.word	0x20000d4c
 8003a00:	20000d60 	.word	0x20000d60

08003a04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a08:	4b03      	ldr	r3, [pc, #12]	@ (8003a18 <vTaskMissedYield+0x14>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000d5c 	.word	0x20000d5c

08003a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a24:	f000 f852 	bl	8003acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a28:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <prvIdleTask+0x28>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d9f9      	bls.n	8003a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <prvIdleTask+0x2c>)
 8003a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a40:	e7f0      	b.n	8003a24 <prvIdleTask+0x8>
 8003a42:	bf00      	nop
 8003a44:	20000878 	.word	0x20000878
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	e00c      	b.n	8003a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4a12      	ldr	r2, [pc, #72]	@ (8003aac <prvInitialiseTaskLists+0x60>)
 8003a64:	4413      	add	r3, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe f986 	bl	8001d78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b37      	cmp	r3, #55	@ 0x37
 8003a76:	d9ef      	bls.n	8003a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a78:	480d      	ldr	r0, [pc, #52]	@ (8003ab0 <prvInitialiseTaskLists+0x64>)
 8003a7a:	f7fe f97d 	bl	8001d78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a7e:	480d      	ldr	r0, [pc, #52]	@ (8003ab4 <prvInitialiseTaskLists+0x68>)
 8003a80:	f7fe f97a 	bl	8001d78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a84:	480c      	ldr	r0, [pc, #48]	@ (8003ab8 <prvInitialiseTaskLists+0x6c>)
 8003a86:	f7fe f977 	bl	8001d78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a8a:	480c      	ldr	r0, [pc, #48]	@ (8003abc <prvInitialiseTaskLists+0x70>)
 8003a8c:	f7fe f974 	bl	8001d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a90:	480b      	ldr	r0, [pc, #44]	@ (8003ac0 <prvInitialiseTaskLists+0x74>)
 8003a92:	f7fe f971 	bl	8001d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <prvInitialiseTaskLists+0x78>)
 8003a98:	4a05      	ldr	r2, [pc, #20]	@ (8003ab0 <prvInitialiseTaskLists+0x64>)
 8003a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <prvInitialiseTaskLists+0x7c>)
 8003a9e:	4a05      	ldr	r2, [pc, #20]	@ (8003ab4 <prvInitialiseTaskLists+0x68>)
 8003aa0:	601a      	str	r2, [r3, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000878 	.word	0x20000878
 8003ab0:	20000cd8 	.word	0x20000cd8
 8003ab4:	20000cec 	.word	0x20000cec
 8003ab8:	20000d08 	.word	0x20000d08
 8003abc:	20000d1c 	.word	0x20000d1c
 8003ac0:	20000d34 	.word	0x20000d34
 8003ac4:	20000d00 	.word	0x20000d00
 8003ac8:	20000d04 	.word	0x20000d04

08003acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ad2:	e019      	b.n	8003b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ad4:	f000 feaa 	bl	800482c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad8:	4b10      	ldr	r3, [pc, #64]	@ (8003b1c <prvCheckTasksWaitingTermination+0x50>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe f9cd 	bl	8001e84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aea:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <prvCheckTasksWaitingTermination+0x54>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	4a0b      	ldr	r2, [pc, #44]	@ (8003b20 <prvCheckTasksWaitingTermination+0x54>)
 8003af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <prvCheckTasksWaitingTermination+0x58>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <prvCheckTasksWaitingTermination+0x58>)
 8003afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003afe:	f000 fec5 	bl	800488c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f810 	bl	8003b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b08:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <prvCheckTasksWaitingTermination+0x58>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e1      	bne.n	8003ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000d1c 	.word	0x20000d1c
 8003b20:	20000d48 	.word	0x20000d48
 8003b24:	20000d30 	.word	0x20000d30

08003b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3354      	adds	r3, #84	@ 0x54
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 f96f 	bl	8004e18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d108      	bne.n	8003b56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 f83f 	bl	8004bcc <vPortFree>
				vPortFree( pxTCB );
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f001 f83c 	bl	8004bcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b54:	e019      	b.n	8003b8a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d103      	bne.n	8003b68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f001 f833 	bl	8004bcc <vPortFree>
	}
 8003b66:	e010      	b.n	8003b8a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d00b      	beq.n	8003b8a <prvDeleteTCB+0x62>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	60fb      	str	r3, [r7, #12]
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	e7fd      	b.n	8003b86 <prvDeleteTCB+0x5e>
	}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <prvResetNextTaskUnblockTime+0x38>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003baa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bac:	e008      	b.n	8003bc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bae:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <prvResetNextTaskUnblockTime+0x38>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a04      	ldr	r2, [pc, #16]	@ (8003bd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003bbe:	6013      	str	r3, [r2, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000d00 	.word	0x20000d00
 8003bd0:	20000d68 	.word	0x20000d68

08003bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bda:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <xTaskGetSchedulerState+0x34>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003be2:	2301      	movs	r3, #1
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	e008      	b.n	8003bfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be8:	4b08      	ldr	r3, [pc, #32]	@ (8003c0c <xTaskGetSchedulerState+0x38>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	e001      	b.n	8003bfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bfa:	687b      	ldr	r3, [r7, #4]
	}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000d54 	.word	0x20000d54
 8003c0c:	20000d70 	.word	0x20000d70

08003c10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d051      	beq.n	8003cca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd4 <xTaskPriorityInherit+0xc4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d241      	bcs.n	8003cb8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	db06      	blt.n	8003c4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c3c:	4b25      	ldr	r3, [pc, #148]	@ (8003cd4 <xTaskPriorityInherit+0xc4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6959      	ldr	r1, [r3, #20]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd8 <xTaskPriorityInherit+0xc8>)
 8003c5c:	4413      	add	r3, r2
 8003c5e:	4299      	cmp	r1, r3
 8003c60:	d122      	bne.n	8003ca8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe f90c 	bl	8001e84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c6c:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <xTaskPriorityInherit+0xc4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7a:	4b18      	ldr	r3, [pc, #96]	@ (8003cdc <xTaskPriorityInherit+0xcc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d903      	bls.n	8003c8a <xTaskPriorityInherit+0x7a>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	4a15      	ldr	r2, [pc, #84]	@ (8003cdc <xTaskPriorityInherit+0xcc>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a10      	ldr	r2, [pc, #64]	@ (8003cd8 <xTaskPriorityInherit+0xc8>)
 8003c98:	441a      	add	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fe f894 	bl	8001dce <vListInsertEnd>
 8003ca6:	e004      	b.n	8003cb2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <xTaskPriorityInherit+0xc4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e008      	b.n	8003cca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <xTaskPriorityInherit+0xc4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d201      	bcs.n	8003cca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003cca:	68fb      	ldr	r3, [r7, #12]
	}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000874 	.word	0x20000874
 8003cd8:	20000878 	.word	0x20000878
 8003cdc:	20000d50 	.word	0x20000d50

08003ce0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d058      	beq.n	8003da8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8003db4 <xTaskPriorityDisinherit+0xd4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d00b      	beq.n	8003d18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60fb      	str	r3, [r7, #12]
}
 8003d12:	bf00      	nop
 8003d14:	bf00      	nop
 8003d16:	e7fd      	b.n	8003d14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60bb      	str	r3, [r7, #8]
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d02c      	beq.n	8003da8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d128      	bne.n	8003da8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe f892 	bl	8001e84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d78:	4b0f      	ldr	r3, [pc, #60]	@ (8003db8 <xTaskPriorityDisinherit+0xd8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d903      	bls.n	8003d88 <xTaskPriorityDisinherit+0xa8>
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	4a0c      	ldr	r2, [pc, #48]	@ (8003db8 <xTaskPriorityDisinherit+0xd8>)
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4a09      	ldr	r2, [pc, #36]	@ (8003dbc <xTaskPriorityDisinherit+0xdc>)
 8003d96:	441a      	add	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	f7fe f815 	bl	8001dce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003da8:	697b      	ldr	r3, [r7, #20]
	}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000874 	.word	0x20000874
 8003db8:	20000d50 	.word	0x20000d50
 8003dbc:	20000878 	.word	0x20000878

08003dc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d06c      	beq.n	8003eb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	60fb      	str	r3, [r7, #12]
}
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d902      	bls.n	8003e08 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	e002      	b.n	8003e0e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d04c      	beq.n	8003eb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d147      	bne.n	8003eb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003e22:	4b26      	ldr	r3, [pc, #152]	@ (8003ebc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d10b      	bne.n	8003e44 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	60bb      	str	r3, [r7, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	db04      	blt.n	8003e62 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6959      	ldr	r1, [r3, #20]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4a13      	ldr	r2, [pc, #76]	@ (8003ec0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003e72:	4413      	add	r3, r2
 8003e74:	4299      	cmp	r1, r3
 8003e76:	d11c      	bne.n	8003eb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe f801 	bl	8001e84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e86:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d903      	bls.n	8003e96 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e92:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4a07      	ldr	r2, [pc, #28]	@ (8003ec0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003ea4:	441a      	add	r2, r3
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fd ff8e 	bl	8001dce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003eb2:	bf00      	nop
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000874 	.word	0x20000874
 8003ec0:	20000878 	.word	0x20000878
 8003ec4:	20000d50 	.word	0x20000d50

08003ec8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003ecc:	4b07      	ldr	r3, [pc, #28]	@ (8003eec <pvTaskIncrementMutexHeldCount+0x24>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <pvTaskIncrementMutexHeldCount+0x24>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eda:	3201      	adds	r2, #1
 8003edc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8003ede:	4b03      	ldr	r3, [pc, #12]	@ (8003eec <pvTaskIncrementMutexHeldCount+0x24>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
	}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000874 	.word	0x20000874

08003ef0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003efa:	4b21      	ldr	r3, [pc, #132]	@ (8003f80 <prvAddCurrentTaskToDelayedList+0x90>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f00:	4b20      	ldr	r3, [pc, #128]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd ffbc 	bl	8001e84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f12:	d10a      	bne.n	8003f2a <prvAddCurrentTaskToDelayedList+0x3a>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4819      	ldr	r0, [pc, #100]	@ (8003f88 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f24:	f7fd ff53 	bl	8001dce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f28:	e026      	b.n	8003f78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d209      	bcs.n	8003f56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f42:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b0f      	ldr	r3, [pc, #60]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fd ff60 	bl	8001e14 <vListInsert>
}
 8003f54:	e010      	b.n	8003f78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f56:	4b0e      	ldr	r3, [pc, #56]	@ (8003f90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f7fd ff56 	bl	8001e14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d202      	bcs.n	8003f78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f72:	4a08      	ldr	r2, [pc, #32]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000d4c 	.word	0x20000d4c
 8003f84:	20000874 	.word	0x20000874
 8003f88:	20000d34 	.word	0x20000d34
 8003f8c:	20000d04 	.word	0x20000d04
 8003f90:	20000d00 	.word	0x20000d00
 8003f94:	20000d68 	.word	0x20000d68

08003f98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	@ 0x28
 8003f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fa2:	f000 fb11 	bl	80045c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <xTimerCreateTimerTask+0x84>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d021      	beq.n	8003ff2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fb6:	1d3a      	adds	r2, r7, #4
 8003fb8:	f107 0108 	add.w	r1, r7, #8
 8003fbc:	f107 030c 	add.w	r3, r7, #12
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd febf 	bl	8001d44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	9202      	str	r2, [sp, #8]
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	460a      	mov	r2, r1
 8003fd8:	4911      	ldr	r1, [pc, #68]	@ (8004020 <xTimerCreateTimerTask+0x88>)
 8003fda:	4812      	ldr	r0, [pc, #72]	@ (8004024 <xTimerCreateTimerTask+0x8c>)
 8003fdc:	f7fe ffa6 	bl	8002f2c <xTaskCreateStatic>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4a11      	ldr	r2, [pc, #68]	@ (8004028 <xTimerCreateTimerTask+0x90>)
 8003fe4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fe6:	4b10      	ldr	r3, [pc, #64]	@ (8004028 <xTimerCreateTimerTask+0x90>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	613b      	str	r3, [r7, #16]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004010:	697b      	ldr	r3, [r7, #20]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000da4 	.word	0x20000da4
 8004020:	08005068 	.word	0x08005068
 8004024:	08004165 	.word	0x08004165
 8004028:	20000da8 	.word	0x20000da8

0800402c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	@ 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <xTimerGenericCommand+0x30>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	623b      	str	r3, [r7, #32]
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800405c:	4b19      	ldr	r3, [pc, #100]	@ (80040c4 <xTimerGenericCommand+0x98>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d02a      	beq.n	80040ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b05      	cmp	r3, #5
 8004074:	dc18      	bgt.n	80040a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004076:	f7ff fdad 	bl	8003bd4 <xTaskGetSchedulerState>
 800407a:	4603      	mov	r3, r0
 800407c:	2b02      	cmp	r3, #2
 800407e:	d109      	bne.n	8004094 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004080:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <xTimerGenericCommand+0x98>)
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	f107 0110 	add.w	r1, r7, #16
 8004088:	2300      	movs	r3, #0
 800408a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800408c:	f7fe f8d8 	bl	8002240 <xQueueGenericSend>
 8004090:	6278      	str	r0, [r7, #36]	@ 0x24
 8004092:	e012      	b.n	80040ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <xTimerGenericCommand+0x98>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	f107 0110 	add.w	r1, r7, #16
 800409c:	2300      	movs	r3, #0
 800409e:	2200      	movs	r2, #0
 80040a0:	f7fe f8ce 	bl	8002240 <xQueueGenericSend>
 80040a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80040a6:	e008      	b.n	80040ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <xTimerGenericCommand+0x98>)
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	f107 0110 	add.w	r1, r7, #16
 80040b0:	2300      	movs	r3, #0
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	f7fe f9c6 	bl	8002444 <xQueueGenericSendFromISR>
 80040b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3728      	adds	r7, #40	@ 0x28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000da4 	.word	0x20000da4

080040c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d2:	4b23      	ldr	r3, [pc, #140]	@ (8004160 <prvProcessExpiredTimer+0x98>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3304      	adds	r3, #4
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fd fecf 	bl	8001e84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d023      	beq.n	800413c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	18d1      	adds	r1, r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f000 f8d3 	bl	80042ac <prvInsertTimerInActiveList>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800410c:	2300      	movs	r3, #0
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	2100      	movs	r1, #0
 8004116:	6978      	ldr	r0, [r7, #20]
 8004118:	f7ff ff88 	bl	800402c <xTimerGenericCommand>
 800411c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d114      	bne.n	800414e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60fb      	str	r3, [r7, #12]
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	6978      	ldr	r0, [r7, #20]
 8004154:	4798      	blx	r3
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000d9c 	.word	0x20000d9c

08004164 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f859 	bl	8004228 <prvGetNextExpireTime>
 8004176:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4619      	mov	r1, r3
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f805 	bl	800418c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004182:	f000 f8d5 	bl	8004330 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004186:	bf00      	nop
 8004188:	e7f0      	b.n	800416c <prvTimerTask+0x8>
	...

0800418c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004196:	f7ff f92d 	bl	80033f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f864 	bl	800426c <prvSampleTimeNow>
 80041a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d130      	bne.n	800420e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <prvProcessTimerOrBlockTask+0x3c>
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d806      	bhi.n	80041c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041ba:	f7ff f929 	bl	8003410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ff81 	bl	80040c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041c6:	e024      	b.n	8004212 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041ce:	4b13      	ldr	r3, [pc, #76]	@ (800421c <prvProcessTimerOrBlockTask+0x90>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <prvProcessTimerOrBlockTask+0x50>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <prvProcessTimerOrBlockTask+0x52>
 80041dc:	2300      	movs	r3, #0
 80041de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <prvProcessTimerOrBlockTask+0x94>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	f7fe fe69 	bl	8002ec4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041f2:	f7ff f90d 	bl	8003410 <xTaskResumeAll>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <prvProcessTimerOrBlockTask+0x98>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	f3bf 8f6f 	isb	sy
}
 800420c:	e001      	b.n	8004212 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800420e:	f7ff f8ff 	bl	8003410 <xTaskResumeAll>
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000da0 	.word	0x20000da0
 8004220:	20000da4 	.word	0x20000da4
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004230:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <prvGetNextExpireTime+0x40>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <prvGetNextExpireTime+0x16>
 800423a:	2201      	movs	r2, #1
 800423c:	e000      	b.n	8004240 <prvGetNextExpireTime+0x18>
 800423e:	2200      	movs	r2, #0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <prvGetNextExpireTime+0x40>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e001      	b.n	800425c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	20000d9c 	.word	0x20000d9c

0800426c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004274:	f7ff f96a 	bl	800354c <xTaskGetTickCount>
 8004278:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800427a:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <prvSampleTimeNow+0x3c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	429a      	cmp	r2, r3
 8004282:	d205      	bcs.n	8004290 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004284:	f000 f93a 	bl	80044fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e002      	b.n	8004296 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004296:	4a04      	ldr	r2, [pc, #16]	@ (80042a8 <prvSampleTimeNow+0x3c>)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800429c:	68fb      	ldr	r3, [r7, #12]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000dac 	.word	0x20000dac

080042ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d812      	bhi.n	80042f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	1ad2      	subs	r2, r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d302      	bcc.n	80042e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042e0:	2301      	movs	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e01b      	b.n	800431e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <prvInsertTimerInActiveList+0x7c>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f7fd fd8f 	bl	8001e14 <vListInsert>
 80042f6:	e012      	b.n	800431e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d206      	bcs.n	800430e <prvInsertTimerInActiveList+0x62>
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d302      	bcc.n	800430e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e007      	b.n	800431e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800430e:	4b07      	ldr	r3, [pc, #28]	@ (800432c <prvInsertTimerInActiveList+0x80>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3304      	adds	r3, #4
 8004316:	4619      	mov	r1, r3
 8004318:	4610      	mov	r0, r2
 800431a:	f7fd fd7b 	bl	8001e14 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800431e:	697b      	ldr	r3, [r7, #20]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000da0 	.word	0x20000da0
 800432c:	20000d9c 	.word	0x20000d9c

08004330 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08e      	sub	sp, #56	@ 0x38
 8004334:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004336:	e0ce      	b.n	80044d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	da19      	bge.n	8004372 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800433e:	1d3b      	adds	r3, r7, #4
 8004340:	3304      	adds	r3, #4
 8004342:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	61fb      	str	r3, [r7, #28]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004368:	6850      	ldr	r0, [r2, #4]
 800436a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800436c:	6892      	ldr	r2, [r2, #8]
 800436e:	4611      	mov	r1, r2
 8004370:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f2c0 80ae 	blt.w	80044d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	3304      	adds	r3, #4
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd fd7a 	bl	8001e84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004390:	463b      	mov	r3, r7
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ff6a 	bl	800426c <prvSampleTimeNow>
 8004398:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b09      	cmp	r3, #9
 800439e:	f200 8097 	bhi.w	80044d0 <prvProcessReceivedCommands+0x1a0>
 80043a2:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <prvProcessReceivedCommands+0x78>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043d1 	.word	0x080043d1
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043d1 	.word	0x080043d1
 80043b4:	08004447 	.word	0x08004447
 80043b8:	0800445b 	.word	0x0800445b
 80043bc:	080044a7 	.word	0x080044a7
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043d1 	.word	0x080043d1
 80043c8:	08004447 	.word	0x08004447
 80043cc:	0800445b 	.word	0x0800445b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	18d1      	adds	r1, r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f0:	f7ff ff5c 	bl	80042ac <prvInsertTimerInActiveList>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d06c      	beq.n	80044d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004400:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d061      	beq.n	80044d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	441a      	add	r2, r3
 8004418:	2300      	movs	r3, #0
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	2100      	movs	r1, #0
 8004420:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004422:	f7ff fe03 	bl	800402c <xTimerGenericCommand>
 8004426:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d152      	bne.n	80044d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	61bb      	str	r3, [r7, #24]
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	e7fd      	b.n	8004442 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	b2da      	uxtb	r2, r3
 8004452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004454:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004458:	e03d      	b.n	80044d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	b2da      	uxtb	r2, r3
 8004466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004468:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	617b      	str	r3, [r7, #20]
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	e7fd      	b.n	800448e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	18d1      	adds	r1, r2, r3
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a0:	f7ff ff04 	bl	80042ac <prvInsertTimerInActiveList>
					break;
 80044a4:	e017      	b.n	80044d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d103      	bne.n	80044bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80044b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044b6:	f000 fb89 	bl	8004bcc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044ba:	e00c      	b.n	80044d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80044ce:	e002      	b.n	80044d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80044d0:	bf00      	nop
 80044d2:	e000      	b.n	80044d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80044d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044d6:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <prvProcessReceivedCommands+0x1c8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1d39      	adds	r1, r7, #4
 80044dc:	2200      	movs	r2, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe f8de 	bl	80026a0 <xQueueReceive>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f47f af26 	bne.w	8004338 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	3730      	adds	r7, #48	@ 0x30
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000da4 	.word	0x20000da4

080044fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004502:	e049      	b.n	8004598 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004504:	4b2e      	ldr	r3, [pc, #184]	@ (80045c0 <prvSwitchTimerLists+0xc4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450e:	4b2c      	ldr	r3, [pc, #176]	@ (80045c0 <prvSwitchTimerLists+0xc4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3304      	adds	r3, #4
 800451c:	4618      	mov	r0, r3
 800451e:	f7fd fcb1 	bl	8001e84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d02f      	beq.n	8004598 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	429a      	cmp	r2, r3
 8004548:	d90e      	bls.n	8004568 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004556:	4b1a      	ldr	r3, [pc, #104]	@ (80045c0 <prvSwitchTimerLists+0xc4>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f7fd fc57 	bl	8001e14 <vListInsert>
 8004566:	e017      	b.n	8004598 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004568:	2300      	movs	r3, #0
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2300      	movs	r3, #0
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	2100      	movs	r1, #0
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff fd5a 	bl	800402c <xTimerGenericCommand>
 8004578:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	603b      	str	r3, [r7, #0]
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	e7fd      	b.n	8004594 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004598:	4b09      	ldr	r3, [pc, #36]	@ (80045c0 <prvSwitchTimerLists+0xc4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1b0      	bne.n	8004504 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045a2:	4b07      	ldr	r3, [pc, #28]	@ (80045c0 <prvSwitchTimerLists+0xc4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045a8:	4b06      	ldr	r3, [pc, #24]	@ (80045c4 <prvSwitchTimerLists+0xc8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a04      	ldr	r2, [pc, #16]	@ (80045c0 <prvSwitchTimerLists+0xc4>)
 80045ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045b0:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <prvSwitchTimerLists+0xc8>)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	6013      	str	r3, [r2, #0]
}
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000d9c 	.word	0x20000d9c
 80045c4:	20000da0 	.word	0x20000da0

080045c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045ce:	f000 f92d 	bl	800482c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045d2:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <prvCheckForValidListAndQueue+0x60>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d120      	bne.n	800461c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045da:	4814      	ldr	r0, [pc, #80]	@ (800462c <prvCheckForValidListAndQueue+0x64>)
 80045dc:	f7fd fbcc 	bl	8001d78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045e0:	4813      	ldr	r0, [pc, #76]	@ (8004630 <prvCheckForValidListAndQueue+0x68>)
 80045e2:	f7fd fbc9 	bl	8001d78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045e6:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <prvCheckForValidListAndQueue+0x6c>)
 80045e8:	4a10      	ldr	r2, [pc, #64]	@ (800462c <prvCheckForValidListAndQueue+0x64>)
 80045ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045ec:	4b12      	ldr	r3, [pc, #72]	@ (8004638 <prvCheckForValidListAndQueue+0x70>)
 80045ee:	4a10      	ldr	r2, [pc, #64]	@ (8004630 <prvCheckForValidListAndQueue+0x68>)
 80045f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045f2:	2300      	movs	r3, #0
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	4b11      	ldr	r3, [pc, #68]	@ (800463c <prvCheckForValidListAndQueue+0x74>)
 80045f8:	4a11      	ldr	r2, [pc, #68]	@ (8004640 <prvCheckForValidListAndQueue+0x78>)
 80045fa:	2110      	movs	r1, #16
 80045fc:	200a      	movs	r0, #10
 80045fe:	f7fd fcd5 	bl	8001fac <xQueueGenericCreateStatic>
 8004602:	4603      	mov	r3, r0
 8004604:	4a08      	ldr	r2, [pc, #32]	@ (8004628 <prvCheckForValidListAndQueue+0x60>)
 8004606:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004608:	4b07      	ldr	r3, [pc, #28]	@ (8004628 <prvCheckForValidListAndQueue+0x60>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <prvCheckForValidListAndQueue+0x60>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	490b      	ldr	r1, [pc, #44]	@ (8004644 <prvCheckForValidListAndQueue+0x7c>)
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fc02 	bl	8002e20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800461c:	f000 f936 	bl	800488c <vPortExitCritical>
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000da4 	.word	0x20000da4
 800462c:	20000d74 	.word	0x20000d74
 8004630:	20000d88 	.word	0x20000d88
 8004634:	20000d9c 	.word	0x20000d9c
 8004638:	20000da0 	.word	0x20000da0
 800463c:	20000e50 	.word	0x20000e50
 8004640:	20000db0 	.word	0x20000db0
 8004644:	08005070 	.word	0x08005070

08004648 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3b04      	subs	r3, #4
 8004658:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3b04      	subs	r3, #4
 8004666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f023 0201 	bic.w	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b04      	subs	r3, #4
 8004676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004678:	4a08      	ldr	r2, [pc, #32]	@ (800469c <pxPortInitialiseStack+0x54>)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b14      	subs	r3, #20
 8004682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3b20      	subs	r3, #32
 800468e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004690:	68fb      	ldr	r3, [r7, #12]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	080046a1 	.word	0x080046a1

080046a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046aa:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <prvTaskExitError+0x54>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046b2:	d00b      	beq.n	80046cc <prvTaskExitError+0x2c>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	60fb      	str	r3, [r7, #12]
}
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <prvTaskExitError+0x28>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60bb      	str	r3, [r7, #8]
}
 80046de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046e0:	bf00      	nop
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0fc      	beq.n	80046e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	2000000c 	.word	0x2000000c
	...

08004700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004700:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <pxCurrentTCBConst2>)
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	6808      	ldr	r0, [r1, #0]
 8004706:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800470a:	f380 8809 	msr	PSP, r0
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8811 	msr	BASEPRI, r0
 800471a:	f04e 0e0d 	orr.w	lr, lr, #13
 800471e:	4770      	bx	lr

08004720 <pxCurrentTCBConst2>:
 8004720:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004728:	4806      	ldr	r0, [pc, #24]	@ (8004744 <prvPortStartFirstTask+0x1c>)
 800472a:	6800      	ldr	r0, [r0, #0]
 800472c:	6800      	ldr	r0, [r0, #0]
 800472e:	f380 8808 	msr	MSP, r0
 8004732:	b662      	cpsie	i
 8004734:	b661      	cpsie	f
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	df00      	svc	0
 8004740:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004742:	bf00      	nop
 8004744:	e000ed08 	.word	0xe000ed08

08004748 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800474e:	4b32      	ldr	r3, [pc, #200]	@ (8004818 <xPortStartScheduler+0xd0>)
 8004750:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	22ff      	movs	r2, #255	@ 0xff
 800475e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004770:	b2da      	uxtb	r2, r3
 8004772:	4b2a      	ldr	r3, [pc, #168]	@ (800481c <xPortStartScheduler+0xd4>)
 8004774:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004776:	4b2a      	ldr	r3, [pc, #168]	@ (8004820 <xPortStartScheduler+0xd8>)
 8004778:	2207      	movs	r2, #7
 800477a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800477c:	e009      	b.n	8004792 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800477e:	4b28      	ldr	r3, [pc, #160]	@ (8004820 <xPortStartScheduler+0xd8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3b01      	subs	r3, #1
 8004784:	4a26      	ldr	r2, [pc, #152]	@ (8004820 <xPortStartScheduler+0xd8>)
 8004786:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800479a:	2b80      	cmp	r3, #128	@ 0x80
 800479c:	d0ef      	beq.n	800477e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800479e:	4b20      	ldr	r3, [pc, #128]	@ (8004820 <xPortStartScheduler+0xd8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1c3 0307 	rsb	r3, r3, #7
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d00b      	beq.n	80047c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	60bb      	str	r3, [r7, #8]
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	e7fd      	b.n	80047be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047c2:	4b17      	ldr	r3, [pc, #92]	@ (8004820 <xPortStartScheduler+0xd8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	4a15      	ldr	r2, [pc, #84]	@ (8004820 <xPortStartScheduler+0xd8>)
 80047ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047cc:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <xPortStartScheduler+0xd8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047d4:	4a12      	ldr	r2, [pc, #72]	@ (8004820 <xPortStartScheduler+0xd8>)
 80047d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047e0:	4b10      	ldr	r3, [pc, #64]	@ (8004824 <xPortStartScheduler+0xdc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004824 <xPortStartScheduler+0xdc>)
 80047e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <xPortStartScheduler+0xdc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004824 <xPortStartScheduler+0xdc>)
 80047f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80047f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047f8:	f000 f8b8 	bl	800496c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <xPortStartScheduler+0xe0>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004802:	f7ff ff91 	bl	8004728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004806:	f7fe ff69 	bl	80036dc <vTaskSwitchContext>
	prvTaskExitError();
 800480a:	f7ff ff49 	bl	80046a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	e000e400 	.word	0xe000e400
 800481c:	20000ea0 	.word	0x20000ea0
 8004820:	20000ea4 	.word	0x20000ea4
 8004824:	e000ed20 	.word	0xe000ed20
 8004828:	2000000c 	.word	0x2000000c

0800482c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
}
 8004844:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004846:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <vPortEnterCritical+0x58>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3301      	adds	r3, #1
 800484c:	4a0d      	ldr	r2, [pc, #52]	@ (8004884 <vPortEnterCritical+0x58>)
 800484e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <vPortEnterCritical+0x58>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d110      	bne.n	800487a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <vPortEnterCritical+0x5c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <vPortEnterCritical+0x4e>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	603b      	str	r3, [r7, #0]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <vPortEnterCritical+0x4a>
	}
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	2000000c 	.word	0x2000000c
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004892:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <vPortExitCritical+0x50>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <vPortExitCritical+0x26>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	607b      	str	r3, [r7, #4]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048b2:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <vPortExitCritical+0x50>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	4a08      	ldr	r2, [pc, #32]	@ (80048dc <vPortExitCritical+0x50>)
 80048ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048bc:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <vPortExitCritical+0x50>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <vPortExitCritical+0x44>
 80048c4:	2300      	movs	r3, #0
 80048c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f383 8811 	msr	BASEPRI, r3
}
 80048ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	2000000c 	.word	0x2000000c

080048e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048e0:	f3ef 8009 	mrs	r0, PSP
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <pxCurrentTCBConst>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048f0:	6010      	str	r0, [r2, #0]
 80048f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80048fa:	f380 8811 	msr	BASEPRI, r0
 80048fe:	f7fe feed 	bl	80036dc <vTaskSwitchContext>
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f380 8811 	msr	BASEPRI, r0
 800490a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	6808      	ldr	r0, [r1, #0]
 8004912:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004916:	f380 8809 	msr	PSP, r0
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	4770      	bx	lr

08004920 <pxCurrentTCBConst>:
 8004920:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	607b      	str	r3, [r7, #4]
}
 8004940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004942:	f7fe fe11 	bl	8003568 <xTaskIncrementTick>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800494c:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <xPortSysTickHandler+0x40>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f383 8811 	msr	BASEPRI, r3
}
 800495e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004970:	4b0a      	ldr	r3, [pc, #40]	@ (800499c <vPortSetupTimerInterrupt+0x30>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004976:	4b0a      	ldr	r3, [pc, #40]	@ (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800497c:	4b09      	ldr	r3, [pc, #36]	@ (80049a4 <vPortSetupTimerInterrupt+0x38>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a09      	ldr	r2, [pc, #36]	@ (80049a8 <vPortSetupTimerInterrupt+0x3c>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	4a08      	ldr	r2, [pc, #32]	@ (80049ac <vPortSetupTimerInterrupt+0x40>)
 800498a:	3b01      	subs	r3, #1
 800498c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800498e:	4b03      	ldr	r3, [pc, #12]	@ (800499c <vPortSetupTimerInterrupt+0x30>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	e000e010 	.word	0xe000e010
 80049a0:	e000e018 	.word	0xe000e018
 80049a4:	20000000 	.word	0x20000000
 80049a8:	10624dd3 	.word	0x10624dd3
 80049ac:	e000e014 	.word	0xe000e014

080049b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049b6:	f3ef 8305 	mrs	r3, IPSR
 80049ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b0f      	cmp	r3, #15
 80049c0:	d915      	bls.n	80049ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049c2:	4a17      	ldr	r2, [pc, #92]	@ (8004a20 <vPortValidateInterruptPriority+0x70>)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049cc:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <vPortValidateInterruptPriority+0x74>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	7afa      	ldrb	r2, [r7, #11]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d20b      	bcs.n	80049ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	607b      	str	r3, [r7, #4]
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	e7fd      	b.n	80049ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <vPortValidateInterruptPriority+0x78>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049f6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <vPortValidateInterruptPriority+0x7c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d90b      	bls.n	8004a16 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	603b      	str	r3, [r7, #0]
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	e7fd      	b.n	8004a12 <vPortValidateInterruptPriority+0x62>
	}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr
 8004a20:	e000e3f0 	.word	0xe000e3f0
 8004a24:	20000ea0 	.word	0x20000ea0
 8004a28:	e000ed0c 	.word	0xe000ed0c
 8004a2c:	20000ea4 	.word	0x20000ea4

08004a30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	@ 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a3c:	f7fe fcda 	bl	80033f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a40:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb4 <pvPortMalloc+0x184>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a48:	f000 f924 	bl	8004c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8004bb8 <pvPortMalloc+0x188>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f040 8095 	bne.w	8004b84 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01e      	beq.n	8004a9e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a60:	2208      	movs	r2, #8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4413      	add	r3, r2
 8004a66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d015      	beq.n	8004a9e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	3308      	adds	r3, #8
 8004a7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <pvPortMalloc+0x6e>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	617b      	str	r3, [r7, #20]
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	e7fd      	b.n	8004a9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d06f      	beq.n	8004b84 <pvPortMalloc+0x154>
 8004aa4:	4b45      	ldr	r3, [pc, #276]	@ (8004bbc <pvPortMalloc+0x18c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d86a      	bhi.n	8004b84 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004aae:	4b44      	ldr	r3, [pc, #272]	@ (8004bc0 <pvPortMalloc+0x190>)
 8004ab0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ab2:	4b43      	ldr	r3, [pc, #268]	@ (8004bc0 <pvPortMalloc+0x190>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ab8:	e004      	b.n	8004ac4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d903      	bls.n	8004ad6 <pvPortMalloc+0xa6>
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f1      	bne.n	8004aba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ad6:	4b37      	ldr	r3, [pc, #220]	@ (8004bb4 <pvPortMalloc+0x184>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d051      	beq.n	8004b84 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	4413      	add	r3, r2
 8004ae8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	1ad2      	subs	r2, r2, r3
 8004afa:	2308      	movs	r3, #8
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d920      	bls.n	8004b44 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00b      	beq.n	8004b2c <pvPortMalloc+0xfc>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	613b      	str	r3, [r7, #16]
}
 8004b26:	bf00      	nop
 8004b28:	bf00      	nop
 8004b2a:	e7fd      	b.n	8004b28 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	1ad2      	subs	r2, r2, r3
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b3e:	69b8      	ldr	r0, [r7, #24]
 8004b40:	f000 f90a 	bl	8004d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b44:	4b1d      	ldr	r3, [pc, #116]	@ (8004bbc <pvPortMalloc+0x18c>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <pvPortMalloc+0x18c>)
 8004b50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b52:	4b1a      	ldr	r3, [pc, #104]	@ (8004bbc <pvPortMalloc+0x18c>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <pvPortMalloc+0x194>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d203      	bcs.n	8004b66 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b5e:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <pvPortMalloc+0x18c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a18      	ldr	r2, [pc, #96]	@ (8004bc4 <pvPortMalloc+0x194>)
 8004b64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	4b13      	ldr	r3, [pc, #76]	@ (8004bb8 <pvPortMalloc+0x188>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b7a:	4b13      	ldr	r3, [pc, #76]	@ (8004bc8 <pvPortMalloc+0x198>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	4a11      	ldr	r2, [pc, #68]	@ (8004bc8 <pvPortMalloc+0x198>)
 8004b82:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b84:	f7fe fc44 	bl	8003410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <pvPortMalloc+0x17a>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60fb      	str	r3, [r7, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <pvPortMalloc+0x176>
	return pvReturn;
 8004baa:	69fb      	ldr	r3, [r7, #28]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3728      	adds	r7, #40	@ 0x28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20001ab0 	.word	0x20001ab0
 8004bb8:	20001ac4 	.word	0x20001ac4
 8004bbc:	20001ab4 	.word	0x20001ab4
 8004bc0:	20001aa8 	.word	0x20001aa8
 8004bc4:	20001ab8 	.word	0x20001ab8
 8004bc8:	20001abc 	.word	0x20001abc

08004bcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04f      	beq.n	8004c7e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bde:	2308      	movs	r3, #8
 8004be0:	425b      	negs	r3, r3
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4413      	add	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <vPortFree+0xbc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10b      	bne.n	8004c12 <vPortFree+0x46>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	60fb      	str	r3, [r7, #12]
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	e7fd      	b.n	8004c0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <vPortFree+0x66>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60bb      	str	r3, [r7, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <vPortFree+0xbc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01e      	beq.n	8004c7e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d11a      	bne.n	8004c7e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c88 <vPortFree+0xbc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	401a      	ands	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c58:	f7fe fbcc 	bl	80033f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4b0a      	ldr	r3, [pc, #40]	@ (8004c8c <vPortFree+0xc0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	4a09      	ldr	r2, [pc, #36]	@ (8004c8c <vPortFree+0xc0>)
 8004c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c6a:	6938      	ldr	r0, [r7, #16]
 8004c6c:	f000 f874 	bl	8004d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c70:	4b07      	ldr	r3, [pc, #28]	@ (8004c90 <vPortFree+0xc4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	4a06      	ldr	r2, [pc, #24]	@ (8004c90 <vPortFree+0xc4>)
 8004c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c7a:	f7fe fbc9 	bl	8003410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c7e:	bf00      	nop
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20001ac4 	.word	0x20001ac4
 8004c8c:	20001ab4 	.word	0x20001ab4
 8004c90:	20001ac0 	.word	0x20001ac0

08004c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c9a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ca0:	4b27      	ldr	r3, [pc, #156]	@ (8004d40 <prvHeapInit+0xac>)
 8004ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3307      	adds	r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d40 <prvHeapInit+0xac>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d44 <prvHeapInit+0xb0>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d44 <prvHeapInit+0xb0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a15      	ldr	r2, [pc, #84]	@ (8004d48 <prvHeapInit+0xb4>)
 8004cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cf6:	4b14      	ldr	r3, [pc, #80]	@ (8004d48 <prvHeapInit+0xb4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cfe:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <prvHeapInit+0xb4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d14:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <prvHeapInit+0xb4>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <prvHeapInit+0xb8>)
 8004d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a09      	ldr	r2, [pc, #36]	@ (8004d50 <prvHeapInit+0xbc>)
 8004d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d2c:	4b09      	ldr	r3, [pc, #36]	@ (8004d54 <prvHeapInit+0xc0>)
 8004d2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000ea8 	.word	0x20000ea8
 8004d44:	20001aa8 	.word	0x20001aa8
 8004d48:	20001ab0 	.word	0x20001ab0
 8004d4c:	20001ab8 	.word	0x20001ab8
 8004d50:	20001ab4 	.word	0x20001ab4
 8004d54:	20001ac4 	.word	0x20001ac4

08004d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d60:	4b27      	ldr	r3, [pc, #156]	@ (8004e00 <prvInsertBlockIntoFreeList+0xa8>)
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x14>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d8f7      	bhi.n	8004d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d108      	bne.n	8004d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d118      	bne.n	8004de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b14      	ldr	r3, [pc, #80]	@ (8004e04 <prvInsertBlockIntoFreeList+0xac>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d00d      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e008      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <prvInsertBlockIntoFreeList+0xac>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e003      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d002      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr
 8004e00:	20001aa8 	.word	0x20001aa8
 8004e04:	20001ab0 	.word	0x20001ab0

08004e08 <memset>:
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4402      	add	r2, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <_reclaim_reent>:
 8004e18:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed0 <_reclaim_reent+0xb8>)
 8004e1a:	b570      	push	{r4, r5, r6, lr}
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4283      	cmp	r3, r0
 8004e22:	d053      	beq.n	8004ecc <_reclaim_reent+0xb4>
 8004e24:	69c3      	ldr	r3, [r0, #28]
 8004e26:	b31b      	cbz	r3, 8004e70 <_reclaim_reent+0x58>
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	b163      	cbz	r3, 8004e46 <_reclaim_reent+0x2e>
 8004e2c:	2500      	movs	r5, #0
 8004e2e:	69e3      	ldr	r3, [r4, #28]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	5959      	ldr	r1, [r3, r5]
 8004e34:	b9b1      	cbnz	r1, 8004e64 <_reclaim_reent+0x4c>
 8004e36:	3504      	adds	r5, #4
 8004e38:	2d80      	cmp	r5, #128	@ 0x80
 8004e3a:	d1f8      	bne.n	8004e2e <_reclaim_reent+0x16>
 8004e3c:	69e3      	ldr	r3, [r4, #28]
 8004e3e:	4620      	mov	r0, r4
 8004e40:	68d9      	ldr	r1, [r3, #12]
 8004e42:	f000 f87b 	bl	8004f3c <_free_r>
 8004e46:	69e3      	ldr	r3, [r4, #28]
 8004e48:	6819      	ldr	r1, [r3, #0]
 8004e4a:	b111      	cbz	r1, 8004e52 <_reclaim_reent+0x3a>
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f000 f875 	bl	8004f3c <_free_r>
 8004e52:	69e3      	ldr	r3, [r4, #28]
 8004e54:	689d      	ldr	r5, [r3, #8]
 8004e56:	b15d      	cbz	r5, 8004e70 <_reclaim_reent+0x58>
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	682d      	ldr	r5, [r5, #0]
 8004e5e:	f000 f86d 	bl	8004f3c <_free_r>
 8004e62:	e7f8      	b.n	8004e56 <_reclaim_reent+0x3e>
 8004e64:	680e      	ldr	r6, [r1, #0]
 8004e66:	4620      	mov	r0, r4
 8004e68:	f000 f868 	bl	8004f3c <_free_r>
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	e7e1      	b.n	8004e34 <_reclaim_reent+0x1c>
 8004e70:	6961      	ldr	r1, [r4, #20]
 8004e72:	b111      	cbz	r1, 8004e7a <_reclaim_reent+0x62>
 8004e74:	4620      	mov	r0, r4
 8004e76:	f000 f861 	bl	8004f3c <_free_r>
 8004e7a:	69e1      	ldr	r1, [r4, #28]
 8004e7c:	b111      	cbz	r1, 8004e84 <_reclaim_reent+0x6c>
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f000 f85c 	bl	8004f3c <_free_r>
 8004e84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004e86:	b111      	cbz	r1, 8004e8e <_reclaim_reent+0x76>
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f000 f857 	bl	8004f3c <_free_r>
 8004e8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e90:	b111      	cbz	r1, 8004e98 <_reclaim_reent+0x80>
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 f852 	bl	8004f3c <_free_r>
 8004e98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004e9a:	b111      	cbz	r1, 8004ea2 <_reclaim_reent+0x8a>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 f84d 	bl	8004f3c <_free_r>
 8004ea2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ea4:	b111      	cbz	r1, 8004eac <_reclaim_reent+0x94>
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 f848 	bl	8004f3c <_free_r>
 8004eac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004eae:	b111      	cbz	r1, 8004eb6 <_reclaim_reent+0x9e>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 f843 	bl	8004f3c <_free_r>
 8004eb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004eb8:	b111      	cbz	r1, 8004ec0 <_reclaim_reent+0xa8>
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 f83e 	bl	8004f3c <_free_r>
 8004ec0:	6a23      	ldr	r3, [r4, #32]
 8004ec2:	b11b      	cbz	r3, 8004ecc <_reclaim_reent+0xb4>
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004eca:	4718      	bx	r3
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000010 	.word	0x20000010

08004ed4 <__libc_init_array>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	4d0c      	ldr	r5, [pc, #48]	@ (8004f0c <__libc_init_array+0x38>)
 8004eda:	4c0d      	ldr	r4, [pc, #52]	@ (8004f10 <__libc_init_array+0x3c>)
 8004edc:	1b64      	subs	r4, r4, r5
 8004ede:	10a4      	asrs	r4, r4, #2
 8004ee0:	42a6      	cmp	r6, r4
 8004ee2:	d109      	bne.n	8004ef8 <__libc_init_array+0x24>
 8004ee4:	f000 f87e 	bl	8004fe4 <_init>
 8004ee8:	2600      	movs	r6, #0
 8004eea:	4d0a      	ldr	r5, [pc, #40]	@ (8004f14 <__libc_init_array+0x40>)
 8004eec:	4c0a      	ldr	r4, [pc, #40]	@ (8004f18 <__libc_init_array+0x44>)
 8004eee:	1b64      	subs	r4, r4, r5
 8004ef0:	10a4      	asrs	r4, r4, #2
 8004ef2:	42a6      	cmp	r6, r4
 8004ef4:	d105      	bne.n	8004f02 <__libc_init_array+0x2e>
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efc:	4798      	blx	r3
 8004efe:	3601      	adds	r6, #1
 8004f00:	e7ee      	b.n	8004ee0 <__libc_init_array+0xc>
 8004f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f06:	4798      	blx	r3
 8004f08:	3601      	adds	r6, #1
 8004f0a:	e7f2      	b.n	8004ef2 <__libc_init_array+0x1e>
 8004f0c:	08005140 	.word	0x08005140
 8004f10:	08005140 	.word	0x08005140
 8004f14:	08005140 	.word	0x08005140
 8004f18:	08005144 	.word	0x08005144

08004f1c <__retarget_lock_acquire_recursive>:
 8004f1c:	4770      	bx	lr

08004f1e <__retarget_lock_release_recursive>:
 8004f1e:	4770      	bx	lr

08004f20 <memcpy>:
 8004f20:	440a      	add	r2, r1
 8004f22:	4291      	cmp	r1, r2
 8004f24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004f28:	d100      	bne.n	8004f2c <memcpy+0xc>
 8004f2a:	4770      	bx	lr
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f32:	4291      	cmp	r1, r2
 8004f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f38:	d1f9      	bne.n	8004f2e <memcpy+0xe>
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <_free_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4605      	mov	r5, r0
 8004f40:	2900      	cmp	r1, #0
 8004f42:	d040      	beq.n	8004fc6 <_free_r+0x8a>
 8004f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f48:	1f0c      	subs	r4, r1, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bfb8      	it	lt
 8004f4e:	18e4      	addlt	r4, r4, r3
 8004f50:	f000 f83c 	bl	8004fcc <__malloc_lock>
 8004f54:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc8 <_free_r+0x8c>)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	b933      	cbnz	r3, 8004f68 <_free_r+0x2c>
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	6014      	str	r4, [r2, #0]
 8004f5e:	4628      	mov	r0, r5
 8004f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f64:	f000 b838 	b.w	8004fd8 <__malloc_unlock>
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d908      	bls.n	8004f7e <_free_r+0x42>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	1821      	adds	r1, r4, r0
 8004f70:	428b      	cmp	r3, r1
 8004f72:	bf01      	itttt	eq
 8004f74:	6819      	ldreq	r1, [r3, #0]
 8004f76:	685b      	ldreq	r3, [r3, #4]
 8004f78:	1809      	addeq	r1, r1, r0
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	e7ed      	b.n	8004f5a <_free_r+0x1e>
 8004f7e:	461a      	mov	r2, r3
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b10b      	cbz	r3, 8004f88 <_free_r+0x4c>
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	d9fa      	bls.n	8004f7e <_free_r+0x42>
 8004f88:	6811      	ldr	r1, [r2, #0]
 8004f8a:	1850      	adds	r0, r2, r1
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d10b      	bne.n	8004fa8 <_free_r+0x6c>
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	4401      	add	r1, r0
 8004f94:	1850      	adds	r0, r2, r1
 8004f96:	4283      	cmp	r3, r0
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	d1e0      	bne.n	8004f5e <_free_r+0x22>
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4408      	add	r0, r1
 8004fa2:	6010      	str	r0, [r2, #0]
 8004fa4:	6053      	str	r3, [r2, #4]
 8004fa6:	e7da      	b.n	8004f5e <_free_r+0x22>
 8004fa8:	d902      	bls.n	8004fb0 <_free_r+0x74>
 8004faa:	230c      	movs	r3, #12
 8004fac:	602b      	str	r3, [r5, #0]
 8004fae:	e7d6      	b.n	8004f5e <_free_r+0x22>
 8004fb0:	6820      	ldr	r0, [r4, #0]
 8004fb2:	1821      	adds	r1, r4, r0
 8004fb4:	428b      	cmp	r3, r1
 8004fb6:	bf01      	itttt	eq
 8004fb8:	6819      	ldreq	r1, [r3, #0]
 8004fba:	685b      	ldreq	r3, [r3, #4]
 8004fbc:	1809      	addeq	r1, r1, r0
 8004fbe:	6021      	streq	r1, [r4, #0]
 8004fc0:	6063      	str	r3, [r4, #4]
 8004fc2:	6054      	str	r4, [r2, #4]
 8004fc4:	e7cb      	b.n	8004f5e <_free_r+0x22>
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	20001c04 	.word	0x20001c04

08004fcc <__malloc_lock>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	@ (8004fd4 <__malloc_lock+0x8>)
 8004fce:	f7ff bfa5 	b.w	8004f1c <__retarget_lock_acquire_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20001c00 	.word	0x20001c00

08004fd8 <__malloc_unlock>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	@ (8004fe0 <__malloc_unlock+0x8>)
 8004fda:	f7ff bfa0 	b.w	8004f1e <__retarget_lock_release_recursive>
 8004fde:	bf00      	nop
 8004fe0:	20001c00 	.word	0x20001c00

08004fe4 <_init>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr

08004ff0 <_fini>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr
